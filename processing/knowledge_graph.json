{
  "system_name": "Healthcare Bill Review System",
  "version": "2.0",
  "folder_structure": {
    "_files": [
      "copy_word_pdf.py",
      "knowledge_graph.json",
      "knowledge_graph_generator.py",
      "main.py",
      "move_zero_records.py",
      "rate_analysis_report_20250328_124439.txt",
      "rate_analyzer.ipynb",
      "README.md",
      "README_KNOWLEDGE_GRAPH.md",
      "reassign_orderids.py",
      "setup.py",
      "tatus",
      "test_rate_validation.py",
      "__init__.py"
    ],
    ".git": {
      "_files": [
        "COMMIT_EDITMSG",
        "config",
        "description",
        "HEAD",
        "index",
        "ORIG_HEAD"
      ],
      "hooks": {
        "_files": [
          "applypatch-msg.sample",
          "commit-msg.sample",
          "fsmonitor-watchman.sample",
          "post-update.sample",
          "pre-applypatch.sample",
          "pre-commit.sample",
          "pre-merge-commit.sample",
          "pre-push.sample",
          "pre-rebase.sample",
          "pre-receive.sample",
          "prepare-commit-msg.sample",
          "push-to-checkout.sample",
          "sendemail-validate.sample",
          "update.sample"
        ]
      },
      "info": {
        "_files": [
          "exclude"
        ]
      },
      "logs": {
        "_files": [
          "HEAD"
        ],
        "refs": {
          "_files": [],
          "heads": {
            "_files": [
              "master"
            ]
          },
          "remotes": {
            "_files": [],
            "origin": {
              "_files": [
                "master"
              ]
            }
          }
        }
      },
      "objects": {
        "_files": [],
        "01": {
          "_files": [
            "ee0234a389741a3777d5c060f236129d86e506"
          ]
        },
        "02": {
          "_files": [
            "10671eec39c834aac7ea9b600e311432ab8b67",
            "13ae8ebd1ebf7df250916d742568fb3aa8e670",
            "3a3414f9dc76bd61cf9d1a4549c0b68cd28970",
            "43ac1bf7bf3de204901da156abc22539d394e7",
            "7e506343b55e4b9bf84bd5d8bab537b321b097",
            "b7e657afc3278385c856e7f962410bb01a2e73"
          ]
        },
        "03": {
          "_files": [
            "4721266b931e721ccf3d292b5ffb4c4b4bd12c",
            "5190965d5daf5807778d2212df173b84fadf34",
            "79f443d945e593529d770c7d439114aea5e7e3",
            "9c06b5dbb227b92db62a5c26be58ec37ef3e19",
            "e9ad97878c0d030016014ce88aa4485adfdea4",
            "ff80f473dca0e3f54f8a7766abc74c72a4c5a2"
          ]
        },
        "04": {
          "_files": [
            "5f07fe5b341403f00425ddab17deef3a645b5a",
            "86e23f198862cd4c21cd2c093c562a1da24e0f",
            "e25aac77960a22140c493d12734dd1de2d082e"
          ]
        },
        "05": {
          "_files": [
            "591e8999fc28dce3de05d51271a90cecfbbfae",
            "75279164f086eede865c6638111d6c894411ba"
          ]
        },
        "06": {
          "_files": [
            "8db3370a32d0db95b9b111d9f7b98963c0308a"
          ]
        },
        "07": {
          "_files": [
            "3a73fd86a43bfe7976ab0c45c5375f35dd04f2",
            "9f8242ac33dd16dc7935138238a3eaa93ea381"
          ]
        },
        "08": {
          "_files": [
            "b57cd3e0fdec602af5968165b85edf0fb27e2b"
          ]
        },
        "0a": {
          "_files": [
            "16ede4069ccf5defa8c2f2657051b6de9abd3f",
            "31949f1f5cdfb324e57ebbbea09a1648df1f13"
          ]
        },
        "0b": {
          "_files": [
            "606be9b38bc4876c09209db5323d777c0a1b42"
          ]
        },
        "0c": {
          "_files": [
            "015716b6f1476b58d8cdff8bff6837a5a824f3",
            "b9dba85c01c267ef1a72f2208dee3c48a05405",
            "de0fa11ea1683f1010ea843f1e2508da9b2bf0"
          ]
        },
        "0d": {
          "_files": [
            "1f864f0bc8c8419d7b46bdb97338f0068001a5",
            "3a9b67f12d37eeee6cb4cc09aee2775b446ffd",
            "47152979543656af6c76a472d5402905b177dc",
            "840ff3d4da4baea37964253f7ca08ff133d3f7"
          ]
        },
        "0e": {
          "_files": [
            "30a0922aaa7ec763f92bf1acd7f34dc1783bbc",
            "396f8306a344e2e89b0b2b90cb6254a51d6bb6"
          ]
        },
        "0f": {
          "_files": [
            "1d3152448f267503d21af5725c84e5aff99ac0",
            "a5513c16ab3098f4eda1e0550d75da36bb3915",
            "a8e734f93849ca301f09cf1cafadc7794eced6",
            "ab8450a346d6f4347ea3084ddc46fcf147327c"
          ]
        },
        "10": {
          "_files": [
            "829bfe5e703bb0ada81a980225bd0d1addc5fa",
            "e8e2aee652fc22f5680bc2399e9adced101868"
          ]
        },
        "11": {
          "_files": [
            "1fefae2320eadbec5e1e537d62f4094bda7a09",
            "87974e5761b212f80bfb4bf094ee54cf253445",
            "d31476547f3e86ffb71fe143d3378fbad9df4b"
          ]
        },
        "12": {
          "_files": [
            "3675bbd4ff78f47605493a1283182542f261fc",
            "8a0d34ab7388fa464771b46e6d1f224ebc18a6"
          ]
        },
        "13": {
          "_files": [
            "56119e40b4a2156d227272d2362e409a9bb47e",
            "f27a48c9408f3f9522ffa7c714a9c2e5999e7e"
          ]
        },
        "14": {
          "_files": [
            "082c4d3bf332a5abe6e2f7e192b17aab967f4c",
            "087a66113e0e9798816ee1aa0c8855adb759ef",
            "5c2e25bb26490ca1f42f489dbd58c32c708d1c"
          ]
        },
        "15": {
          "_files": [
            "6fd12bc06320e97dc23afb556f222fc25cb055",
            "ea2c2edb3b240344543e78e7ca7d098b4b089f"
          ]
        },
        "16": {
          "_files": [
            "999888a1a6c6c5526b8f8ffc55dfd5ef1197f6",
            "f937a2a295d1d50e5c6167f0be2998d082c3fd"
          ]
        },
        "17": {
          "_files": [
            "506941ded8b85a015d1dafdd3c3b90234403ba"
          ]
        },
        "18": {
          "_files": [
            "0878ae62a3ca5551c7c2177ac73f3fa869b643",
            "3ba3b3d8a65ab1b1d06db5786de600bde58741",
            "50c2706869fd696affdbe1e684ff7b58947ee8"
          ]
        },
        "1a": {
          "_files": [
            "fef7a9265bb225b20041ee91f2d095f5b69394"
          ]
        },
        "1b": {
          "_files": [
            "2bd84e577201abc06ee415e473f532e7a95b41"
          ]
        },
        "1e": {
          "_files": [
            "500b39f3f5935a8c404bfbb43d6beacfc2773e",
            "86eb2a95d5080d95458557a08107c020ab66c0",
            "bdb4ed7df4c3d704a43ffb3408f56d6a321097"
          ]
        },
        "1f": {
          "_files": [
            "172f0c2adeebc5685ec80cf3bad3cd714c66b7",
            "2c2a4781913ae3e9bb71b428b77ba6f41098ff",
            "63050080ab1b20b8ecb322cba759ce7f696a86",
            "81d77f0ca954b58eb4a1de5147c5a85bed47eb",
            "bc1d0cfdc521c733e572a295260d6cf90f1cd2"
          ]
        },
        "20": {
          "_files": [
            "11f6d2b2dac20aca171f6e385ca155c78e3bd4",
            "4b6c4e853d223d77d73ec7a2a9770ba976efef",
            "677301e09278658281bced30bfb53421a6fee0"
          ]
        },
        "22": {
          "_files": [
            "068d5f27e0b032cd6354f2b4f8d48dee524e11",
            "495bb6a51d46ad1b65b9033be3575e509631c8",
            "679616488ffb06787d6f159d88536e8192a450"
          ]
        },
        "23": {
          "_files": [
            "2a8e77f8cc575fe883aba0e0efa968890f91ca",
            "507803ac451211d491a836df122d5bd5d70631",
            "aa8ee390113de5f2829ac4be78928c537c0582",
            "bab8e354f1d53241be362044e5fbad3f350d5e",
            "eab4b5118f86c75ce3dedfd72edd92f5106c0d",
            "f687a8ae1d6948cf1aaf44af9c7c96e9a6e872"
          ]
        },
        "24": {
          "_files": [
            "7ef819d57cddf75032b71c9f6a783854794bc9",
            "e480b993ae4a0663dd38b332c6b79b6070fa6a"
          ]
        },
        "25": {
          "_files": [
            "93d651be92165f0842bfbcc0cac55ae252939b",
            "b85c16d5e666fbe831fc5b97e8f6c010931ad6",
            "c75ba0ccd297a100c3a24de8f2adfe4a55f67a"
          ]
        },
        "26": {
          "_files": [
            "7a1d424df2559a0d3ea5cfe2f2fbdfab8bb963",
            "c190fd03b5704268e0630bd19fbdfb898a3f65",
            "cfa871739d86dc4b42c6781f3675a3fe87ae3d"
          ]
        },
        "27": {
          "_files": [
            "5217d2ff24d39012145177dcacda13083a15ed"
          ]
        },
        "28": {
          "_files": [
            "88fbd1949878460435bdd76fc5b2f6edffb82a",
            "cede3e3e72d00f8e2db637a898c35af15fa505",
            "f604b7f49f2a97e893dc1212b02947449e72af"
          ]
        },
        "2a": {
          "_files": [
            "6679fc51f5891023c717c89985c1ad7c04072f"
          ]
        },
        "2b": {
          "_files": [
            "19a68d817f11848831f505e5a4dceeebbe950f",
            "3676bf93e6cffd2db34d754f3371e85e121dad",
            "a6feaaaf9a5b1be0310ad13b0594b62561378d",
            "e4cad737bcb0871e75695c4fba71a422adf275"
          ]
        },
        "2c": {
          "_files": [
            "7645c71b9cc774fde8e1d4b24a55e43417b342",
            "ae04c69e23ffc8966257f4c2a1c09b7c7bc68d",
            "b2be747f62c801fb148f35114f0bac33deb419"
          ]
        },
        "2d": {
          "_files": [
            "2a14009c39ee03ef85e95802c0d4958f0f5ba4",
            "5673532ead853dba611a2e51cf859563a0a4fc",
            "60c78f2e4450f4d675906104fc6ca223d8f204",
            "8859630398de2b8d8f4576a29cc7c888c832ec",
            "9939cdd2e9b390970d7786fb9c68ce0a7b1eb9"
          ]
        },
        "2e": {
          "_files": [
            "208524e7c565c35ac43ced35f646480193cf4c",
            "534fa8219b6dc94b3978b44ce444a4aa427077",
            "a27be4ea49a5d527f8fd8adc2175e6f4fdf47c"
          ]
        },
        "2f": {
          "_files": [
            "6393c10d76c0d5190af124661f174652f5967b",
            "64243c1504a07e5561613639dcc3b8b477e429",
            "7d979b1f9c521aa336e17e4691a3651417505f",
            "ef68704aae491130c1796ba76246a8b26a5342"
          ]
        },
        "30": {
          "_files": [
            "91b1f2d18029a7fb177dad8291fb1b574b0ac1",
            "c7148679875956a6fe5b7159af173d424b7c09",
            "db641193720604aaf130a72f3f53d086b65102"
          ]
        },
        "31": {
          "_files": [
            "072b1c3660ccecb373b5b4784b3e0c7cf92974",
            "d0f4bdf9a749e56af7b85240c5ca0c1227c255"
          ]
        },
        "32": {
          "_files": [
            "20f06ab7327ea91c540e075e8d2c739d069519",
            "284e64a97a09716e6a296439bf0f1f6d4b0326",
            "8e9435b626cdd3f1c95663cc9c2b776d2302ca",
            "9c0aa0ec48e3edbeaf2582c220328f55e4f235",
            "b1df40a194273e6c03916ab0da25f599b6ce91",
            "dd3502a3c9d2276d40ab931c415f79104df71f"
          ]
        },
        "33": {
          "_files": [
            "6762a323a6af46e280b39de5f9ac5cd6d2d58b",
            "83d5c92f6b865a0f72d5ba2703c45aa2599e69",
            "cbde9a13b0e855087da8dcdec67db9ede613f9"
          ]
        },
        "34": {
          "_files": [
            "0a92fa81996f270d0427e08ae77cafd37aadb6",
            "4b3399abf2ba8383cf9a87c9b4aaf451fe8707"
          ]
        },
        "35": {
          "_files": [
            "1c0378e12bd011ad210b805dc721551f897629",
            "3bf330116e6fbb99b59487bcbcea0681c6db33",
            "6a3371a43751b1f0c356230bbf13900b4e1369",
            "9ec6a329e910e5502c24f51b76ec4684dfb432",
            "a712ee2b729454b6c34bee13bbfe4748b7c484"
          ]
        },
        "36": {
          "_files": [
            "2fae2b6573249f49a0dbfa434969e4f104b155",
            "3aba1d6b65c8eeb203c9d5c741eacf42f01d0f",
            "d90901749845ec5179e76076c6a8ef5cb58da0",
            "f36fa457f78d8ce8c1f685f63d4fe32b552db6"
          ]
        },
        "37": {
          "_files": [
            "cf2d6a305bed270c617d318ec39f0866fc5bb5"
          ]
        },
        "38": {
          "_files": [
            "12b6df9061a813cf4f512789d08c543c2dc881",
            "ff943eb60587c35a4e891a5fd974ece38f7f6b"
          ]
        },
        "39": {
          "_files": [
            "0462aeb09e45cd20d32dd5ff409e3e5fdbe1a3",
            "78d33956397bcdf048af6e22aa3c03fe8c0d3b",
            "845bd195382b18878015eab50eb88337b2165a",
            "b005cb990d3080e8167309590c61988fa8d905",
            "ca98960d69a986848e8c2e46a98dcd85ec8340"
          ]
        },
        "3b": {
          "_files": [
            "168dae5b42ddce1bc82bae32f491e3045b2f93",
            "ba710c6e107714f7d920e5fc99c56237203124"
          ]
        },
        "3c": {
          "_files": [
            "9629c5af7bf93036756f8abfefbf580fa30133"
          ]
        },
        "3d": {
          "_files": [
            "f9e88d46d9d7ba9a3d8236f5308f1b54de42c6"
          ]
        },
        "3f": {
          "_files": [
            "61329ab4b1054ad17d49d5158dfd4e0e1f20b5",
            "7d27d06992bc137ce09da22d46f7350f3b6c0e",
            "e0256ce939b48691ea2d486af30705304d3863",
            "e3219f02517341321ec173e48be323859fbd7c",
            "fc222015fe5c54ea3386fd64bf113a7a210b0c"
          ]
        },
        "41": {
          "_files": [
            "41958388466c3442951a2e2141327ba196d459",
            "eb8dad9654d1ad0bf4168c9cc5e6c5f523c82a"
          ]
        },
        "42": {
          "_files": [
            "96d07d747ee2151f971917e4960eabcd2e2d14",
            "b19265eb2a0953450e8f205d4ea74a0a2e5139"
          ]
        },
        "43": {
          "_files": [
            "21c557d670184c7fb896446c2f954d1a454131",
            "5f824a2df0a1528f1759d5b18ef9ef33cf6b6e",
            "bdf359ba4443e8623fe68abd0cbf1480b11c92",
            "c3504d9254911e0dc0360e5be7c0ee481004b4"
          ]
        },
        "44": {
          "_files": [
            "420eee3a3a00da0f987800843e3ce7e83f17ca"
          ]
        },
        "45": {
          "_files": [
            "3ed948925b68d0b4235f348afc084794a2061b",
            "8ccf1952ab3cdb2c134329f096f77296abb357",
            "f0ce0e639de599524f1c0d520157ecb608f56b",
            "fedb4d771d0b701da21cf983e16e23d37997db"
          ]
        },
        "46": {
          "_files": [
            "0d29718a46b6395484fc4f2a0afbf4c8321736"
          ]
        },
        "47": {
          "_files": [
            "9ffa9d403df2618c416481c07fd0c4a794db0d"
          ]
        },
        "49": {
          "_files": [
            "714ae8d76cad8fdc48217301c78f458b7f6a09",
            "e20c9da2b4982684c53f5c9f54790e42c25efd"
          ]
        },
        "4a": {
          "_files": [
            "3ae14fad4a9b75e6ec9a66eefc2c7a98d16d47",
            "74dd762e8bd1c93f493d725762b519223462bf",
            "b65923994e6ef99678bdd5f817470b41019d31"
          ]
        },
        "4b": {
          "_files": [
            "85583a7fd3ea468f55a4c764910a93e25b2bb8",
            "e0654d7b8a3a0d60ed8ce0caf6a00b7737d2b5",
            "f61d92beb3a5a4667e6e71c26afbd3567e6524"
          ]
        },
        "4c": {
          "_files": [
            "026c4a05d7c9ccc4e0612d8058cf676b106c24",
            "dc103cba62f90482266425afa53894ba824b04",
            "e3f6613a971b3639e11d64fb8ad428fb2783cf"
          ]
        },
        "4d": {
          "_files": [
            "2e0fe950437697fd97eb53cac18e9436739c3e"
          ]
        },
        "4e": {
          "_files": [
            "38d1b9d3d59aaff8e3906a2f1d24851667b870",
            "b54fd5a6518a7717db56f3ca8d18612eed4806",
            "c923c90fe01eb902651db3471d649e0072068b",
            "d183afa5e037fbafe59ca31a8575ba8e4d7752"
          ]
        },
        "4f": {
          "_files": [
            "57f2a02259fe3b0a5f300ef597e9b766de0282",
            "7ea047bfbbf68d22ed7b9ab629b82f34e9454a",
            "7f29ac83c47203b6791de47641a482ff76f701"
          ]
        },
        "50": {
          "_files": [
            "083b8874aa5c6278729cc256cfd842bc10d819",
            "33fbc3b0ac351c4f21874cf0ff7077d6277dd1",
            "51ca51eb79c275486ca6d96cd4cc90cbf2b8b9"
          ]
        },
        "51": {
          "_files": [
            "17bcd5466982f49f61b91b1ace661200be5258",
            "1f741bd068b20ae8ef2c4d741fa3fbe84ca3cd",
            "b53fbed873ad2cac33952e3a769593d519bdc5",
            "cb508bd11206179e705c5f59c870683f0f5f33"
          ]
        },
        "52": {
          "_files": [
            "ec4d9f8591e6dd635f582c429e18a7172fe802"
          ]
        },
        "53": {
          "_files": [
            "0d93d29059e32bef9857a2817b6bb05938fe0f",
            "767bbe31ddfc683423c631f696cee3f0e1ed40"
          ]
        },
        "54": {
          "_files": [
            "2ef4230d4054a8fa2546d90c595cb6f833e235",
            "678745889a5c8a5b7b3581a2f18451bab2120b"
          ]
        },
        "55": {
          "_files": [
            "0b0644abff9649d0c03e38b98a2ac451e9963f"
          ]
        },
        "56": {
          "_files": [
            "12ff3bc11f1641be97bff656e8e4392858507c",
            "4392e403f7292f9ce2809c23dec5317b8d1193",
            "568c92511451cdd9856993e32a353c20e90462",
            "b5e449130ec6c679c9296b6d77795e1b3a03e0"
          ]
        },
        "58": {
          "_files": [
            "3c80213a3eb5f8feea55667dc441e8b1cd4ddd",
            "3eea73f4f08a4840c190d7b6dcc61f7345bcf2",
            "51256e834a1f3f60b830113424a4f8350fdb2a"
          ]
        },
        "59": {
          "_files": [
            "957cd1f5cf2cf9354c47f7609321682807768d",
            "a0f2d4d53ee13f769ea0093c55dccd4c85dca2"
          ]
        },
        "5a": {
          "_files": [
            "4f2941883e1b97ad925881524cb40ffb6d9b47"
          ]
        },
        "5b": {
          "_files": [
            "30d58acce9ba0fdafa81262c08fda9ff7b19f9"
          ]
        },
        "5c": {
          "_files": [
            "177a5823b64b6d5d40cc83aff34d98e5277b76",
            "a01a139c9d87351fb867902475cfcafe34caa5"
          ]
        },
        "5e": {
          "_files": [
            "478a6920578707385338688c2266b4f6434437"
          ]
        },
        "5f": {
          "_files": [
            "bcdd12dbfc97e511225bd80effdb3bbaf5f3ef",
            "de453b229b7581ddcf91d9a6c65d50151a01d1"
          ]
        },
        "60": {
          "_files": [
            "ed7b52abbc8344ffccec05a2c62e49d092e620"
          ]
        },
        "62": {
          "_files": [
            "17d31e9e216a7e7d6867badadbfad366f104fa",
            "b7640d9787919cdca1f5afbc35397a18851602"
          ]
        },
        "63": {
          "_files": [
            "03ce5c391bf233a11ae20b2f3fabca13e9cf36",
            "ae7c6d1413f2eaea65be735c0a47102345a709"
          ]
        },
        "64": {
          "_files": [
            "78caf282b1f74846f44e7afb0277242185f693",
            "8d6c4d5afce25e39271e85b50e94ae8f6c6e62"
          ]
        },
        "66": {
          "_files": [
            "285a4e6661995842b29e81d5c4b92d37865ce0"
          ]
        },
        "67": {
          "_files": [
            "c627a367f402d379d23b549093e9c713a55a81",
            "d2777fc9b5c3688696faa53a24633e998ce28d"
          ]
        },
        "68": {
          "_files": [
            "19e7524176c9561d00ea30bedbcfd2c7845e8f",
            "513c7e46c375cde5c72f9fc618fbaf1f94ffeb",
            "aed55ef814b0e61c5b4455ab14354b36abb97c"
          ]
        },
        "69": {
          "_files": [
            "5b7df0e67e12bf7fe01a9c17c5098a4246f781",
            "7dfe496f828476963f2d070efd211826102bc5",
            "ea978376d8a82550ff6ca97bb452dd11edb5cf",
            "eb92f2f4e11ea1b6e3f8af24d2f08d01b61ea5",
            "f013b4c403f318f883417f6189a10880295dcb"
          ]
        },
        "6b": {
          "_files": [
            "1b51ea735fdda75dc68a480101db6a84fdd9e1",
            "60a0496cfed62267c7f474c4627da4377952a0"
          ]
        },
        "6c": {
          "_files": [
            "675bb3cee1cf73344f20927b1126f2ef401976"
          ]
        },
        "6d": {
          "_files": [
            "938c0262128c121df4cd26ea6b625523fe897f"
          ]
        },
        "6e": {
          "_files": [
            "a21c0b4af2d4b134ba131244be10210a1707f1",
            "cceb44bdc55977b202b7eabb2432d0958e6a46"
          ]
        },
        "6f": {
          "_files": [
            "ccc59819619357e76288cedbb6d9729fbbb083",
            "e8ef6566383e1ecae54f1b304dd5ffab06cf59"
          ]
        },
        "71": {
          "_files": [
            "51f8673057a78db92100f59ab895829db360a2",
            "836372cd28c58e0dab720fcbaf07a169033f37",
            "ca1b45b0a066687f2faa848f5599cbe27ae5a2",
            "df35e142011ffa23da2aef10766ac64e2ed87f"
          ]
        },
        "72": {
          "_files": [
            "4d41cd77f1890e33cd9fc6a3a954786102b7a9",
            "b1cd724370acaeed879a7ee26a5d875d97b098"
          ]
        },
        "73": {
          "_files": [
            "775d246ed358c6afbf1d23835e5ce32110a77a",
            "797962ec4c011e94475f0c466ed45d5fbc4596",
            "9cb224e3d7c2cebcb3a9719e08fdfb47bfdcc0"
          ]
        },
        "74": {
          "_files": [
            "39da089d533df3715e174bbd2946d2e893d3aa"
          ]
        },
        "75": {
          "_files": [
            "82871fc23aad94b2bec0f4f7ed08c4950b0fe0"
          ]
        },
        "76": {
          "_files": [
            "32f230ca318a68af209067dee72289a3679fda",
            "9832ed8b4dfa5e79db1294b30d48f9e2ecaebe"
          ]
        },
        "77": {
          "_files": [
            "c9f0e1495cacfe76b79ba268409191de8379a2"
          ]
        },
        "78": {
          "_files": [
            "678d66d92de932372846598d4ce7f468b6eced"
          ]
        },
        "79": {
          "_files": [
            "5a5051c762d8ea92b5d85b9a47ca790268a108",
            "9797af35494635e3a2a7450472d6658c9870d3",
            "d10aa7d9b1585c5fbea349066fea4527257c5d"
          ]
        },
        "7a": {
          "_files": [
            "081ea4a17b7da836d983ca114ce01d4e1d4fe1",
            "8e482b125ce12292836656ccd8e989034d6325",
            "8faeaa8b5a0ae4c25f95c17afd393972fa1120"
          ]
        },
        "7b": {
          "_files": [
            "59f6f75e3cd935beb48334eda26274cddfdff6",
            "c111bf4e033e3c12fac10fda8d6f6dc10f49a4"
          ]
        },
        "7c": {
          "_files": [
            "fe369bfc602e27d818abf8f58b3390880edb98"
          ]
        },
        "7d": {
          "_files": [
            "21464573849d31b5ad6f5b0af1e412fe82a179",
            "3a2e7acf61c027fca0ef2a24951c61b43a25bd",
            "569b81fae97b4bb81bb945ee10aaf454fbdf40",
            "7296b8d4b402025779a8e3b2e72ddf621e972c",
            "d76dc7a44e597e922060e36da8de5b1420d611"
          ]
        },
        "7f": {
          "_files": [
            "424e5c588dd3db2e3886de1fcb8dbce5a484f7",
            "5f050cdc5edb3fab57dbf9e100bd56b6f8534d",
            "b3dc12bcbb8a40d2057a1c9c1b54ba93a26196"
          ]
        },
        "80": {
          "_files": [
            "a56dee7d86aa9cb0de1b68811a6bc4e6f07d50"
          ]
        },
        "81": {
          "_files": [
            "77ff7d43043cbaa8c2d18eb0527175b4a63c1c",
            "a81040ec18d84988663b1286147b002bd0bafb",
            "ef1b932c1a0ac65f825cdf66844ef8c8cea69e"
          ]
        },
        "82": {
          "_files": [
            "05132a4ca4a14b3f881b9dd0eeceed87304426",
            "a7bf1c95b58bddfccf813c923434d743a7471f",
            "a8731d1085366baf368b06dc1ef75869493994",
            "b86edd1aa0f4fa1a14fbcc857bee618b087f98",
            "fb1be16984dcdc3a42a4fff8722373483db050"
          ]
        },
        "83": {
          "_files": [
            "5a2bb50fc292cd254d59897176ef72b26e2336",
            "cc8d972cdfb57bbe6adbe7af4e465cacf7e769"
          ]
        },
        "84": {
          "_files": [
            "905184bdfa54a3b0fa90be912f1278c6c9f0ec"
          ]
        },
        "85": {
          "_files": [
            "076e6233760f978597f44a5369cdd58d5169a0",
            "506ebd750602617143ea75c5dfa8ac07d08e23",
            "d924fe3f64868e3aea131c013c8dbc192b30cd"
          ]
        },
        "86": {
          "_files": [
            "1b8082508ead21b25b5ef7179a13d0d185a49a",
            "93d97d272de36fcbc0c2dd4f6d5675ff52cf60"
          ]
        },
        "87": {
          "_files": [
            "054870869aed684725c078d246bd9221aeef8b",
            "2b834bded3e08241c4ba5ae24bf17b010f60d2",
            "cf496bb4707008575053899f454bd4b36d42b5"
          ]
        },
        "88": {
          "_files": [
            "59acf53596123eee5fda78fcb2ec83a42341be",
            "7045ad736f3f39b391d466c2f6af3635f2b569"
          ]
        },
        "89": {
          "_files": [
            "cedd2905b9196c7c55b1bd0e9ab6d2395f7b60"
          ]
        },
        "8a": {
          "_files": [
            "054822ac51e463613b1eb024bc3dadf6fc242b",
            "0d51a8f1bc672141c6469f65b6fd340a0f0067"
          ]
        },
        "8b": {
          "_files": [
            "137891791fe96927ad78e64b0aad7bded08bdc",
            "dae75c1d553c6f5dddd808b9b02d43ccd66293",
            "efaf4784e6663bad77f2e225423e39b8a01ff0"
          ]
        },
        "8c": {
          "_files": [
            "92acf4d225027b169eec055e34cec95b307b0d"
          ]
        },
        "8d": {
          "_files": [
            "003a44843dae3407b00467e8b2b8a01251298d",
            "1c8b69c3fce7bea45c73efd06983e3c419a92f"
          ]
        },
        "8e": {
          "_files": [
            "c1f082537dce70749f0c6abbcedf44ea3cc409"
          ]
        },
        "8f": {
          "_files": [
            "0a84ca37c367f722789a3c0ed5ee100e58f8ed",
            "7df5024655621947cb3c93f443948ab6a16031",
            "940edce07b60499a666ea13b6158f2d3385010"
          ]
        },
        "90": {
          "_files": [
            "0d9b5a34db0e40dcd47bd66e24296b32f502a4"
          ]
        },
        "91": {
          "_files": [
            "7b1d73bb964d94154ca97a64c4221ed6c38c98"
          ]
        },
        "93": {
          "_files": [
            "9894270bbd78b088b94045ee3782e260305b9d"
          ]
        },
        "94": {
          "_files": [
            "294f5f610b06946078271d61a41bff7bb5fd3b",
            "d1b4cd1fa5c9f9867bc78a8f3dcd99d4f72369"
          ]
        },
        "95": {
          "_files": [
            "548cc7abb74ff8a7d0eeccb32ac81fca49d6dd"
          ]
        },
        "96": {
          "_files": [
            "7b06dcb7acbf6a8305b86202b5d7ac2f93c3a2"
          ]
        },
        "97": {
          "_files": [
            "0db4981d947fcfeac8d36d196f8de776bc6bf5"
          ]
        },
        "98": {
          "_files": [
            "bb63cb9f16e48a9ba9be23fa7189d1707fb6ae"
          ]
        },
        "99": {
          "_files": [
            "51572db67051ca12348a1df70d0cd791752287",
            "56b0710ed07d596938b7273feecff8a94493df"
          ]
        },
        "9a": {
          "_files": [
            "75598621d10d9cd524a362d7649c45c0488952"
          ]
        },
        "9b": {
          "_files": [
            "107d59313ad2995fcd0d68dfe2e3096c4ff95c",
            "67d1c7296f2463177ca674d88bdea884693c86",
            "6c823921ea7922cbe8666f06257d45b248993e",
            "83a55edece3692f2518e76bd420747370ddd84"
          ]
        },
        "9c": {
          "_files": [
            "0343695a32782a05c5d034518f7b15835789e4",
            "8ff04828cb7ab589fd3ebee5d1a6e91d2735e6",
            "f87c3f3fc42ab1b2fd111a657c6ee8024f7981"
          ]
        },
        "9d": {
          "_files": [
            "29c2e4d2edc831e540cf859db9dd9f6edb12db"
          ]
        },
        "9e": {
          "_files": [
            "7e5fa605cfd3b7a9726ee1fb9121e4078f9d71",
            "dba1a02753de58b9f5e822e80fbb2f95b31c29"
          ]
        },
        "9f": {
          "_files": [
            "41911410ee297313a8f07dbbb087196609d951",
            "ad019add69c52aa1d174d717cfb31e097ec8b5",
            "cdb1d00ffd34098cd761c8d715c16f885d2adb",
            "e3d59c132553c79e8c300993a55284f5d6c3a0"
          ]
        },
        "a0": {
          "_files": [
            "70f88fae1d339a072b9cf4863b7beb04922421",
            "84b4245297ef715f7f28104c493e9459205d27"
          ]
        },
        "a1": {
          "_files": [
            "3cf36bb9da88f2c40310be7373a49df39a3599",
            "b782a5ce50ab1c65836969881e350569a9b107",
            "b9917d8ef95415815c7379c4854fbdcbadfe94"
          ]
        },
        "a2": {
          "_files": [
            "2800a303e64941a745036a2b3e8ded185f24c8"
          ]
        },
        "a3": {
          "_files": [
            "c15e5f064c77f23a23b36958d4733bdb467786",
            "fd0035c073f70ee95ba03b80c650ff8e1a0268"
          ]
        },
        "a4": {
          "_files": [
            "11195c84ceb5aa6ec95dc4aa24ed048d05ce91"
          ]
        },
        "a6": {
          "_files": [
            "42d3d57568f2e125b7601290eb13a11efb8c61",
            "84ab3688141b4f0c6cb81ba07cac9502314207"
          ]
        },
        "a7": {
          "_files": [
            "d233198d353d3c7af1abba79f92e44849ab9be",
            "e81a80fc29f25b43d215f71bd841a2f974f24b",
            "f35bf78122198bc1964cd7e9c970dc94eb9234",
            "f6448d7c8415896837b3b9e18e2c657ef733ea"
          ]
        },
        "a8": {
          "_files": [
            "223dc24e6fb58860e740428abaf49f795b79f7",
            "5ca2abe3d15b5fd3c2008fb828eb1bfcdaa377",
            "8576a487dc21f84b2a78d87280dbc834b0b674"
          ]
        },
        "a9": {
          "_files": [
            "1a1fc26ad190c540aa790277fed7855a0247c0",
            "7d3bdbc5991b6e7f7e71dbe6a7209c1e6abe1f",
            "b6008f2decdd75199a5afd55a4b1cf6ad98a61",
            "e32ab50fb5a13688b7b89b9700f61436375748"
          ]
        },
        "aa": {
          "_files": [
            "78fe12839c87c624084b3e7cee83b6cdb0f628"
          ]
        },
        "ab": {
          "_files": [
            "5906e9ee02adb40c36af93447c75d9a116e18f",
            "75327319de0fb265c6adec2a9c88808f604bc3",
            "9a8ea89b9a9b72703357675b6f3b2acb0d79c6"
          ]
        },
        "ac": {
          "_files": [
            "4ff766423ce5337a8b715ddb86c71bdc6c55ac",
            "51b0ba6bddf7acbba474d8dc67681fc910e12f"
          ]
        },
        "ad": {
          "_files": [
            "7dcdd071c6dcfe9bd1b6702074520735612563",
            "b9dcb0850c9a9efaf6bd23709a598f9a2e5f7f"
          ]
        },
        "ae": {
          "_files": [
            "85539ee60cd94b0eaa44d18d9a1e699b23d730",
            "9abcdb9db25f808d298a354033a8193f0b96dd"
          ]
        },
        "af": {
          "_files": [
            "e75596fc2bbc03c12ad840a02ae71eedc5a0da",
            "f2824c2077ca855ac87d520b68cca3ab4cbe7e"
          ]
        },
        "b1": {
          "_files": [
            "60125906fafecc932d7da8cc700754e609ab19",
            "d2abb16ffa4f99024c3efb64ca3d57acc0fa30",
            "f481f4ad5965a4e5e4ecbb71788cf651f22831"
          ]
        },
        "b2": {
          "_files": [
            "2a5fcefd4ade87c146036f399b7f5c0c388b75"
          ]
        },
        "b3": {
          "_files": [
            "581f54d60b1481cbbaea9448b246bedf266c4b",
            "6daffd5856a11ff1009e389d3159a9982ac904",
            "938017c3b24cd34b75c02dd18e807733541e56",
            "a0d7dd87c4074913712c531a42a7d5f3aa1cd2",
            "b16e8fa131c7538fce0232676fbad4c7d129f7"
          ]
        },
        "b5": {
          "_files": [
            "0737f36fb782c25a45a3a6416d2cbbb1c694e2",
            "c5c7742c38b70af6dec2b1e00e0bcafa8180a6",
            "c85e209f10cf357ae19475f970d8d0c5d3e8d8",
            "dae78bd14f7213a7164be61623fb8b7f7141eb"
          ]
        },
        "b6": {
          "_files": [
            "0dd0834a431e05b0bb72eea5bb7a976f73065d",
            "19083de584497ca9d5cf72e8650e484b075c1b",
            "2a8b9d2ec0557b4daeb8d7d01149f7384e3ae8",
            "5036528a2ac3abb6f64c179c71eb9bfd415249",
            "676608d9a72dbf9b12e180a22c7ac2b5d92756"
          ]
        },
        "b7": {
          "_files": [
            "77299304cfdc10e61e00f02413b73a95c4e302"
          ]
        },
        "b8": {
          "_files": [
            "0642445046e5b8b473fe0676eb3acd65822691",
            "312fbb33f9ac1f30728f51125a44bc0b3e9b4f",
            "6a980d1ff18f7fd81fc326fccaa190e516a2a1",
            "b7bbd4d479dd7598561f53799bd6425d1730a8"
          ]
        },
        "ba": {
          "_files": [
            "43cbc08276ab50853c84585affc1bac1e6d811"
          ]
        },
        "bb": {
          "_files": [
            "3fb56f9a06c4650ab55fd27568f10ad1e50ba7",
            "7849b09fa503b71223a935fdf34efc431ec66a",
            "d3dedfd0438c3228536f34cd0d32347386446d"
          ]
        },
        "bc": {
          "_files": [
            "070f77a9e6b89dd0b9e9922e6d2d12edb0133f"
          ]
        },
        "bd": {
          "_files": [
            "4f011d0bd92643580698b97a23c6ad574a18a8",
            "98cf77b71fe7495d20f3ed8b3daec9629567aa"
          ]
        },
        "be": {
          "_files": [
            "c8928f62e173440ded2860009fa241fc6d8894"
          ]
        },
        "bf": {
          "_files": [
            "3f4411277df390ac3a4654802102098ac84110"
          ]
        },
        "c0": {
          "_files": [
            "7af912affd83f68042ccd373bc5ee281195110",
            "82f7f5b0d345f32d95dd141c32c6f7722b1018"
          ]
        },
        "c1": {
          "_files": [
            "8380aabce88f0f3215c58090e18312b7bc577a"
          ]
        },
        "c2": {
          "_files": [
            "096c0fa94750a961d3f87bb0d146d96b3d0d9e",
            "11c8b248ef151c6299b71889d34deb0d0228d0",
            "6cfcd431cb2e9d698fe90ea3f994b76524435e",
            "ebe495a11c053298be8528d230e44f3d2e19e3"
          ]
        },
        "c3": {
          "_files": [
            "05af078037dd934491f9d091c7532af3b00e7c",
            "45849ed8503a544c33293bae1563342d24426d",
            "9fbfebf8c657a67c460f92ae4cb1e0ca05b59a"
          ]
        },
        "c5": {
          "_files": [
            "2277d6d990f275f66f50524e5b355e2f7dfe15",
            "bef29f8d1a6cfcb5d00a60557640c5896e5dab"
          ]
        },
        "c6": {
          "_files": [
            "c66a52ddba67022add915678fb2a0d798d2ca5",
            "f42f370d7b996468fef7c04144a0ea088ba500"
          ]
        },
        "c7": {
          "_files": [
            "56cd6574aeb0780b6ebbf84b36d0b321f8aecd",
            "74c10b940deb9ab663ad8c16559f1fcf18f235"
          ]
        },
        "c8": {
          "_files": [
            "947646f540c1610b7d45b544c5bb27df18f11f",
            "a64b1e4c430673b19b29f0413589916591bef0"
          ]
        },
        "c9": {
          "_files": [
            "3e23a9e6799bb19a24dd2602e81442fe28b42b",
            "adeab78a07f3d8edc85ea706a18670b466ee08",
            "b7715ac351992259a6e31940d7ccb42e5c4bb6"
          ]
        },
        "cb": {
          "_files": [
            "90dd0e0c8731f5eb2096b985e2516a3a070b50",
            "b59e9443d995a3c09c50e6ccf16eb593b71632"
          ]
        },
        "cc": {
          "_files": [
            "040400c68dcf29b6d7962ae4112b98b584811c"
          ]
        },
        "cd": {
          "_files": [
            "7dea86463e463403e224d13978a931450be4ca",
            "b1abc4623f46b45ce96de21dbc22f7635efb24",
            "b82bed16d3bfb706578657a99cf239a00715ef"
          ]
        },
        "ce": {
          "_files": [
            "27e86c4b8c35477de0d25cf8f9bd3b44a1b4a3",
            "cf34597552392685c329f96880b71ad879a1d2"
          ]
        },
        "cf": {
          "_files": [
            "0d64fc13b56f46026b4471d180b37d876ec57c",
            "5a700f59e32aad3914349b92c84d44c6ac49c3",
            "9d7d1ee582895d4e09f52f40f2427d2d478121"
          ]
        },
        "d0": {
          "_files": [
            "922dea7c91884c3b19ae815aa97ee96d4809a3",
            "e092d7b78a38f3b1b684475d853ccae1037cc1"
          ]
        },
        "d1": {
          "_files": [
            "5beae95e182207613c68c59dde5f4cd26785d9"
          ]
        },
        "d3": {
          "_files": [
            "1a294ebfaa2e79af19ae19b6a618c31e7da358",
            "651ad6df9e6872e7fab107178365b4696e2a31",
            "9c6b775afea33aeec388fad80b8d9b53f838a7",
            "dcb00ae429917bec302778f0577462b8872f9c"
          ]
        },
        "d4": {
          "_files": [
            "25a6f62705a17d90b152e2e7aac099668da0c9",
            "a67c4ad6d8838e840635d64824d807d9b932ed"
          ]
        },
        "d5": {
          "_files": [
            "66771c4f0c5693e3db5956a0b0b4b2d24de673",
            "97e5449953c50bbcff118ad68350c0a2430629",
            "ebc7ae9638b2c8d9647816298b01b9e8e76bea"
          ]
        },
        "d6": {
          "_files": [
            "01bd8f16949efd57fe3b0194899df105b732e5",
            "34bf6e31ff8d818c4f65859a23804ac0bea7fe",
            "a84832d6ebe3b48241f567c434fd816b6c56f8",
            "e22bd1bcd3fcfa11347981a19bdb3349a16602"
          ]
        },
        "d7": {
          "_files": [
            "b3a9bf53ef337cb4b6fe5c4f874768dbbe9963"
          ]
        },
        "d8": {
          "_files": [
            "c96150beb29da891131e5ea3bbe6bbbe55eb8b"
          ]
        },
        "d9": {
          "_files": [
            "ba8ed6430da62741aed74b69da7f09afbcab34",
            "dc2c1297d407854993996ba2cb31aeb97537b1"
          ]
        },
        "da": {
          "_files": [
            "a0e70220b5ad9f6716c87049f02790659d802a",
            "b7fbf9c31d771f8f5f91ffc04e2a6ec5f6f6d3"
          ]
        },
        "db": {
          "_files": [
            "b68f1a458a75b56396bff3e7e965506b0f377e",
            "ef5f5ef1a62610cfa2b6b1fd62c36021fe8ff7"
          ]
        },
        "dc": {
          "_files": [
            "4d5a702504a3d888c7722a90b7b543a4002900",
            "bcaa942b5f6a0cd96d312af7060324b6a9b872"
          ]
        },
        "dd": {
          "_files": [
            "7d3adce0f531de6d734cb2fd74b2d4c2283b3f",
            "de3bb0ff15ecf6a74bdb792d93c6489f939e9c"
          ]
        },
        "de": {
          "_files": [
            "3b0fe5e058e8c6b36e309caa2ebc735cd45d7c",
            "82dfa7e4196ffe75566ae0b6176bdbe391b7f3"
          ]
        },
        "df": {
          "_files": [
            "0581e1c15fa82a1eebfb66577416acd777930b",
            "28056125657fae518a940be028dcaf9ccd81eb"
          ]
        },
        "e0": {
          "_files": [
            "77d7a92b25189f49e67073802fe8f19429ca7d",
            "8ec785caa3b6f2f04d797f653648b78f8b1ac8",
            "e3f08360a842c60c14f2c8c56dec4ead4ec3ac"
          ]
        },
        "e1": {
          "_files": [
            "0c992beb7fa8291744517619180614d02bbf79",
            "b709f8c5de7a5f2f2f781ea0d2fdb592926747",
            "c7cbd1753ec55fdc68251345a130c0a4cbd362",
            "dd974aec996512804ac554d161acdda2c12022",
            "eed726be1b26999653ea1a04d794e28675a976"
          ]
        },
        "e2": {
          "_files": [
            "2424810b251a0161eb3df6e2bb543388ee6bf5",
            "c3206b8f855a15c06040c7dc09bf4913fac87a",
            "eb0084979650a285e7626bf62f3653ce7b0c79"
          ]
        },
        "e3": {
          "_files": [
            "2d721e9cc7703bb58d81f274cabf2935b16c62",
            "d8dae1dbe092c6b41ec8e6965a16c1910db51a"
          ]
        },
        "e4": {
          "_files": [
            "8f2a76622b0528392d78b5f3d3d25538a46443",
            "e9c4b08d13791a17dac699ea3251a3ee34c51b"
          ]
        },
        "e5": {
          "_files": [
            "1722979cad67d3a2a51d185096b076b1b814df",
            "7e3bbf163fca253f986d97213afa0c06cd00e6",
            "946672b4957bb9d6b59c7e88cae0ae4f3f7fef",
            "ccf81889fc439f4f6ea6caea567ea8dbfa0a56",
            "f264227a321a66b61ccd5917dcebcf2312ab31"
          ]
        },
        "e6": {
          "_files": [
            "01f6a45c1a4a60ac3839a64d1a0fd45e360bff",
            "33e274e5f8bec7c4b1101b1c0b1fc3f4c0963f",
            "d01092bd6eb8c1d9928bd9f0a9edcbc690eb9c"
          ]
        },
        "e8": {
          "_files": [
            "10a1b5947051b3098b5e84df76061f0a80846b",
            "2be5e07a1dacb4779e69eb3e934f72b12aa0d5",
            "3a0a6c317bdbe38a4af8127988a26231ef05a5",
            "89a37eefc1bf7948332d01381f23388c0f2936",
            "9555205717f22d6666b9cc81dc25bada1167c6"
          ]
        },
        "e9": {
          "_files": [
            "3e0b8d828c19e2006304603e5b4b14075dcc64"
          ]
        },
        "ea": {
          "_files": [
            "3a621ca0a05c49db8158d698c62e89f70d3d4c",
            "c9b4a94ddca5d11f91f4749d9b40792ad3ebf3",
            "fb77f4fe090bb734f6601e94fc68114401577b"
          ]
        },
        "eb": {
          "_files": [
            "4c8f5b318cfd8609c19ca162aca7d93a60868d"
          ]
        },
        "ec": {
          "_files": [
            "1689853c1ea345688b51841d71b4af3bda9bc9"
          ]
        },
        "ed": {
          "_files": [
            "08a15ffe2b646feacdcc57103eead8e79f11c9",
            "b53c62ccf011e8dd700c544d66cef5274a8e36"
          ]
        },
        "ee": {
          "_files": [
            "97ba7d12be5c7f3675f992a1ed8637f57e2cf2",
            "cd7ad91daa5634c4cc5263a4eb86149cfac1ca",
            "d4e960e55bb3edab0ef9c94dc9703b1a0914ee"
          ]
        },
        "ef": {
          "_files": [
            "e5924ab647da78fa9996dc27a797ad8e228ee8"
          ]
        },
        "f1": {
          "_files": [
            "664ab6c86b7be48a9f84ac91988325a183cb94",
            "692a1ceddcfdf5471d7bca395f62c98670fcda"
          ]
        },
        "f2": {
          "_files": [
            "5de5b409682e7a5892dc179de35a8cd21c7f78",
            "b6c9a7f082e8dd02b7ad8141b501d38ef43722"
          ]
        },
        "f3": {
          "_files": [
            "797a55c5f528d0fe4037cf0aa664e1ecd7a7a7",
            "874f796ca0752c8c2005a85befcdb774416891"
          ]
        },
        "f4": {
          "_files": [
            "7376f439471f03247ea6da0bf0d1a29bc1d903",
            "d1620ba505a3d35b74b5b615f9d80cf15d68d9",
            "f589ab4967a28e07dd53f1a01073e6c59d96a1"
          ]
        },
        "f6": {
          "_files": [
            "f9828b5d17b18f28ab19f2659d32044857bffb",
            "fe0a6a117992ab22ab8fc6af360ff97a796080",
            "ffefdc987293bd6c7850c41a3b9ea39c9b0198"
          ]
        },
        "f7": {
          "_files": [
            "1a80c1f1598e8a7160e8fc4567369cebd5d1aa",
            "272012d62887f612b8154e6324b4afa862df73",
            "d44db796a15f7316a2ec82e85807e2db7d7d0d"
          ]
        },
        "f8": {
          "_files": [
            "6c1ff7c8714a2cb94fc0465bfc1af4078f01ff"
          ]
        },
        "f9": {
          "_files": [
            "2e98049ebe1c521b4a96bab5e76b744e5c5d92",
            "5b921c883c69438c3ca58bfb0962d16fddc972"
          ]
        },
        "fa": {
          "_files": [
            "3cc10afca46a5911bfb4fdcc4ff075e4623939",
            "e7d9189bccb8df3840c98606e4337a43ed7370"
          ]
        },
        "fb": {
          "_files": [
            "059e0b591a745dc54c04b99f682e3fb9298288"
          ]
        },
        "fc": {
          "_files": [
            "33fed1b1f586d86cc3d19c06a9255fd076e186",
            "7002249ee417d889d86788360d09c5f745d3a3",
            "7f5ac61a1e02ae939e9f20ac25d040b766e148"
          ]
        },
        "fd": {
          "_files": [
            "a8980398511f50d848762607927e69fd387751",
            "ceb932e92e2646be409a0c2362fe69ca71c002"
          ]
        },
        "fe": {
          "_files": [
            "16f4d9ed2b1b728f6de0f5effebd6dfc79978a",
            "501fc3ce591452061f726fef496b8aac00aa86",
            "94f9252e67bf6c2caba3f3938b154b20c37216",
            "f314e0f5dc914f476ae498069eb0e6c60d7866",
            "f58bfb752f676227e01041b844ee142f2beeba"
          ]
        },
        "ff": {
          "_files": [
            "1e71ba2bbe7ad8946b7cdc7066829d232e44c2",
            "bd38d1b040b2752dde9ed3375eda7ad49200ff"
          ]
        },
        "info": {
          "_files": []
        },
        "pack": {
          "_files": []
        }
      },
      "refs": {
        "_files": [],
        "heads": {
          "_files": [
            "master"
          ]
        },
        "remotes": {
          "_files": [],
          "origin": {
            "_files": [
              "master"
            ]
          }
        },
        "tags": {
          "_files": []
        }
      }
    },
    "api": {
      "_files": [
        "__init__.py"
      ],
      "endpoints": {
        "_files": [
          "__init__.py"
        ]
      }
    },
    "brsystem.egg-info": {
      "_files": [
        "dependency_links.txt",
        "PKG-INFO",
        "requires.txt",
        "SOURCES.txt",
        "top_level.txt"
      ]
    },
    "config": {
      "_files": [
        "ancillary_codes.json",
        "clinical_equivalents.json",
        "procedure_bundles.json",
        "provider_rules.json",
        "settings.py",
        "__init__.py"
      ]
    },
    "core": {
      "_files": [
        "__init__.py"
      ],
      "config": {
        "_files": [
          "settings.py",
          "__init__.py"
        ]
      },
      "models": {
        "_files": [
          "clinical_intent.py",
          "procedures.py",
          "validation.py",
          "__init__.py"
        ]
      },
      "services": {
        "_files": [
          "database.py",
          "hcfa.py",
          "normalizer.py",
          "ota_service.py",
          "rate_service.py",
          "reporter.py",
          "__init__.py"
        ]
      },
      "validators": {
        "_files": [
          "bundle_validator.py",
          "intent_validator.py",
          "line_items.py",
          "modifier_validator.py",
          "rate_validator.py",
          "units_validator.py",
          "__init__.py"
        ]
      }
    },
    "output": {
      "_files": [],
      "staging": {
        "_files": []
      }
    },
    "rate_analysis_charts_20250328_124439": {
      "_files": [
        "rate_analysis_summary.png"
      ]
    },
    "sample": {
      "_files": [
        "20241217_1012.json",
        "20250325_124127059.json",
        "20250325_124127062.json",
        "20250325_124127064.json",
        "dbstructure.csv",
        "dbstructure.json",
        "instructions.md"
      ],
      "fails": {
        "_files": [
          "20241217_1069.json",
          "20241217_1076.json",
          "20241217_1077.json",
          "20241217_1083.json",
          "20241217_1086.json"
        ]
      }
    },
    "utils": {
      "_files": [
        "code_mapper.py",
        "helpers.py",
        "logging_utils.py",
        "__init__.py"
      ]
    },
    "venv": {
      "_files": [
        "pyvenv.cfg"
      ],
      "Include": {
        "_files": []
      },
      "Lib": {
        "_files": [],
        "site-packages": {
          "_files": [
            "numpy-2.2.4-cp313-cp313-win_amd64.whl",
            "six.py",
            "__editable__.brsystem-0.1.pth",
            "__editable___brsystem_0_1_finder.py"
          ],
          "blinker": {
            "_files": [
              "base.py",
              "py.typed",
              "_utilities.py",
              "__init__.py"
            ]
          },
          "blinker-1.9.0.dist-info": {
            "_files": [
              "INSTALLER",
              "LICENSE.txt",
              "METADATA",
              "RECORD",
              "WHEEL"
            ]
          },
          "brsystem-0.1.dist-info": {
            "_files": [
              "direct_url.json",
              "INSTALLER",
              "METADATA",
              "RECORD",
              "REQUESTED",
              "top_level.txt",
              "WHEEL"
            ]
          },
          "click": {
            "_files": [
              "core.py",
              "decorators.py",
              "exceptions.py",
              "formatting.py",
              "globals.py",
              "parser.py",
              "py.typed",
              "shell_completion.py",
              "termui.py",
              "testing.py",
              "types.py",
              "utils.py",
              "_compat.py",
              "_termui_impl.py",
              "_textwrap.py",
              "_winconsole.py",
              "__init__.py"
            ]
          },
          "click-8.1.8.dist-info": {
            "_files": [
              "INSTALLER",
              "LICENSE.txt",
              "METADATA",
              "RECORD",
              "WHEEL"
            ]
          },
          "colorama": {
            "_files": [
              "ansi.py",
              "ansitowin32.py",
              "initialise.py",
              "win32.py",
              "winterm.py",
              "__init__.py"
            ],
            "tests": {
              "_files": [
                "ansitowin32_test.py",
                "ansi_test.py",
                "initialise_test.py",
                "isatty_test.py",
                "utils.py",
                "winterm_test.py",
                "__init__.py"
              ]
            }
          },
          "colorama-0.4.6.dist-info": {
            "_files": [
              "INSTALLER",
              "METADATA",
              "RECORD",
              "WHEEL"
            ],
            "licenses": {
              "_files": [
                "LICENSE.txt"
              ]
            }
          },
          "dateutil": {
            "_files": [
              "easter.py",
              "relativedelta.py",
              "rrule.py",
              "tzwin.py",
              "utils.py",
              "_common.py",
              "_version.py",
              "__init__.py"
            ],
            "parser": {
              "_files": [
                "isoparser.py",
                "_parser.py",
                "__init__.py"
              ]
            },
            "tz": {
              "_files": [
                "tz.py",
                "win.py",
                "_common.py",
                "_factories.py",
                "__init__.py"
              ]
            },
            "zoneinfo": {
              "_files": [
                "dateutil-zoneinfo.tar.gz",
                "rebuild.py",
                "__init__.py"
              ]
            }
          },
          "dotenv": {
            "_files": [
              "cli.py",
              "ipython.py",
              "main.py",
              "parser.py",
              "py.typed",
              "variables.py",
              "version.py",
              "__init__.py",
              "__main__.py"
            ]
          },
          "et_xmlfile": {
            "_files": [
              "incremental_tree.py",
              "xmlfile.py",
              "__init__.py"
            ]
          },
          "et_xmlfile-2.0.0.dist-info": {
            "_files": [
              "AUTHORS.txt",
              "INSTALLER",
              "LICENCE.python",
              "LICENCE.rst",
              "METADATA",
              "RECORD",
              "top_level.txt",
              "WHEEL"
            ]
          },
          "flask": {
            "_files": [
              "app.py",
              "blueprints.py",
              "cli.py",
              "config.py",
              "ctx.py",
              "debughelpers.py",
              "globals.py",
              "helpers.py",
              "logging.py",
              "py.typed",
              "sessions.py",
              "signals.py",
              "templating.py",
              "testing.py",
              "typing.py",
              "views.py",
              "wrappers.py",
              "__init__.py",
              "__main__.py"
            ],
            "json": {
              "_files": [
                "provider.py",
                "tag.py",
                "__init__.py"
              ]
            },
            "sansio": {
              "_files": [
                "app.py",
                "blueprints.py",
                "README.md",
                "scaffold.py"
              ]
            }
          },
          "flask-3.0.2.dist-info": {
            "_files": [
              "entry_points.txt",
              "INSTALLER",
              "LICENSE.rst",
              "METADATA",
              "RECORD",
              "WHEEL"
            ]
          },
          "flask_cors": {
            "_files": [
              "core.py",
              "decorator.py",
              "extension.py",
              "version.py",
              "__init__.py"
            ]
          },
          "flask_cors-5.0.1.dist-info": {
            "_files": [
              "INSTALLER",
              "METADATA",
              "RECORD",
              "REQUESTED",
              "top_level.txt",
              "WHEEL"
            ]
          },
          "fuzzywuzzy": {
            "_files": [
              "fuzz.py",
              "process.py",
              "StringMatcher.py",
              "string_processing.py",
              "utils.py",
              "__init__.py"
            ]
          },
          "fuzzywuzzy-0.18.0.dist-info": {
            "_files": [
              "INSTALLER",
              "LICENSE.txt",
              "METADATA",
              "RECORD",
              "REQUESTED",
              "top_level.txt",
              "WHEEL",
              "zip-safe"
            ]
          },
          "itsdangerous": {
            "_files": [
              "encoding.py",
              "exc.py",
              "py.typed",
              "serializer.py",
              "signer.py",
              "timed.py",
              "url_safe.py",
              "_json.py",
              "__init__.py"
            ]
          },
          "itsdangerous-2.2.0.dist-info": {
            "_files": [
              "INSTALLER",
              "LICENSE.txt",
              "METADATA",
              "RECORD",
              "WHEEL"
            ]
          },
          "jinja2": {
            "_files": [
              "async_utils.py",
              "bccache.py",
              "compiler.py",
              "constants.py",
              "debug.py",
              "defaults.py",
              "environment.py",
              "exceptions.py",
              "ext.py",
              "filters.py",
              "idtracking.py",
              "lexer.py",
              "loaders.py",
              "meta.py",
              "nativetypes.py",
              "nodes.py",
              "optimizer.py",
              "parser.py",
              "py.typed",
              "runtime.py",
              "sandbox.py",
              "tests.py",
              "utils.py",
              "visitor.py",
              "_identifier.py",
              "__init__.py"
            ]
          },
          "jinja2-3.1.6.dist-info": {
            "_files": [
              "entry_points.txt",
              "INSTALLER",
              "METADATA",
              "RECORD",
              "WHEEL"
            ],
            "licenses": {
              "_files": [
                "LICENSE.txt"
              ]
            }
          },
          "markupsafe": {
            "_files": [
              "py.typed",
              "_native.py",
              "_speedups.c",
              "_speedups.cp313-win_amd64.pyd",
              "_speedups.pyi",
              "__init__.py"
            ]
          },
          "MarkupSafe-3.0.2.dist-info": {
            "_files": [
              "INSTALLER",
              "LICENSE.txt",
              "METADATA",
              "RECORD",
              "top_level.txt",
              "WHEEL"
            ]
          },
          "numpy": {
            "_files": [
              "conftest.py",
              "ctypeslib.py",
              "ctypeslib.pyi",
              "dtypes.py",
              "dtypes.pyi",
              "exceptions.py",
              "exceptions.pyi",
              "matlib.py",
              "matlib.pyi",
              "py.typed",
              "version.py",
              "version.pyi",
              "_array_api_info.py",
              "_array_api_info.pyi",
              "_configtool.py",
              "_configtool.pyi",
              "_distributor_init.py",
              "_distributor_init.pyi",
              "_expired_attrs_2_0.py",
              "_expired_attrs_2_0.pyi",
              "_globals.py",
              "_globals.pyi",
              "_pytesttester.py",
              "_pytesttester.pyi",
              "__config__.py",
              "__config__.pyi",
              "__init__.cython-30.pxd",
              "__init__.pxd",
              "__init__.py",
              "__init__.pyi"
            ],
            "char": {
              "_files": [
                "__init__.py",
                "__init__.pyi"
              ]
            },
            "compat": {
              "_files": [
                "py3k.py",
                "__init__.py"
              ],
              "tests": {
                "_files": [
                  "__init__.py"
                ]
              }
            },
            "core": {
              "_files": [
                "arrayprint.py",
                "defchararray.py",
                "einsumfunc.py",
                "fromnumeric.py",
                "function_base.py",
                "getlimits.py",
                "multiarray.py",
                "numeric.py",
                "numerictypes.py",
                "overrides.py",
                "overrides.pyi",
                "records.py",
                "shape_base.py",
                "umath.py",
                "_dtype.py",
                "_dtype.pyi",
                "_dtype_ctypes.py",
                "_dtype_ctypes.pyi",
                "_internal.py",
                "_multiarray_umath.py",
                "_utils.py",
                "__init__.py",
                "__init__.pyi"
              ]
            },
            "doc": {
              "_files": [
                "ufuncs.py"
              ]
            },
            "f2py": {
              "_files": [
                "auxfuncs.py",
                "capi_maps.py",
                "cb_rules.py",
                "cfuncs.py",
                "common_rules.py",
                "crackfortran.py",
                "diagnose.py",
                "f2py2e.py",
                "f90mod_rules.py",
                "func2subr.py",
                "rules.py",
                "setup.cfg",
                "symbolic.py",
                "use_rules.py",
                "_isocbind.py",
                "_src_pyf.py",
                "__init__.py",
                "__init__.pyi",
                "__main__.py",
                "__version__.py"
              ],
              "src": {
                "_files": [
                  "fortranobject.c",
                  "fortranobject.h"
                ]
              },
              "tests": {
                "_files": [
                  "test_abstract_interface.py",
                  "test_array_from_pyobj.py",
                  "test_assumed_shape.py",
                  "test_block_docstring.py",
                  "test_callback.py",
                  "test_character.py",
                  "test_common.py",
                  "test_crackfortran.py",
                  "test_data.py",
                  "test_docs.py",
                  "test_f2cmap.py",
                  "test_f2py2e.py",
                  "test_isoc.py",
                  "test_kind.py",
                  "test_mixed.py",
                  "test_modules.py",
                  "test_parameter.py",
                  "test_pyf_src.py",
                  "test_quoted_character.py",
                  "test_regression.py",
                  "test_return_character.py",
                  "test_return_complex.py",
                  "test_return_integer.py",
                  "test_return_logical.py",
                  "test_return_real.py",
                  "test_routines.py",
                  "test_semicolon_split.py",
                  "test_size.py",
                  "test_string.py",
                  "test_symbolic.py",
                  "test_value_attrspec.py",
                  "util.py",
                  "__init__.py"
                ],
                "src": {
                  "_files": [],
                  "abstract_interface": {
                    "_files": [
                      "foo.f90",
                      "gh18403_mod.f90"
                    ]
                  },
                  "array_from_pyobj": {
                    "_files": [
                      "wrapmodule.c"
                    ]
                  },
                  "assumed_shape": {
                    "_files": [
                      "foo_free.f90",
                      "foo_mod.f90",
                      "foo_use.f90",
                      "precision.f90"
                    ]
                  },
                  "block_docstring": {
                    "_files": [
                      "foo.f"
                    ]
                  },
                  "callback": {
                    "_files": [
                      "foo.f",
                      "gh17797.f90",
                      "gh18335.f90",
                      "gh25211.f",
                      "gh25211.pyf",
                      "gh26681.f90"
                    ]
                  },
                  "cli": {
                    "_files": [
                      "gh_22819.pyf",
                      "hi77.f",
                      "hiworld.f90"
                    ]
                  },
                  "common": {
                    "_files": [
                      "block.f",
                      "gh19161.f90"
                    ]
                  },
                  "crackfortran": {
                    "_files": [
                      "accesstype.f90",
                      "data_common.f",
                      "data_multiplier.f",
                      "data_stmts.f90",
                      "data_with_comments.f",
                      "foo_deps.f90",
                      "gh15035.f",
                      "gh17859.f",
                      "gh22648.pyf",
                      "gh23533.f",
                      "gh23598.f90",
                      "gh23598Warn.f90",
                      "gh23879.f90",
                      "gh27697.f90",
                      "gh2848.f90",
                      "operators.f90",
                      "privatemod.f90",
                      "publicmod.f90",
                      "pubprivmod.f90",
                      "unicode_comment.f90"
                    ]
                  },
                  "f2cmap": {
                    "_files": [
                      "isoFortranEnvMap.f90"
                    ]
                  },
                  "isocintrin": {
                    "_files": [
                      "isoCtests.f90"
                    ]
                  },
                  "kind": {
                    "_files": [
                      "foo.f90"
                    ]
                  },
                  "mixed": {
                    "_files": [
                      "foo.f",
                      "foo_fixed.f90",
                      "foo_free.f90"
                    ]
                  },
                  "modules": {
                    "_files": [
                      "module_data_docstring.f90",
                      "use_modules.f90"
                    ],
                    "gh25337": {
                      "_files": [
                        "data.f90",
                        "use_data.f90"
                      ]
                    },
                    "gh26920": {
                      "_files": [
                        "two_mods_with_no_public_entities.f90",
                        "two_mods_with_one_public_routine.f90"
                      ]
                    }
                  },
                  "negative_bounds": {
                    "_files": [
                      "issue_20853.f90"
                    ]
                  },
                  "parameter": {
                    "_files": [
                      "constant_array.f90",
                      "constant_both.f90",
                      "constant_compound.f90",
                      "constant_integer.f90",
                      "constant_non_compound.f90",
                      "constant_real.f90"
                    ]
                  },
                  "quoted_character": {
                    "_files": [
                      "foo.f"
                    ]
                  },
                  "regression": {
                    "_files": [
                      "AB.inc",
                      "assignOnlyModule.f90",
                      "datonly.f90",
                      "f77comments.f",
                      "f77fixedform.f95",
                      "f90continuation.f90",
                      "incfile.f90",
                      "inout.f90",
                      "lower_f2py_fortran.f90"
                    ]
                  },
                  "return_character": {
                    "_files": [
                      "foo77.f",
                      "foo90.f90"
                    ]
                  },
                  "return_complex": {
                    "_files": [
                      "foo77.f",
                      "foo90.f90"
                    ]
                  },
                  "return_integer": {
                    "_files": [
                      "foo77.f",
                      "foo90.f90"
                    ]
                  },
                  "return_logical": {
                    "_files": [
                      "foo77.f",
                      "foo90.f90"
                    ]
                  },
                  "return_real": {
                    "_files": [
                      "foo77.f",
                      "foo90.f90"
                    ]
                  },
                  "routines": {
                    "_files": [
                      "funcfortranname.f",
                      "funcfortranname.pyf",
                      "subrout.f",
                      "subrout.pyf"
                    ]
                  },
                  "size": {
                    "_files": [
                      "foo.f90"
                    ]
                  },
                  "string": {
                    "_files": [
                      "char.f90",
                      "fixed_string.f90",
                      "gh24008.f",
                      "gh24662.f90",
                      "gh25286.f90",
                      "gh25286.pyf",
                      "gh25286_bc.pyf",
                      "scalar_string.f90",
                      "string.f"
                    ]
                  },
                  "value_attrspec": {
                    "_files": [
                      "gh21665.f90"
                    ]
                  }
                }
              },
              "_backends": {
                "_files": [
                  "meson.build.template",
                  "_backend.py",
                  "_distutils.py",
                  "_meson.py",
                  "__init__.py"
                ]
              }
            },
            "fft": {
              "_files": [
                "helper.py",
                "helper.pyi",
                "_helper.py",
                "_helper.pyi",
                "_pocketfft.py",
                "_pocketfft.pyi",
                "_pocketfft_umath.cp313-win_amd64.lib",
                "_pocketfft_umath.cp313-win_amd64.pyd",
                "__init__.py",
                "__init__.pyi"
              ],
              "tests": {
                "_files": [
                  "test_helper.py",
                  "test_pocketfft.py",
                  "__init__.py"
                ]
              }
            },
            "lib": {
              "_files": [
                "array_utils.py",
                "array_utils.pyi",
                "format.py",
                "format.pyi",
                "introspect.py",
                "introspect.pyi",
                "mixins.py",
                "mixins.pyi",
                "npyio.py",
                "npyio.pyi",
                "recfunctions.py",
                "recfunctions.pyi",
                "scimath.py",
                "scimath.pyi",
                "stride_tricks.py",
                "stride_tricks.pyi",
                "user_array.py",
                "user_array.pyi",
                "_arraypad_impl.py",
                "_arraypad_impl.pyi",
                "_arraysetops_impl.py",
                "_arraysetops_impl.pyi",
                "_arrayterator_impl.py",
                "_arrayterator_impl.pyi",
                "_array_utils_impl.py",
                "_array_utils_impl.pyi",
                "_datasource.py",
                "_datasource.pyi",
                "_function_base_impl.py",
                "_function_base_impl.pyi",
                "_histograms_impl.py",
                "_histograms_impl.pyi",
                "_index_tricks_impl.py",
                "_index_tricks_impl.pyi",
                "_iotools.py",
                "_iotools.pyi",
                "_nanfunctions_impl.py",
                "_nanfunctions_impl.pyi",
                "_npyio_impl.py",
                "_npyio_impl.pyi",
                "_polynomial_impl.py",
                "_polynomial_impl.pyi",
                "_scimath_impl.py",
                "_scimath_impl.pyi",
                "_shape_base_impl.py",
                "_shape_base_impl.pyi",
                "_stride_tricks_impl.py",
                "_stride_tricks_impl.pyi",
                "_twodim_base_impl.py",
                "_twodim_base_impl.pyi",
                "_type_check_impl.py",
                "_type_check_impl.pyi",
                "_ufunclike_impl.py",
                "_ufunclike_impl.pyi",
                "_user_array_impl.py",
                "_user_array_impl.pyi",
                "_utils_impl.py",
                "_utils_impl.pyi",
                "_version.py",
                "_version.pyi",
                "__init__.py",
                "__init__.pyi"
              ],
              "tests": {
                "_files": [
                  "test_arraypad.py",
                  "test_arraysetops.py",
                  "test_arrayterator.py",
                  "test_array_utils.py",
                  "test_format.py",
                  "test_function_base.py",
                  "test_histograms.py",
                  "test_index_tricks.py",
                  "test_io.py",
                  "test_loadtxt.py",
                  "test_mixins.py",
                  "test_nanfunctions.py",
                  "test_packbits.py",
                  "test_polynomial.py",
                  "test_recfunctions.py",
                  "test_regression.py",
                  "test_shape_base.py",
                  "test_stride_tricks.py",
                  "test_twodim_base.py",
                  "test_type_check.py",
                  "test_ufunclike.py",
                  "test_utils.py",
                  "test__datasource.py",
                  "test__iotools.py",
                  "test__version.py",
                  "__init__.py"
                ],
                "data": {
                  "_files": [
                    "py2-np0-objarr.npy",
                    "py2-objarr.npy",
                    "py2-objarr.npz",
                    "py3-objarr.npy",
                    "py3-objarr.npz",
                    "python3.npy",
                    "win64python2.npy"
                  ]
                }
              }
            },
            "linalg": {
              "_files": [
                "lapack_lite.cp313-win_amd64.lib",
                "lapack_lite.cp313-win_amd64.pyd",
                "lapack_lite.pyi",
                "linalg.py",
                "linalg.pyi",
                "_linalg.py",
                "_linalg.pyi",
                "_umath_linalg.cp313-win_amd64.lib",
                "_umath_linalg.cp313-win_amd64.pyd",
                "_umath_linalg.pyi",
                "__init__.py",
                "__init__.pyi"
              ],
              "tests": {
                "_files": [
                  "test_deprecations.py",
                  "test_linalg.py",
                  "test_regression.py",
                  "__init__.py"
                ]
              }
            },
            "ma": {
              "_files": [
                "API_CHANGES.txt",
                "core.py",
                "core.pyi",
                "extras.py",
                "extras.pyi",
                "LICENSE",
                "mrecords.py",
                "mrecords.pyi",
                "README.rst",
                "testutils.py",
                "timer_comparison.py",
                "__init__.py",
                "__init__.pyi"
              ],
              "tests": {
                "_files": [
                  "test_arrayobject.py",
                  "test_core.py",
                  "test_deprecations.py",
                  "test_extras.py",
                  "test_mrecords.py",
                  "test_old_ma.py",
                  "test_regression.py",
                  "test_subclassing.py",
                  "__init__.py"
                ]
              }
            },
            "matrixlib": {
              "_files": [
                "defmatrix.py",
                "defmatrix.pyi",
                "__init__.py",
                "__init__.pyi"
              ],
              "tests": {
                "_files": [
                  "test_defmatrix.py",
                  "test_interaction.py",
                  "test_masked_matrix.py",
                  "test_matrix_linalg.py",
                  "test_multiarray.py",
                  "test_numeric.py",
                  "test_regression.py",
                  "__init__.py"
                ]
              }
            },
            "polynomial": {
              "_files": [
                "chebyshev.py",
                "chebyshev.pyi",
                "hermite.py",
                "hermite.pyi",
                "hermite_e.py",
                "hermite_e.pyi",
                "laguerre.py",
                "laguerre.pyi",
                "legendre.py",
                "legendre.pyi",
                "polynomial.py",
                "polynomial.pyi",
                "polyutils.py",
                "polyutils.pyi",
                "_polybase.py",
                "_polybase.pyi",
                "_polytypes.pyi",
                "__init__.py",
                "__init__.pyi"
              ],
              "tests": {
                "_files": [
                  "test_chebyshev.py",
                  "test_classes.py",
                  "test_hermite.py",
                  "test_hermite_e.py",
                  "test_laguerre.py",
                  "test_legendre.py",
                  "test_polynomial.py",
                  "test_polyutils.py",
                  "test_printing.py",
                  "test_symbol.py",
                  "__init__.py"
                ]
              }
            },
            "random": {
              "_files": [
                "bit_generator.cp313-win_amd64.lib",
                "bit_generator.cp313-win_amd64.pyd",
                "bit_generator.pxd",
                "bit_generator.pyi",
                "c_distributions.pxd",
                "LICENSE.md",
                "mtrand.cp313-win_amd64.lib",
                "mtrand.cp313-win_amd64.pyd",
                "mtrand.pyi",
                "_bounded_integers.cp313-win_amd64.lib",
                "_bounded_integers.cp313-win_amd64.pyd",
                "_bounded_integers.pxd",
                "_common.cp313-win_amd64.lib",
                "_common.cp313-win_amd64.pyd",
                "_common.pxd",
                "_generator.cp313-win_amd64.lib",
                "_generator.cp313-win_amd64.pyd",
                "_generator.pyi",
                "_mt19937.cp313-win_amd64.lib",
                "_mt19937.cp313-win_amd64.pyd",
                "_mt19937.pyi",
                "_pcg64.cp313-win_amd64.lib",
                "_pcg64.cp313-win_amd64.pyd",
                "_pcg64.pyi",
                "_philox.cp313-win_amd64.lib",
                "_philox.cp313-win_amd64.pyd",
                "_philox.pyi",
                "_pickle.py",
                "_pickle.pyi",
                "_sfc64.cp313-win_amd64.lib",
                "_sfc64.cp313-win_amd64.pyd",
                "_sfc64.pyi",
                "__init__.pxd",
                "__init__.py",
                "__init__.pyi"
              ],
              "lib": {
                "_files": [
                  "npyrandom.lib"
                ]
              },
              "tests": {
                "_files": [
                  "test_direct.py",
                  "test_extending.py",
                  "test_generator_mt19937.py",
                  "test_generator_mt19937_regressions.py",
                  "test_random.py",
                  "test_randomstate.py",
                  "test_randomstate_regression.py",
                  "test_regression.py",
                  "test_seed_sequence.py",
                  "test_smoke.py",
                  "__init__.py"
                ],
                "data": {
                  "_files": [
                    "generator_pcg64_np121.pkl.gz",
                    "generator_pcg64_np126.pkl.gz",
                    "mt19937-testset-1.csv",
                    "mt19937-testset-2.csv",
                    "pcg64-testset-1.csv",
                    "pcg64-testset-2.csv",
                    "pcg64dxsm-testset-1.csv",
                    "pcg64dxsm-testset-2.csv",
                    "philox-testset-1.csv",
                    "philox-testset-2.csv",
                    "sfc64-testset-1.csv",
                    "sfc64-testset-2.csv",
                    "sfc64_np126.pkl.gz",
                    "__init__.py"
                  ]
                }
              },
              "_examples": {
                "_files": [],
                "cffi": {
                  "_files": [
                    "extending.py",
                    "parse.py"
                  ]
                },
                "cython": {
                  "_files": [
                    "extending.pyx",
                    "extending_distributions.pyx",
                    "meson.build"
                  ]
                },
                "numba": {
                  "_files": [
                    "extending.py",
                    "extending_distributions.py"
                  ]
                }
              }
            },
            "rec": {
              "_files": [
                "__init__.py",
                "__init__.pyi"
              ]
            },
            "strings": {
              "_files": [
                "__init__.py",
                "__init__.pyi"
              ]
            },
            "testing": {
              "_files": [
                "overrides.py",
                "overrides.pyi",
                "print_coercion_tables.py",
                "print_coercion_tables.pyi",
                "__init__.py",
                "__init__.pyi"
              ],
              "tests": {
                "_files": [
                  "test_utils.py",
                  "__init__.py"
                ]
              },
              "_private": {
                "_files": [
                  "extbuild.py",
                  "extbuild.pyi",
                  "utils.py",
                  "utils.pyi",
                  "__init__.py",
                  "__init__.pyi"
                ]
              }
            },
            "tests": {
              "_files": [
                "test_configtool.py",
                "test_ctypeslib.py",
                "test_lazyloading.py",
                "test_matlib.py",
                "test_numpy_config.py",
                "test_numpy_version.py",
                "test_public_api.py",
                "test_reloading.py",
                "test_scripts.py",
                "test_warnings.py",
                "test__all__.py",
                "__init__.py"
              ]
            },
            "typing": {
              "_files": [
                "mypy_plugin.py",
                "__init__.py"
              ],
              "tests": {
                "_files": [
                  "test_isfile.py",
                  "test_runtime.py",
                  "test_typing.py",
                  "__init__.py"
                ],
                "data": {
                  "_files": [
                    "mypy.ini"
                  ],
                  "fail": {
                    "_files": [
                      "arithmetic.pyi",
                      "arrayprint.pyi",
                      "arrayterator.pyi",
                      "array_constructors.pyi",
                      "array_like.pyi",
                      "array_pad.pyi",
                      "bitwise_ops.pyi",
                      "char.pyi",
                      "chararray.pyi",
                      "comparisons.pyi",
                      "constants.pyi",
                      "datasource.pyi",
                      "dtype.pyi",
                      "einsumfunc.pyi",
                      "flatiter.pyi",
                      "fromnumeric.pyi",
                      "histograms.pyi",
                      "index_tricks.pyi",
                      "lib_function_base.pyi",
                      "lib_polynomial.pyi",
                      "lib_utils.pyi",
                      "lib_version.pyi",
                      "linalg.pyi",
                      "memmap.pyi",
                      "modules.pyi",
                      "multiarray.pyi",
                      "ndarray.pyi",
                      "ndarray_misc.pyi",
                      "nditer.pyi",
                      "nested_sequence.pyi",
                      "npyio.pyi",
                      "numerictypes.pyi",
                      "random.pyi",
                      "rec.pyi",
                      "scalars.pyi",
                      "shape.pyi",
                      "shape_base.pyi",
                      "stride_tricks.pyi",
                      "strings.pyi",
                      "testing.pyi",
                      "twodim_base.pyi",
                      "type_check.pyi",
                      "ufunclike.pyi",
                      "ufuncs.pyi",
                      "ufunc_config.pyi",
                      "warnings_and_errors.pyi"
                    ]
                  },
                  "misc": {
                    "_files": [
                      "extended_precision.pyi"
                    ]
                  },
                  "pass": {
                    "_files": [
                      "arithmetic.py",
                      "arrayprint.py",
                      "arrayterator.py",
                      "array_constructors.py",
                      "array_like.py",
                      "bitwise_ops.py",
                      "comparisons.py",
                      "dtype.py",
                      "einsumfunc.py",
                      "flatiter.py",
                      "fromnumeric.py",
                      "index_tricks.py",
                      "lib_user_array.py",
                      "lib_utils.py",
                      "lib_version.py",
                      "literal.py",
                      "ma.py",
                      "mod.py",
                      "modules.py",
                      "multiarray.py",
                      "ndarray_conversion.py",
                      "ndarray_misc.py",
                      "ndarray_shape_manipulation.py",
                      "nditer.py",
                      "numeric.py",
                      "numerictypes.py",
                      "random.py",
                      "recfunctions.py",
                      "scalars.py",
                      "shape.py",
                      "simple.py",
                      "simple_py3.py",
                      "ufunclike.py",
                      "ufuncs.py",
                      "ufunc_config.py",
                      "warnings_and_errors.py"
                    ]
                  },
                  "reveal": {
                    "_files": [
                      "arithmetic.pyi",
                      "arraypad.pyi",
                      "arrayprint.pyi",
                      "arraysetops.pyi",
                      "arrayterator.pyi",
                      "array_api_info.pyi",
                      "array_constructors.pyi",
                      "bitwise_ops.pyi",
                      "char.pyi",
                      "chararray.pyi",
                      "comparisons.pyi",
                      "constants.pyi",
                      "ctypeslib.pyi",
                      "datasource.pyi",
                      "dtype.pyi",
                      "einsumfunc.pyi",
                      "emath.pyi",
                      "fft.pyi",
                      "flatiter.pyi",
                      "fromnumeric.pyi",
                      "getlimits.pyi",
                      "histograms.pyi",
                      "index_tricks.pyi",
                      "lib_function_base.pyi",
                      "lib_polynomial.pyi",
                      "lib_utils.pyi",
                      "lib_version.pyi",
                      "linalg.pyi",
                      "matrix.pyi",
                      "memmap.pyi",
                      "mod.pyi",
                      "modules.pyi",
                      "multiarray.pyi",
                      "nbit_base_example.pyi",
                      "ndarray_assignability.pyi",
                      "ndarray_conversion.pyi",
                      "ndarray_misc.pyi",
                      "ndarray_shape_manipulation.pyi",
                      "nditer.pyi",
                      "nested_sequence.pyi",
                      "npyio.pyi",
                      "numeric.pyi",
                      "numerictypes.pyi",
                      "polynomial_polybase.pyi",
                      "polynomial_polyutils.pyi",
                      "polynomial_series.pyi",
                      "random.pyi",
                      "rec.pyi",
                      "scalars.pyi",
                      "shape.pyi",
                      "shape_base.pyi",
                      "stride_tricks.pyi",
                      "strings.pyi",
                      "testing.pyi",
                      "twodim_base.pyi",
                      "type_check.pyi",
                      "ufunclike.pyi",
                      "ufuncs.pyi",
                      "ufunc_config.pyi",
                      "warnings_and_errors.pyi"
                    ]
                  }
                }
              }
            },
            "_core": {
              "_files": [
                "arrayprint.py",
                "arrayprint.pyi",
                "cversions.py",
                "defchararray.py",
                "defchararray.pyi",
                "einsumfunc.py",
                "einsumfunc.pyi",
                "fromnumeric.py",
                "fromnumeric.pyi",
                "function_base.py",
                "function_base.pyi",
                "getlimits.py",
                "getlimits.pyi",
                "memmap.py",
                "memmap.pyi",
                "multiarray.py",
                "multiarray.pyi",
                "numeric.py",
                "numeric.pyi",
                "numerictypes.py",
                "numerictypes.pyi",
                "overrides.py",
                "overrides.pyi",
                "printoptions.py",
                "printoptions.pyi",
                "records.py",
                "records.pyi",
                "shape_base.py",
                "shape_base.pyi",
                "strings.py",
                "strings.pyi",
                "umath.py",
                "umath.pyi",
                "_add_newdocs.py",
                "_add_newdocs.pyi",
                "_add_newdocs_scalars.py",
                "_add_newdocs_scalars.pyi",
                "_asarray.py",
                "_asarray.pyi",
                "_dtype.py",
                "_dtype.pyi",
                "_dtype_ctypes.py",
                "_dtype_ctypes.pyi",
                "_exceptions.py",
                "_exceptions.pyi",
                "_internal.py",
                "_internal.pyi",
                "_machar.py",
                "_machar.pyi",
                "_methods.py",
                "_methods.pyi",
                "_multiarray_tests.cp313-win_amd64.lib",
                "_multiarray_tests.cp313-win_amd64.pyd",
                "_multiarray_umath.cp313-win_amd64.lib",
                "_multiarray_umath.cp313-win_amd64.pyd",
                "_operand_flag_tests.cp313-win_amd64.lib",
                "_operand_flag_tests.cp313-win_amd64.pyd",
                "_rational_tests.cp313-win_amd64.lib",
                "_rational_tests.cp313-win_amd64.pyd",
                "_simd.cp313-win_amd64.lib",
                "_simd.cp313-win_amd64.pyd",
                "_simd.pyi",
                "_string_helpers.py",
                "_string_helpers.pyi",
                "_struct_ufunc_tests.cp313-win_amd64.lib",
                "_struct_ufunc_tests.cp313-win_amd64.pyd",
                "_type_aliases.py",
                "_type_aliases.pyi",
                "_ufunc_config.py",
                "_ufunc_config.pyi",
                "_umath_tests.cp313-win_amd64.lib",
                "_umath_tests.cp313-win_amd64.pyd",
                "__init__.py",
                "__init__.pyi"
              ],
              "include": {
                "_files": [],
                "numpy": {
                  "_files": [
                    "arrayobject.h",
                    "arrayscalars.h",
                    "dtype_api.h",
                    "halffloat.h",
                    "ndarrayobject.h",
                    "ndarraytypes.h",
                    "npy_1_7_deprecated_api.h",
                    "npy_2_compat.h",
                    "npy_2_complexcompat.h",
                    "npy_3kcompat.h",
                    "npy_common.h",
                    "npy_cpu.h",
                    "npy_endian.h",
                    "npy_math.h",
                    "npy_no_deprecated_api.h",
                    "npy_os.h",
                    "numpyconfig.h",
                    "ufuncobject.h",
                    "utils.h",
                    "_neighborhood_iterator_imp.h",
                    "_numpyconfig.h",
                    "_public_dtype_api_table.h",
                    "__multiarray_api.c",
                    "__multiarray_api.h",
                    "__ufunc_api.c",
                    "__ufunc_api.h"
                  ],
                  "random": {
                    "_files": [
                      "bitgen.h",
                      "distributions.h",
                      "libdivide.h",
                      "LICENSE.txt"
                    ]
                  }
                }
              },
              "lib": {
                "_files": [
                  "npymath.lib"
                ],
                "npy-pkg-config": {
                  "_files": [
                    "mlib.ini",
                    "npymath.ini"
                  ]
                },
                "pkgconfig": {
                  "_files": [
                    "numpy.pc"
                  ]
                }
              },
              "tests": {
                "_files": [
                  "test_abc.py",
                  "test_api.py",
                  "test_argparse.py",
                  "test_arraymethod.py",
                  "test_arrayobject.py",
                  "test_arrayprint.py",
                  "test_array_api_info.py",
                  "test_array_coercion.py",
                  "test_array_interface.py",
                  "test_casting_floatingpoint_errors.py",
                  "test_casting_unittests.py",
                  "test_conversion_utils.py",
                  "test_cpu_dispatcher.py",
                  "test_cpu_features.py",
                  "test_custom_dtypes.py",
                  "test_cython.py",
                  "test_datetime.py",
                  "test_defchararray.py",
                  "test_deprecations.py",
                  "test_dlpack.py",
                  "test_dtype.py",
                  "test_einsum.py",
                  "test_errstate.py",
                  "test_extint128.py",
                  "test_function_base.py",
                  "test_getlimits.py",
                  "test_half.py",
                  "test_hashtable.py",
                  "test_indexerrors.py",
                  "test_indexing.py",
                  "test_item_selection.py",
                  "test_limited_api.py",
                  "test_longdouble.py",
                  "test_machar.py",
                  "test_memmap.py",
                  "test_mem_overlap.py",
                  "test_mem_policy.py",
                  "test_multiarray.py",
                  "test_multithreading.py",
                  "test_nditer.py",
                  "test_nep50_promotions.py",
                  "test_numeric.py",
                  "test_numerictypes.py",
                  "test_overrides.py",
                  "test_print.py",
                  "test_protocols.py",
                  "test_records.py",
                  "test_regression.py",
                  "test_scalarbuffer.py",
                  "test_scalarinherit.py",
                  "test_scalarmath.py",
                  "test_scalarprint.py",
                  "test_scalar_ctors.py",
                  "test_scalar_methods.py",
                  "test_shape_base.py",
                  "test_simd.py",
                  "test_simd_module.py",
                  "test_stringdtype.py",
                  "test_strings.py",
                  "test_ufunc.py",
                  "test_umath.py",
                  "test_umath_accuracy.py",
                  "test_umath_complex.py",
                  "test_unicode.py",
                  "test__exceptions.py",
                  "_locales.py",
                  "_natype.py"
                ],
                "data": {
                  "_files": [
                    "astype_copy.pkl",
                    "generate_umath_validation_data.cpp",
                    "recarray_from_file.fits",
                    "umath-validation-set-arccos.csv",
                    "umath-validation-set-arccosh.csv",
                    "umath-validation-set-arcsin.csv",
                    "umath-validation-set-arcsinh.csv",
                    "umath-validation-set-arctan.csv",
                    "umath-validation-set-arctanh.csv",
                    "umath-validation-set-cbrt.csv",
                    "umath-validation-set-cos.csv",
                    "umath-validation-set-cosh.csv",
                    "umath-validation-set-exp.csv",
                    "umath-validation-set-exp2.csv",
                    "umath-validation-set-expm1.csv",
                    "umath-validation-set-log.csv",
                    "umath-validation-set-log10.csv",
                    "umath-validation-set-log1p.csv",
                    "umath-validation-set-log2.csv",
                    "umath-validation-set-README.txt",
                    "umath-validation-set-sin.csv",
                    "umath-validation-set-sinh.csv",
                    "umath-validation-set-tan.csv",
                    "umath-validation-set-tanh.csv"
                  ]
                },
                "examples": {
                  "_files": [],
                  "cython": {
                    "_files": [
                      "checks.pyx",
                      "meson.build",
                      "setup.py"
                    ]
                  },
                  "limited_api": {
                    "_files": [
                      "limited_api1.c",
                      "limited_api2.pyx",
                      "limited_api_latest.c",
                      "meson.build",
                      "setup.py"
                    ]
                  }
                }
              }
            },
            "_pyinstaller": {
              "_files": [
                "hook-numpy.py",
                "hook-numpy.pyi",
                "__init__.py",
                "__init__.pyi"
              ],
              "tests": {
                "_files": [
                  "pyinstaller-smoke.py",
                  "test_pyinstaller.py",
                  "__init__.py"
                ]
              }
            },
            "_typing": {
              "_files": [
                "_add_docstring.py",
                "_array_like.py",
                "_callable.pyi",
                "_char_codes.py",
                "_dtype_like.py",
                "_extended_precision.py",
                "_nbit.py",
                "_nbit_base.py",
                "_nested_sequence.py",
                "_scalars.py",
                "_shape.py",
                "_ufunc.py",
                "_ufunc.pyi",
                "__init__.py"
              ]
            },
            "_utils": {
              "_files": [
                "_convertions.py",
                "_convertions.pyi",
                "_inspect.py",
                "_inspect.pyi",
                "_pep440.py",
                "_pep440.pyi",
                "__init__.py",
                "__init__.pyi"
              ]
            }
          },
          "numpy-2.2.4.dist-info": {
            "_files": [
              "DELVEWHEEL",
              "entry_points.txt",
              "INSTALLER",
              "LICENSE.txt",
              "METADATA",
              "RECORD",
              "WHEEL"
            ]
          },
          "numpy.libs": {
            "_files": [
              "libscipy_openblas64_-43e11ff0749b8cbe0a615c9cf6737e0e.dll",
              "msvcp140-263139962577ecda4cd9469ca360a746.dll"
            ]
          },
          "openpyxl": {
            "_files": [
              "_constants.py",
              "__init__.py"
            ],
            "cell": {
              "_files": [
                "cell.py",
                "read_only.py",
                "rich_text.py",
                "text.py",
                "_writer.py",
                "__init__.py"
              ]
            },
            "chart": {
              "_files": [
                "area_chart.py",
                "axis.py",
                "bar_chart.py",
                "bubble_chart.py",
                "chartspace.py",
                "data_source.py",
                "descriptors.py",
                "error_bar.py",
                "label.py",
                "layout.py",
                "legend.py",
                "line_chart.py",
                "marker.py",
                "picture.py",
                "pie_chart.py",
                "pivot.py",
                "plotarea.py",
                "print_settings.py",
                "radar_chart.py",
                "reader.py",
                "reference.py",
                "scatter_chart.py",
                "series.py",
                "series_factory.py",
                "shapes.py",
                "stock_chart.py",
                "surface_chart.py",
                "text.py",
                "title.py",
                "trendline.py",
                "updown_bars.py",
                "_3d.py",
                "_chart.py",
                "__init__.py"
              ]
            },
            "chartsheet": {
              "_files": [
                "chartsheet.py",
                "custom.py",
                "properties.py",
                "protection.py",
                "publish.py",
                "relation.py",
                "views.py",
                "__init__.py"
              ]
            },
            "comments": {
              "_files": [
                "author.py",
                "comments.py",
                "comment_sheet.py",
                "shape_writer.py",
                "__init__.py"
              ]
            },
            "compat": {
              "_files": [
                "abc.py",
                "numbers.py",
                "product.py",
                "singleton.py",
                "strings.py",
                "__init__.py"
              ]
            },
            "descriptors": {
              "_files": [
                "base.py",
                "container.py",
                "excel.py",
                "namespace.py",
                "nested.py",
                "sequence.py",
                "serialisable.py",
                "slots.py",
                "__init__.py"
              ]
            },
            "drawing": {
              "_files": [
                "colors.py",
                "connector.py",
                "drawing.py",
                "effect.py",
                "fill.py",
                "geometry.py",
                "graphic.py",
                "image.py",
                "line.py",
                "picture.py",
                "properties.py",
                "relation.py",
                "spreadsheet_drawing.py",
                "text.py",
                "xdr.py",
                "__init__.py"
              ]
            },
            "formatting": {
              "_files": [
                "formatting.py",
                "rule.py",
                "__init__.py"
              ]
            },
            "formula": {
              "_files": [
                "tokenizer.py",
                "translate.py",
                "__init__.py"
              ]
            },
            "packaging": {
              "_files": [
                "core.py",
                "custom.py",
                "extended.py",
                "interface.py",
                "manifest.py",
                "relationship.py",
                "workbook.py",
                "__init__.py"
              ]
            },
            "pivot": {
              "_files": [
                "cache.py",
                "fields.py",
                "record.py",
                "table.py",
                "__init__.py"
              ]
            },
            "reader": {
              "_files": [
                "drawings.py",
                "excel.py",
                "strings.py",
                "workbook.py",
                "__init__.py"
              ]
            },
            "styles": {
              "_files": [
                "alignment.py",
                "borders.py",
                "builtins.py",
                "cell_style.py",
                "colors.py",
                "differential.py",
                "fills.py",
                "fonts.py",
                "named_styles.py",
                "numbers.py",
                "protection.py",
                "proxy.py",
                "styleable.py",
                "stylesheet.py",
                "table.py",
                "__init__.py"
              ]
            },
            "utils": {
              "_files": [
                "bound_dictionary.py",
                "cell.py",
                "dataframe.py",
                "datetime.py",
                "escape.py",
                "exceptions.py",
                "formulas.py",
                "indexed_list.py",
                "inference.py",
                "protection.py",
                "units.py",
                "__init__.py"
              ]
            },
            "workbook": {
              "_files": [
                "child.py",
                "defined_name.py",
                "external_reference.py",
                "function_group.py",
                "properties.py",
                "protection.py",
                "smart_tags.py",
                "views.py",
                "web.py",
                "workbook.py",
                "_writer.py",
                "__init__.py"
              ],
              "external_link": {
                "_files": [
                  "external.py",
                  "__init__.py"
                ]
              }
            },
            "worksheet": {
              "_files": [
                "cell_range.py",
                "cell_watch.py",
                "controls.py",
                "copier.py",
                "custom.py",
                "datavalidation.py",
                "dimensions.py",
                "drawing.py",
                "errors.py",
                "filters.py",
                "formula.py",
                "header_footer.py",
                "hyperlink.py",
                "merge.py",
                "ole.py",
                "page.py",
                "pagebreak.py",
                "picture.py",
                "print_settings.py",
                "properties.py",
                "protection.py",
                "related.py",
                "scenario.py",
                "smart_tag.py",
                "table.py",
                "views.py",
                "worksheet.py",
                "_reader.py",
                "_read_only.py",
                "_writer.py",
                "_write_only.py",
                "__init__.py"
              ]
            },
            "writer": {
              "_files": [
                "excel.py",
                "theme.py",
                "__init__.py"
              ]
            },
            "xml": {
              "_files": [
                "constants.py",
                "functions.py",
                "__init__.py"
              ]
            }
          },
          "openpyxl-3.1.5.dist-info": {
            "_files": [
              "INSTALLER",
              "LICENCE.rst",
              "METADATA",
              "RECORD",
              "REQUESTED",
              "top_level.txt",
              "WHEEL"
            ]
          },
          "pandas": {
            "_files": [
              "conftest.py",
              "pyproject.toml",
              "testing.py",
              "_typing.py",
              "_version.py",
              "_version_meson.py",
              "__init__.py"
            ],
            "api": {
              "_files": [
                "__init__.py"
              ],
              "extensions": {
                "_files": [
                  "__init__.py"
                ]
              },
              "indexers": {
                "_files": [
                  "__init__.py"
                ]
              },
              "interchange": {
                "_files": [
                  "__init__.py"
                ]
              },
              "types": {
                "_files": [
                  "__init__.py"
                ]
              },
              "typing": {
                "_files": [
                  "__init__.py"
                ]
              }
            },
            "arrays": {
              "_files": [
                "__init__.py"
              ]
            },
            "compat": {
              "_files": [
                "compressors.py",
                "pickle_compat.py",
                "pyarrow.py",
                "_constants.py",
                "_optional.py",
                "__init__.py"
              ],
              "numpy": {
                "_files": [
                  "function.py",
                  "__init__.py"
                ]
              }
            },
            "core": {
              "_files": [
                "accessor.py",
                "algorithms.py",
                "api.py",
                "apply.py",
                "arraylike.py",
                "base.py",
                "common.py",
                "config_init.py",
                "construction.py",
                "flags.py",
                "frame.py",
                "generic.py",
                "indexing.py",
                "missing.py",
                "nanops.py",
                "resample.py",
                "roperator.py",
                "sample.py",
                "series.py",
                "shared_docs.py",
                "sorting.py",
                "__init__.py"
              ],
              "arrays": {
                "_files": [
                  "base.py",
                  "boolean.py",
                  "categorical.py",
                  "datetimelike.py",
                  "datetimes.py",
                  "floating.py",
                  "integer.py",
                  "interval.py",
                  "masked.py",
                  "numeric.py",
                  "numpy_.py",
                  "period.py",
                  "string_.py",
                  "string_arrow.py",
                  "timedeltas.py",
                  "_arrow_string_mixins.py",
                  "_mixins.py",
                  "_ranges.py",
                  "_utils.py",
                  "__init__.py"
                ],
                "arrow": {
                  "_files": [
                    "accessors.py",
                    "array.py",
                    "extension_types.py",
                    "_arrow_utils.py",
                    "__init__.py"
                  ]
                },
                "sparse": {
                  "_files": [
                    "accessor.py",
                    "array.py",
                    "scipy_sparse.py",
                    "__init__.py"
                  ]
                }
              },
              "array_algos": {
                "_files": [
                  "datetimelike_accumulations.py",
                  "masked_accumulations.py",
                  "masked_reductions.py",
                  "putmask.py",
                  "quantile.py",
                  "replace.py",
                  "take.py",
                  "transforms.py",
                  "__init__.py"
                ]
              },
              "computation": {
                "_files": [
                  "align.py",
                  "api.py",
                  "check.py",
                  "common.py",
                  "engines.py",
                  "eval.py",
                  "expr.py",
                  "expressions.py",
                  "ops.py",
                  "parsing.py",
                  "pytables.py",
                  "scope.py",
                  "__init__.py"
                ]
              },
              "dtypes": {
                "_files": [
                  "api.py",
                  "astype.py",
                  "base.py",
                  "cast.py",
                  "common.py",
                  "concat.py",
                  "dtypes.py",
                  "generic.py",
                  "inference.py",
                  "missing.py",
                  "__init__.py"
                ]
              },
              "groupby": {
                "_files": [
                  "base.py",
                  "categorical.py",
                  "generic.py",
                  "groupby.py",
                  "grouper.py",
                  "indexing.py",
                  "numba_.py",
                  "ops.py",
                  "__init__.py"
                ]
              },
              "indexers": {
                "_files": [
                  "objects.py",
                  "utils.py",
                  "__init__.py"
                ]
              },
              "indexes": {
                "_files": [
                  "accessors.py",
                  "api.py",
                  "base.py",
                  "category.py",
                  "datetimelike.py",
                  "datetimes.py",
                  "extension.py",
                  "frozen.py",
                  "interval.py",
                  "multi.py",
                  "period.py",
                  "range.py",
                  "timedeltas.py",
                  "__init__.py"
                ]
              },
              "interchange": {
                "_files": [
                  "buffer.py",
                  "column.py",
                  "dataframe.py",
                  "dataframe_protocol.py",
                  "from_dataframe.py",
                  "utils.py",
                  "__init__.py"
                ]
              },
              "internals": {
                "_files": [
                  "api.py",
                  "array_manager.py",
                  "base.py",
                  "blocks.py",
                  "concat.py",
                  "construction.py",
                  "managers.py",
                  "ops.py",
                  "__init__.py"
                ]
              },
              "methods": {
                "_files": [
                  "describe.py",
                  "selectn.py",
                  "to_dict.py",
                  "__init__.py"
                ]
              },
              "ops": {
                "_files": [
                  "array_ops.py",
                  "common.py",
                  "dispatch.py",
                  "docstrings.py",
                  "invalid.py",
                  "mask_ops.py",
                  "missing.py",
                  "__init__.py"
                ]
              },
              "reshape": {
                "_files": [
                  "api.py",
                  "concat.py",
                  "encoding.py",
                  "melt.py",
                  "merge.py",
                  "pivot.py",
                  "reshape.py",
                  "tile.py",
                  "util.py",
                  "__init__.py"
                ]
              },
              "sparse": {
                "_files": [
                  "api.py",
                  "__init__.py"
                ]
              },
              "strings": {
                "_files": [
                  "accessor.py",
                  "base.py",
                  "object_array.py",
                  "__init__.py"
                ]
              },
              "tools": {
                "_files": [
                  "datetimes.py",
                  "numeric.py",
                  "timedeltas.py",
                  "times.py",
                  "__init__.py"
                ]
              },
              "util": {
                "_files": [
                  "hashing.py",
                  "numba_.py",
                  "__init__.py"
                ]
              },
              "window": {
                "_files": [
                  "common.py",
                  "doc.py",
                  "ewm.py",
                  "expanding.py",
                  "numba_.py",
                  "online.py",
                  "rolling.py",
                  "__init__.py"
                ]
              },
              "_numba": {
                "_files": [
                  "executor.py",
                  "extensions.py",
                  "__init__.py"
                ],
                "kernels": {
                  "_files": [
                    "mean_.py",
                    "min_max_.py",
                    "shared.py",
                    "sum_.py",
                    "var_.py",
                    "__init__.py"
                  ]
                }
              }
            },
            "errors": {
              "_files": [
                "__init__.py"
              ]
            },
            "io": {
              "_files": [
                "api.py",
                "clipboards.py",
                "common.py",
                "feather_format.py",
                "gbq.py",
                "html.py",
                "orc.py",
                "parquet.py",
                "pickle.py",
                "pytables.py",
                "spss.py",
                "sql.py",
                "stata.py",
                "xml.py",
                "_util.py",
                "__init__.py"
              ],
              "clipboard": {
                "_files": [
                  "__init__.py"
                ]
              },
              "excel": {
                "_files": [
                  "_base.py",
                  "_calamine.py",
                  "_odfreader.py",
                  "_odswriter.py",
                  "_openpyxl.py",
                  "_pyxlsb.py",
                  "_util.py",
                  "_xlrd.py",
                  "_xlsxwriter.py",
                  "__init__.py"
                ]
              },
              "formats": {
                "_files": [
                  "console.py",
                  "css.py",
                  "csvs.py",
                  "excel.py",
                  "format.py",
                  "html.py",
                  "info.py",
                  "printing.py",
                  "string.py",
                  "style.py",
                  "style_render.py",
                  "xml.py",
                  "_color_data.py",
                  "__init__.py"
                ],
                "templates": {
                  "_files": [
                    "html.tpl",
                    "html_style.tpl",
                    "html_table.tpl",
                    "latex.tpl",
                    "latex_longtable.tpl",
                    "latex_table.tpl",
                    "string.tpl"
                  ]
                }
              },
              "json": {
                "_files": [
                  "_json.py",
                  "_normalize.py",
                  "_table_schema.py",
                  "__init__.py"
                ]
              },
              "parsers": {
                "_files": [
                  "arrow_parser_wrapper.py",
                  "base_parser.py",
                  "c_parser_wrapper.py",
                  "python_parser.py",
                  "readers.py",
                  "__init__.py"
                ]
              },
              "sas": {
                "_files": [
                  "sas7bdat.py",
                  "sasreader.py",
                  "sas_constants.py",
                  "sas_xport.py",
                  "__init__.py"
                ]
              }
            },
            "plotting": {
              "_files": [
                "_core.py",
                "_misc.py",
                "__init__.py"
              ],
              "_matplotlib": {
                "_files": [
                  "boxplot.py",
                  "converter.py",
                  "core.py",
                  "groupby.py",
                  "hist.py",
                  "misc.py",
                  "style.py",
                  "timeseries.py",
                  "tools.py",
                  "__init__.py"
                ]
              }
            },
            "tests": {
              "_files": [
                "test_aggregation.py",
                "test_algos.py",
                "test_common.py",
                "test_downstream.py",
                "test_errors.py",
                "test_expressions.py",
                "test_flags.py",
                "test_multilevel.py",
                "test_nanops.py",
                "test_optional_dependency.py",
                "test_register_accessor.py",
                "test_sorting.py",
                "test_take.py",
                "__init__.py"
              ],
              "api": {
                "_files": [
                  "test_api.py",
                  "test_types.py",
                  "__init__.py"
                ]
              },
              "apply": {
                "_files": [
                  "common.py",
                  "test_frame_apply.py",
                  "test_frame_apply_relabeling.py",
                  "test_frame_transform.py",
                  "test_invalid_arg.py",
                  "test_numba.py",
                  "test_series_apply.py",
                  "test_series_apply_relabeling.py",
                  "test_series_transform.py",
                  "test_str.py",
                  "__init__.py"
                ]
              },
              "arithmetic": {
                "_files": [
                  "common.py",
                  "conftest.py",
                  "test_array_ops.py",
                  "test_categorical.py",
                  "test_datetime64.py",
                  "test_interval.py",
                  "test_numeric.py",
                  "test_object.py",
                  "test_period.py",
                  "test_timedelta64.py",
                  "__init__.py"
                ]
              },
              "arrays": {
                "_files": [
                  "masked_shared.py",
                  "test_array.py",
                  "test_datetimelike.py",
                  "test_datetimes.py",
                  "test_ndarray_backed.py",
                  "test_period.py",
                  "test_timedeltas.py",
                  "__init__.py"
                ],
                "boolean": {
                  "_files": [
                    "test_arithmetic.py",
                    "test_astype.py",
                    "test_comparison.py",
                    "test_construction.py",
                    "test_function.py",
                    "test_indexing.py",
                    "test_logical.py",
                    "test_ops.py",
                    "test_reduction.py",
                    "test_repr.py",
                    "__init__.py"
                  ]
                },
                "categorical": {
                  "_files": [
                    "test_algos.py",
                    "test_analytics.py",
                    "test_api.py",
                    "test_astype.py",
                    "test_constructors.py",
                    "test_dtypes.py",
                    "test_indexing.py",
                    "test_map.py",
                    "test_missing.py",
                    "test_operators.py",
                    "test_replace.py",
                    "test_repr.py",
                    "test_sorting.py",
                    "test_subclass.py",
                    "test_take.py",
                    "test_warnings.py",
                    "__init__.py"
                  ]
                },
                "datetimes": {
                  "_files": [
                    "test_constructors.py",
                    "test_cumulative.py",
                    "test_reductions.py",
                    "__init__.py"
                  ]
                },
                "floating": {
                  "_files": [
                    "conftest.py",
                    "test_arithmetic.py",
                    "test_astype.py",
                    "test_comparison.py",
                    "test_concat.py",
                    "test_construction.py",
                    "test_contains.py",
                    "test_function.py",
                    "test_repr.py",
                    "test_to_numpy.py",
                    "__init__.py"
                  ]
                },
                "integer": {
                  "_files": [
                    "conftest.py",
                    "test_arithmetic.py",
                    "test_comparison.py",
                    "test_concat.py",
                    "test_construction.py",
                    "test_dtypes.py",
                    "test_function.py",
                    "test_indexing.py",
                    "test_reduction.py",
                    "test_repr.py",
                    "__init__.py"
                  ]
                },
                "interval": {
                  "_files": [
                    "test_astype.py",
                    "test_formats.py",
                    "test_interval.py",
                    "test_interval_pyarrow.py",
                    "test_overlaps.py",
                    "__init__.py"
                  ]
                },
                "masked": {
                  "_files": [
                    "test_arithmetic.py",
                    "test_arrow_compat.py",
                    "test_function.py",
                    "test_indexing.py",
                    "__init__.py"
                  ]
                },
                "numpy_": {
                  "_files": [
                    "test_indexing.py",
                    "test_numpy.py",
                    "__init__.py"
                  ]
                },
                "period": {
                  "_files": [
                    "test_arrow_compat.py",
                    "test_astype.py",
                    "test_constructors.py",
                    "test_reductions.py",
                    "__init__.py"
                  ]
                },
                "sparse": {
                  "_files": [
                    "test_accessor.py",
                    "test_arithmetics.py",
                    "test_array.py",
                    "test_astype.py",
                    "test_combine_concat.py",
                    "test_constructors.py",
                    "test_dtype.py",
                    "test_indexing.py",
                    "test_libsparse.py",
                    "test_reductions.py",
                    "test_unary.py",
                    "__init__.py"
                  ]
                },
                "string_": {
                  "_files": [
                    "test_string.py",
                    "test_string_arrow.py",
                    "__init__.py"
                  ]
                },
                "timedeltas": {
                  "_files": [
                    "test_constructors.py",
                    "test_cumulative.py",
                    "test_reductions.py",
                    "__init__.py"
                  ]
                }
              },
              "base": {
                "_files": [
                  "common.py",
                  "test_constructors.py",
                  "test_conversion.py",
                  "test_fillna.py",
                  "test_misc.py",
                  "test_transpose.py",
                  "test_unique.py",
                  "test_value_counts.py",
                  "__init__.py"
                ]
              },
              "computation": {
                "_files": [
                  "test_compat.py",
                  "test_eval.py",
                  "__init__.py"
                ]
              },
              "config": {
                "_files": [
                  "test_config.py",
                  "test_localization.py",
                  "__init__.py"
                ]
              },
              "construction": {
                "_files": [
                  "test_extract_array.py",
                  "__init__.py"
                ]
              },
              "copy_view": {
                "_files": [
                  "test_array.py",
                  "test_astype.py",
                  "test_chained_assignment_deprecation.py",
                  "test_clip.py",
                  "test_constructors.py",
                  "test_core_functionalities.py",
                  "test_functions.py",
                  "test_indexing.py",
                  "test_internals.py",
                  "test_interp_fillna.py",
                  "test_methods.py",
                  "test_replace.py",
                  "test_setitem.py",
                  "test_util.py",
                  "util.py",
                  "__init__.py"
                ],
                "index": {
                  "_files": [
                    "test_datetimeindex.py",
                    "test_index.py",
                    "test_periodindex.py",
                    "test_timedeltaindex.py",
                    "__init__.py"
                  ]
                }
              },
              "dtypes": {
                "_files": [
                  "test_common.py",
                  "test_concat.py",
                  "test_dtypes.py",
                  "test_generic.py",
                  "test_inference.py",
                  "test_missing.py",
                  "__init__.py"
                ],
                "cast": {
                  "_files": [
                    "test_can_hold_element.py",
                    "test_construct_from_scalar.py",
                    "test_construct_ndarray.py",
                    "test_construct_object_arr.py",
                    "test_dict_compat.py",
                    "test_downcast.py",
                    "test_find_common_type.py",
                    "test_infer_datetimelike.py",
                    "test_infer_dtype.py",
                    "test_maybe_box_native.py",
                    "test_promote.py",
                    "__init__.py"
                  ]
                }
              },
              "extension": {
                "_files": [
                  "conftest.py",
                  "test_arrow.py",
                  "test_categorical.py",
                  "test_common.py",
                  "test_datetime.py",
                  "test_extension.py",
                  "test_interval.py",
                  "test_masked.py",
                  "test_numpy.py",
                  "test_period.py",
                  "test_sparse.py",
                  "test_string.py",
                  "__init__.py"
                ],
                "array_with_attr": {
                  "_files": [
                    "array.py",
                    "test_array_with_attr.py",
                    "__init__.py"
                  ]
                },
                "base": {
                  "_files": [
                    "accumulate.py",
                    "base.py",
                    "casting.py",
                    "constructors.py",
                    "dim2.py",
                    "dtype.py",
                    "getitem.py",
                    "groupby.py",
                    "index.py",
                    "interface.py",
                    "io.py",
                    "methods.py",
                    "missing.py",
                    "ops.py",
                    "printing.py",
                    "reduce.py",
                    "reshaping.py",
                    "setitem.py",
                    "__init__.py"
                  ]
                },
                "date": {
                  "_files": [
                    "array.py",
                    "__init__.py"
                  ]
                },
                "decimal": {
                  "_files": [
                    "array.py",
                    "test_decimal.py",
                    "__init__.py"
                  ]
                },
                "json": {
                  "_files": [
                    "array.py",
                    "test_json.py",
                    "__init__.py"
                  ]
                },
                "list": {
                  "_files": [
                    "array.py",
                    "test_list.py",
                    "__init__.py"
                  ]
                }
              },
              "frame": {
                "_files": [
                  "common.py",
                  "conftest.py",
                  "test_alter_axes.py",
                  "test_api.py",
                  "test_arithmetic.py",
                  "test_arrow_interface.py",
                  "test_block_internals.py",
                  "test_constructors.py",
                  "test_cumulative.py",
                  "test_iteration.py",
                  "test_logical_ops.py",
                  "test_nonunique_indexes.py",
                  "test_npfuncs.py",
                  "test_query_eval.py",
                  "test_reductions.py",
                  "test_repr.py",
                  "test_stack_unstack.py",
                  "test_subclass.py",
                  "test_ufunc.py",
                  "test_unary.py",
                  "test_validate.py",
                  "__init__.py"
                ],
                "constructors": {
                  "_files": [
                    "test_from_dict.py",
                    "test_from_records.py",
                    "__init__.py"
                  ]
                },
                "indexing": {
                  "_files": [
                    "test_coercion.py",
                    "test_delitem.py",
                    "test_get.py",
                    "test_getitem.py",
                    "test_get_value.py",
                    "test_indexing.py",
                    "test_insert.py",
                    "test_mask.py",
                    "test_setitem.py",
                    "test_set_value.py",
                    "test_take.py",
                    "test_where.py",
                    "test_xs.py",
                    "__init__.py"
                  ]
                },
                "methods": {
                  "_files": [
                    "test_add_prefix_suffix.py",
                    "test_align.py",
                    "test_asfreq.py",
                    "test_asof.py",
                    "test_assign.py",
                    "test_astype.py",
                    "test_at_time.py",
                    "test_between_time.py",
                    "test_clip.py",
                    "test_combine.py",
                    "test_combine_first.py",
                    "test_compare.py",
                    "test_convert_dtypes.py",
                    "test_copy.py",
                    "test_count.py",
                    "test_cov_corr.py",
                    "test_describe.py",
                    "test_diff.py",
                    "test_dot.py",
                    "test_drop.py",
                    "test_droplevel.py",
                    "test_dropna.py",
                    "test_drop_duplicates.py",
                    "test_dtypes.py",
                    "test_duplicated.py",
                    "test_equals.py",
                    "test_explode.py",
                    "test_fillna.py",
                    "test_filter.py",
                    "test_first_and_last.py",
                    "test_first_valid_index.py",
                    "test_get_numeric_data.py",
                    "test_head_tail.py",
                    "test_infer_objects.py",
                    "test_info.py",
                    "test_interpolate.py",
                    "test_isetitem.py",
                    "test_isin.py",
                    "test_is_homogeneous_dtype.py",
                    "test_iterrows.py",
                    "test_join.py",
                    "test_map.py",
                    "test_matmul.py",
                    "test_nlargest.py",
                    "test_pct_change.py",
                    "test_pipe.py",
                    "test_pop.py",
                    "test_quantile.py",
                    "test_rank.py",
                    "test_reindex.py",
                    "test_reindex_like.py",
                    "test_rename.py",
                    "test_rename_axis.py",
                    "test_reorder_levels.py",
                    "test_replace.py",
                    "test_reset_index.py",
                    "test_round.py",
                    "test_sample.py",
                    "test_select_dtypes.py",
                    "test_set_axis.py",
                    "test_set_index.py",
                    "test_shift.py",
                    "test_size.py",
                    "test_sort_index.py",
                    "test_sort_values.py",
                    "test_swapaxes.py",
                    "test_swaplevel.py",
                    "test_to_csv.py",
                    "test_to_dict.py",
                    "test_to_dict_of_blocks.py",
                    "test_to_numpy.py",
                    "test_to_period.py",
                    "test_to_records.py",
                    "test_to_timestamp.py",
                    "test_transpose.py",
                    "test_truncate.py",
                    "test_tz_convert.py",
                    "test_tz_localize.py",
                    "test_update.py",
                    "test_values.py",
                    "test_value_counts.py",
                    "__init__.py"
                  ]
                }
              },
              "generic": {
                "_files": [
                  "test_duplicate_labels.py",
                  "test_finalize.py",
                  "test_frame.py",
                  "test_generic.py",
                  "test_label_or_level_utils.py",
                  "test_series.py",
                  "test_to_xarray.py",
                  "__init__.py"
                ]
              },
              "groupby": {
                "_files": [
                  "conftest.py",
                  "test_all_methods.py",
                  "test_api.py",
                  "test_apply.py",
                  "test_apply_mutate.py",
                  "test_bin_groupby.py",
                  "test_categorical.py",
                  "test_counting.py",
                  "test_cumulative.py",
                  "test_filters.py",
                  "test_groupby.py",
                  "test_groupby_dropna.py",
                  "test_groupby_subclass.py",
                  "test_grouping.py",
                  "test_indexing.py",
                  "test_index_as_string.py",
                  "test_libgroupby.py",
                  "test_missing.py",
                  "test_numba.py",
                  "test_numeric_only.py",
                  "test_pipe.py",
                  "test_raises.py",
                  "test_reductions.py",
                  "test_timegrouper.py",
                  "__init__.py"
                ],
                "aggregate": {
                  "_files": [
                    "test_aggregate.py",
                    "test_cython.py",
                    "test_numba.py",
                    "test_other.py",
                    "__init__.py"
                  ]
                },
                "methods": {
                  "_files": [
                    "test_corrwith.py",
                    "test_describe.py",
                    "test_groupby_shift_diff.py",
                    "test_is_monotonic.py",
                    "test_nlargest_nsmallest.py",
                    "test_nth.py",
                    "test_quantile.py",
                    "test_rank.py",
                    "test_sample.py",
                    "test_size.py",
                    "test_skew.py",
                    "test_value_counts.py",
                    "__init__.py"
                  ]
                },
                "transform": {
                  "_files": [
                    "test_numba.py",
                    "test_transform.py",
                    "__init__.py"
                  ]
                }
              },
              "indexes": {
                "_files": [
                  "conftest.py",
                  "test_any_index.py",
                  "test_base.py",
                  "test_common.py",
                  "test_datetimelike.py",
                  "test_engines.py",
                  "test_frozen.py",
                  "test_indexing.py",
                  "test_index_new.py",
                  "test_numpy_compat.py",
                  "test_old_base.py",
                  "test_setops.py",
                  "test_subclass.py",
                  "__init__.py"
                ],
                "base_class": {
                  "_files": [
                    "test_constructors.py",
                    "test_formats.py",
                    "test_indexing.py",
                    "test_pickle.py",
                    "test_reshape.py",
                    "test_setops.py",
                    "test_where.py",
                    "__init__.py"
                  ]
                },
                "categorical": {
                  "_files": [
                    "test_append.py",
                    "test_astype.py",
                    "test_category.py",
                    "test_constructors.py",
                    "test_equals.py",
                    "test_fillna.py",
                    "test_formats.py",
                    "test_indexing.py",
                    "test_map.py",
                    "test_reindex.py",
                    "test_setops.py",
                    "__init__.py"
                  ]
                },
                "datetimelike_": {
                  "_files": [
                    "test_drop_duplicates.py",
                    "test_equals.py",
                    "test_indexing.py",
                    "test_is_monotonic.py",
                    "test_nat.py",
                    "test_sort_values.py",
                    "test_value_counts.py",
                    "__init__.py"
                  ]
                },
                "datetimes": {
                  "_files": [
                    "test_arithmetic.py",
                    "test_constructors.py",
                    "test_datetime.py",
                    "test_date_range.py",
                    "test_formats.py",
                    "test_freq_attr.py",
                    "test_indexing.py",
                    "test_iter.py",
                    "test_join.py",
                    "test_npfuncs.py",
                    "test_ops.py",
                    "test_partial_slicing.py",
                    "test_pickle.py",
                    "test_reindex.py",
                    "test_scalar_compat.py",
                    "test_setops.py",
                    "test_timezones.py",
                    "__init__.py"
                  ],
                  "methods": {
                    "_files": [
                      "test_asof.py",
                      "test_astype.py",
                      "test_delete.py",
                      "test_factorize.py",
                      "test_fillna.py",
                      "test_insert.py",
                      "test_isocalendar.py",
                      "test_map.py",
                      "test_normalize.py",
                      "test_repeat.py",
                      "test_resolution.py",
                      "test_round.py",
                      "test_shift.py",
                      "test_snap.py",
                      "test_to_frame.py",
                      "test_to_julian_date.py",
                      "test_to_period.py",
                      "test_to_pydatetime.py",
                      "test_to_series.py",
                      "test_tz_convert.py",
                      "test_tz_localize.py",
                      "test_unique.py",
                      "__init__.py"
                    ]
                  }
                },
                "interval": {
                  "_files": [
                    "test_astype.py",
                    "test_constructors.py",
                    "test_equals.py",
                    "test_formats.py",
                    "test_indexing.py",
                    "test_interval.py",
                    "test_interval_range.py",
                    "test_interval_tree.py",
                    "test_join.py",
                    "test_pickle.py",
                    "test_setops.py",
                    "__init__.py"
                  ]
                },
                "multi": {
                  "_files": [
                    "conftest.py",
                    "test_analytics.py",
                    "test_astype.py",
                    "test_compat.py",
                    "test_constructors.py",
                    "test_conversion.py",
                    "test_copy.py",
                    "test_drop.py",
                    "test_duplicates.py",
                    "test_equivalence.py",
                    "test_formats.py",
                    "test_get_level_values.py",
                    "test_get_set.py",
                    "test_indexing.py",
                    "test_integrity.py",
                    "test_isin.py",
                    "test_join.py",
                    "test_lexsort.py",
                    "test_missing.py",
                    "test_monotonic.py",
                    "test_names.py",
                    "test_partial_indexing.py",
                    "test_pickle.py",
                    "test_reindex.py",
                    "test_reshape.py",
                    "test_setops.py",
                    "test_sorting.py",
                    "test_take.py",
                    "__init__.py"
                  ]
                },
                "numeric": {
                  "_files": [
                    "test_astype.py",
                    "test_indexing.py",
                    "test_join.py",
                    "test_numeric.py",
                    "test_setops.py",
                    "__init__.py"
                  ]
                },
                "object": {
                  "_files": [
                    "test_astype.py",
                    "test_indexing.py",
                    "__init__.py"
                  ]
                },
                "period": {
                  "_files": [
                    "test_constructors.py",
                    "test_formats.py",
                    "test_freq_attr.py",
                    "test_indexing.py",
                    "test_join.py",
                    "test_monotonic.py",
                    "test_partial_slicing.py",
                    "test_period.py",
                    "test_period_range.py",
                    "test_pickle.py",
                    "test_resolution.py",
                    "test_scalar_compat.py",
                    "test_searchsorted.py",
                    "test_setops.py",
                    "test_tools.py",
                    "__init__.py"
                  ],
                  "methods": {
                    "_files": [
                      "test_asfreq.py",
                      "test_astype.py",
                      "test_factorize.py",
                      "test_fillna.py",
                      "test_insert.py",
                      "test_is_full.py",
                      "test_repeat.py",
                      "test_shift.py",
                      "test_to_timestamp.py",
                      "__init__.py"
                    ]
                  }
                },
                "ranges": {
                  "_files": [
                    "test_constructors.py",
                    "test_indexing.py",
                    "test_join.py",
                    "test_range.py",
                    "test_setops.py",
                    "__init__.py"
                  ]
                },
                "timedeltas": {
                  "_files": [
                    "test_arithmetic.py",
                    "test_constructors.py",
                    "test_delete.py",
                    "test_formats.py",
                    "test_freq_attr.py",
                    "test_indexing.py",
                    "test_join.py",
                    "test_ops.py",
                    "test_pickle.py",
                    "test_scalar_compat.py",
                    "test_searchsorted.py",
                    "test_setops.py",
                    "test_timedelta.py",
                    "test_timedelta_range.py",
                    "__init__.py"
                  ],
                  "methods": {
                    "_files": [
                      "test_astype.py",
                      "test_factorize.py",
                      "test_fillna.py",
                      "test_insert.py",
                      "test_repeat.py",
                      "test_shift.py",
                      "__init__.py"
                    ]
                  }
                }
              },
              "indexing": {
                "_files": [
                  "common.py",
                  "conftest.py",
                  "test_at.py",
                  "test_categorical.py",
                  "test_chaining_and_caching.py",
                  "test_check_indexer.py",
                  "test_coercion.py",
                  "test_datetime.py",
                  "test_floats.py",
                  "test_iat.py",
                  "test_iloc.py",
                  "test_indexers.py",
                  "test_indexing.py",
                  "test_loc.py",
                  "test_na_indexing.py",
                  "test_partial.py",
                  "test_scalar.py",
                  "__init__.py"
                ],
                "interval": {
                  "_files": [
                    "test_interval.py",
                    "test_interval_new.py",
                    "__init__.py"
                  ]
                },
                "multiindex": {
                  "_files": [
                    "test_chaining_and_caching.py",
                    "test_datetime.py",
                    "test_getitem.py",
                    "test_iloc.py",
                    "test_indexing_slow.py",
                    "test_loc.py",
                    "test_multiindex.py",
                    "test_partial.py",
                    "test_setitem.py",
                    "test_slice.py",
                    "test_sorted.py",
                    "__init__.py"
                  ]
                }
              },
              "interchange": {
                "_files": [
                  "test_impl.py",
                  "test_spec_conformance.py",
                  "test_utils.py",
                  "__init__.py"
                ]
              },
              "internals": {
                "_files": [
                  "test_api.py",
                  "test_internals.py",
                  "test_managers.py",
                  "__init__.py"
                ]
              },
              "io": {
                "_files": [
                  "conftest.py",
                  "generate_legacy_storage_files.py",
                  "test_clipboard.py",
                  "test_common.py",
                  "test_compression.py",
                  "test_feather.py",
                  "test_fsspec.py",
                  "test_gbq.py",
                  "test_gcs.py",
                  "test_html.py",
                  "test_http_headers.py",
                  "test_orc.py",
                  "test_parquet.py",
                  "test_pickle.py",
                  "test_s3.py",
                  "test_spss.py",
                  "test_sql.py",
                  "test_stata.py",
                  "__init__.py"
                ],
                "excel": {
                  "_files": [
                    "test_odf.py",
                    "test_odswriter.py",
                    "test_openpyxl.py",
                    "test_readers.py",
                    "test_style.py",
                    "test_writers.py",
                    "test_xlrd.py",
                    "test_xlsxwriter.py",
                    "__init__.py"
                  ]
                },
                "formats": {
                  "_files": [
                    "test_console.py",
                    "test_css.py",
                    "test_eng_formatting.py",
                    "test_format.py",
                    "test_ipython_compat.py",
                    "test_printing.py",
                    "test_to_csv.py",
                    "test_to_excel.py",
                    "test_to_html.py",
                    "test_to_latex.py",
                    "test_to_markdown.py",
                    "test_to_string.py",
                    "__init__.py"
                  ],
                  "style": {
                    "_files": [
                      "test_bar.py",
                      "test_exceptions.py",
                      "test_format.py",
                      "test_highlight.py",
                      "test_html.py",
                      "test_matplotlib.py",
                      "test_non_unique.py",
                      "test_style.py",
                      "test_tooltip.py",
                      "test_to_latex.py",
                      "test_to_string.py",
                      "__init__.py"
                    ]
                  }
                },
                "json": {
                  "_files": [
                    "conftest.py",
                    "test_compression.py",
                    "test_deprecated_kwargs.py",
                    "test_json_table_schema.py",
                    "test_json_table_schema_ext_dtype.py",
                    "test_normalize.py",
                    "test_pandas.py",
                    "test_readlines.py",
                    "test_ujson.py",
                    "__init__.py"
                  ]
                },
                "parser": {
                  "_files": [
                    "conftest.py",
                    "test_comment.py",
                    "test_compression.py",
                    "test_concatenate_chunks.py",
                    "test_converters.py",
                    "test_c_parser_only.py",
                    "test_dialect.py",
                    "test_encoding.py",
                    "test_header.py",
                    "test_index_col.py",
                    "test_mangle_dupes.py",
                    "test_multi_thread.py",
                    "test_na_values.py",
                    "test_network.py",
                    "test_parse_dates.py",
                    "test_python_parser_only.py",
                    "test_quoting.py",
                    "test_read_fwf.py",
                    "test_skiprows.py",
                    "test_textreader.py",
                    "test_unsupported.py",
                    "test_upcast.py",
                    "__init__.py"
                  ],
                  "common": {
                    "_files": [
                      "test_chunksize.py",
                      "test_common_basic.py",
                      "test_data_list.py",
                      "test_decimal.py",
                      "test_file_buffer_url.py",
                      "test_float.py",
                      "test_index.py",
                      "test_inf.py",
                      "test_ints.py",
                      "test_iterator.py",
                      "test_read_errors.py",
                      "test_verbose.py",
                      "__init__.py"
                    ]
                  },
                  "dtypes": {
                    "_files": [
                      "test_categorical.py",
                      "test_dtypes_basic.py",
                      "test_empty.py",
                      "__init__.py"
                    ]
                  },
                  "usecols": {
                    "_files": [
                      "test_parse_dates.py",
                      "test_strings.py",
                      "test_usecols_basic.py",
                      "__init__.py"
                    ]
                  }
                },
                "pytables": {
                  "_files": [
                    "common.py",
                    "conftest.py",
                    "test_append.py",
                    "test_categorical.py",
                    "test_compat.py",
                    "test_complex.py",
                    "test_errors.py",
                    "test_file_handling.py",
                    "test_keys.py",
                    "test_put.py",
                    "test_pytables_missing.py",
                    "test_read.py",
                    "test_retain_attributes.py",
                    "test_round_trip.py",
                    "test_select.py",
                    "test_store.py",
                    "test_subclass.py",
                    "test_timezones.py",
                    "test_time_series.py",
                    "__init__.py"
                  ]
                },
                "sas": {
                  "_files": [
                    "test_byteswap.py",
                    "test_sas.py",
                    "test_sas7bdat.py",
                    "test_xport.py",
                    "__init__.py"
                  ]
                },
                "xml": {
                  "_files": [
                    "conftest.py",
                    "test_to_xml.py",
                    "test_xml.py",
                    "test_xml_dtypes.py",
                    "__init__.py"
                  ]
                }
              },
              "libs": {
                "_files": [
                  "test_hashtable.py",
                  "test_join.py",
                  "test_lib.py",
                  "test_libalgos.py",
                  "__init__.py"
                ]
              },
              "plotting": {
                "_files": [
                  "common.py",
                  "conftest.py",
                  "test_backend.py",
                  "test_boxplot_method.py",
                  "test_common.py",
                  "test_converter.py",
                  "test_datetimelike.py",
                  "test_groupby.py",
                  "test_hist_method.py",
                  "test_misc.py",
                  "test_series.py",
                  "test_style.py",
                  "__init__.py"
                ],
                "frame": {
                  "_files": [
                    "test_frame.py",
                    "test_frame_color.py",
                    "test_frame_groupby.py",
                    "test_frame_legend.py",
                    "test_frame_subplots.py",
                    "test_hist_box_by.py",
                    "__init__.py"
                  ]
                }
              },
              "reductions": {
                "_files": [
                  "test_reductions.py",
                  "test_stat_reductions.py",
                  "__init__.py"
                ]
              },
              "resample": {
                "_files": [
                  "conftest.py",
                  "test_base.py",
                  "test_datetime_index.py",
                  "test_period_index.py",
                  "test_resampler_grouper.py",
                  "test_resample_api.py",
                  "test_timedelta.py",
                  "test_time_grouper.py",
                  "__init__.py"
                ]
              },
              "reshape": {
                "_files": [
                  "test_crosstab.py",
                  "test_cut.py",
                  "test_from_dummies.py",
                  "test_get_dummies.py",
                  "test_melt.py",
                  "test_pivot.py",
                  "test_pivot_multilevel.py",
                  "test_qcut.py",
                  "test_union_categoricals.py",
                  "test_util.py",
                  "__init__.py"
                ],
                "concat": {
                  "_files": [
                    "conftest.py",
                    "test_append.py",
                    "test_append_common.py",
                    "test_categorical.py",
                    "test_concat.py",
                    "test_dataframe.py",
                    "test_datetimes.py",
                    "test_empty.py",
                    "test_index.py",
                    "test_invalid.py",
                    "test_series.py",
                    "test_sort.py",
                    "__init__.py"
                  ]
                },
                "merge": {
                  "_files": [
                    "test_join.py",
                    "test_merge.py",
                    "test_merge_asof.py",
                    "test_merge_cross.py",
                    "test_merge_index_as_string.py",
                    "test_merge_ordered.py",
                    "test_multi.py",
                    "__init__.py"
                  ]
                }
              },
              "scalar": {
                "_files": [
                  "test_nat.py",
                  "test_na_scalar.py",
                  "__init__.py"
                ],
                "interval": {
                  "_files": [
                    "test_arithmetic.py",
                    "test_constructors.py",
                    "test_contains.py",
                    "test_formats.py",
                    "test_interval.py",
                    "test_overlaps.py",
                    "__init__.py"
                  ]
                },
                "period": {
                  "_files": [
                    "test_arithmetic.py",
                    "test_asfreq.py",
                    "test_period.py",
                    "__init__.py"
                  ]
                },
                "timedelta": {
                  "_files": [
                    "test_arithmetic.py",
                    "test_constructors.py",
                    "test_formats.py",
                    "test_timedelta.py",
                    "__init__.py"
                  ],
                  "methods": {
                    "_files": [
                      "test_as_unit.py",
                      "test_round.py",
                      "__init__.py"
                    ]
                  }
                },
                "timestamp": {
                  "_files": [
                    "test_arithmetic.py",
                    "test_comparisons.py",
                    "test_constructors.py",
                    "test_formats.py",
                    "test_timestamp.py",
                    "test_timezones.py",
                    "__init__.py"
                  ],
                  "methods": {
                    "_files": [
                      "test_as_unit.py",
                      "test_normalize.py",
                      "test_replace.py",
                      "test_round.py",
                      "test_timestamp_method.py",
                      "test_to_julian_date.py",
                      "test_to_pydatetime.py",
                      "test_tz_convert.py",
                      "test_tz_localize.py",
                      "__init__.py"
                    ]
                  }
                }
              },
              "series": {
                "_files": [
                  "test_api.py",
                  "test_arithmetic.py",
                  "test_constructors.py",
                  "test_cumulative.py",
                  "test_formats.py",
                  "test_iteration.py",
                  "test_logical_ops.py",
                  "test_missing.py",
                  "test_npfuncs.py",
                  "test_reductions.py",
                  "test_subclass.py",
                  "test_ufunc.py",
                  "test_unary.py",
                  "test_validate.py",
                  "__init__.py"
                ],
                "accessors": {
                  "_files": [
                    "test_cat_accessor.py",
                    "test_dt_accessor.py",
                    "test_list_accessor.py",
                    "test_sparse_accessor.py",
                    "test_struct_accessor.py",
                    "test_str_accessor.py",
                    "__init__.py"
                  ]
                },
                "indexing": {
                  "_files": [
                    "test_datetime.py",
                    "test_delitem.py",
                    "test_get.py",
                    "test_getitem.py",
                    "test_indexing.py",
                    "test_mask.py",
                    "test_setitem.py",
                    "test_set_value.py",
                    "test_take.py",
                    "test_where.py",
                    "test_xs.py",
                    "__init__.py"
                  ]
                },
                "methods": {
                  "_files": [
                    "test_add_prefix_suffix.py",
                    "test_align.py",
                    "test_argsort.py",
                    "test_asof.py",
                    "test_astype.py",
                    "test_autocorr.py",
                    "test_between.py",
                    "test_case_when.py",
                    "test_clip.py",
                    "test_combine.py",
                    "test_combine_first.py",
                    "test_compare.py",
                    "test_convert_dtypes.py",
                    "test_copy.py",
                    "test_count.py",
                    "test_cov_corr.py",
                    "test_describe.py",
                    "test_diff.py",
                    "test_drop.py",
                    "test_dropna.py",
                    "test_drop_duplicates.py",
                    "test_dtypes.py",
                    "test_duplicated.py",
                    "test_equals.py",
                    "test_explode.py",
                    "test_fillna.py",
                    "test_get_numeric_data.py",
                    "test_head_tail.py",
                    "test_infer_objects.py",
                    "test_info.py",
                    "test_interpolate.py",
                    "test_isin.py",
                    "test_isna.py",
                    "test_is_monotonic.py",
                    "test_is_unique.py",
                    "test_item.py",
                    "test_map.py",
                    "test_matmul.py",
                    "test_nlargest.py",
                    "test_nunique.py",
                    "test_pct_change.py",
                    "test_pop.py",
                    "test_quantile.py",
                    "test_rank.py",
                    "test_reindex.py",
                    "test_reindex_like.py",
                    "test_rename.py",
                    "test_rename_axis.py",
                    "test_repeat.py",
                    "test_replace.py",
                    "test_reset_index.py",
                    "test_round.py",
                    "test_searchsorted.py",
                    "test_set_name.py",
                    "test_size.py",
                    "test_sort_index.py",
                    "test_sort_values.py",
                    "test_tolist.py",
                    "test_to_csv.py",
                    "test_to_dict.py",
                    "test_to_frame.py",
                    "test_to_numpy.py",
                    "test_truncate.py",
                    "test_tz_localize.py",
                    "test_unique.py",
                    "test_unstack.py",
                    "test_update.py",
                    "test_values.py",
                    "test_value_counts.py",
                    "test_view.py",
                    "__init__.py"
                  ]
                }
              },
              "strings": {
                "_files": [
                  "conftest.py",
                  "test_api.py",
                  "test_case_justify.py",
                  "test_cat.py",
                  "test_extract.py",
                  "test_find_replace.py",
                  "test_get_dummies.py",
                  "test_split_partition.py",
                  "test_strings.py",
                  "test_string_array.py",
                  "__init__.py"
                ]
              },
              "tools": {
                "_files": [
                  "test_to_datetime.py",
                  "test_to_numeric.py",
                  "test_to_time.py",
                  "test_to_timedelta.py",
                  "__init__.py"
                ]
              },
              "tseries": {
                "_files": [
                  "__init__.py"
                ],
                "frequencies": {
                  "_files": [
                    "test_frequencies.py",
                    "test_freq_code.py",
                    "test_inference.py",
                    "__init__.py"
                  ]
                },
                "holiday": {
                  "_files": [
                    "test_calendar.py",
                    "test_federal.py",
                    "test_holiday.py",
                    "test_observance.py",
                    "__init__.py"
                  ]
                },
                "offsets": {
                  "_files": [
                    "common.py",
                    "test_business_day.py",
                    "test_business_hour.py",
                    "test_business_month.py",
                    "test_business_quarter.py",
                    "test_business_year.py",
                    "test_common.py",
                    "test_custom_business_day.py",
                    "test_custom_business_hour.py",
                    "test_custom_business_month.py",
                    "test_dst.py",
                    "test_easter.py",
                    "test_fiscal.py",
                    "test_index.py",
                    "test_month.py",
                    "test_offsets.py",
                    "test_offsets_properties.py",
                    "test_quarter.py",
                    "test_ticks.py",
                    "test_week.py",
                    "test_year.py",
                    "__init__.py"
                  ]
                }
              },
              "tslibs": {
                "_files": [
                  "test_api.py",
                  "test_array_to_datetime.py",
                  "test_ccalendar.py",
                  "test_conversion.py",
                  "test_fields.py",
                  "test_libfrequencies.py",
                  "test_liboffsets.py",
                  "test_npy_units.py",
                  "test_np_datetime.py",
                  "test_parse_iso8601.py",
                  "test_parsing.py",
                  "test_period.py",
                  "test_resolution.py",
                  "test_strptime.py",
                  "test_timedeltas.py",
                  "test_timezones.py",
                  "test_to_offset.py",
                  "test_tzconversion.py",
                  "__init__.py"
                ]
              },
              "util": {
                "_files": [
                  "conftest.py",
                  "test_assert_almost_equal.py",
                  "test_assert_attr_equal.py",
                  "test_assert_categorical_equal.py",
                  "test_assert_extension_array_equal.py",
                  "test_assert_frame_equal.py",
                  "test_assert_index_equal.py",
                  "test_assert_interval_array_equal.py",
                  "test_assert_numpy_array_equal.py",
                  "test_assert_produces_warning.py",
                  "test_assert_series_equal.py",
                  "test_deprecate.py",
                  "test_deprecate_kwarg.py",
                  "test_deprecate_nonkeyword_arguments.py",
                  "test_doc.py",
                  "test_hashing.py",
                  "test_numba.py",
                  "test_rewrite_warning.py",
                  "test_shares_memory.py",
                  "test_show_versions.py",
                  "test_util.py",
                  "test_validate_args.py",
                  "test_validate_args_and_kwargs.py",
                  "test_validate_inclusive.py",
                  "test_validate_kwargs.py",
                  "__init__.py"
                ]
              },
              "window": {
                "_files": [
                  "conftest.py",
                  "test_api.py",
                  "test_apply.py",
                  "test_base_indexer.py",
                  "test_cython_aggregations.py",
                  "test_dtypes.py",
                  "test_ewm.py",
                  "test_expanding.py",
                  "test_groupby.py",
                  "test_numba.py",
                  "test_online.py",
                  "test_pairwise.py",
                  "test_rolling.py",
                  "test_rolling_functions.py",
                  "test_rolling_quantile.py",
                  "test_rolling_skew_kurt.py",
                  "test_timeseries_window.py",
                  "test_win_type.py",
                  "__init__.py"
                ],
                "moments": {
                  "_files": [
                    "conftest.py",
                    "test_moments_consistency_ewm.py",
                    "test_moments_consistency_expanding.py",
                    "test_moments_consistency_rolling.py",
                    "__init__.py"
                  ]
                }
              }
            },
            "tseries": {
              "_files": [
                "api.py",
                "frequencies.py",
                "holiday.py",
                "offsets.py",
                "__init__.py"
              ]
            },
            "util": {
              "_files": [
                "_decorators.py",
                "_doctools.py",
                "_exceptions.py",
                "_print_versions.py",
                "_tester.py",
                "_test_decorators.py",
                "_validators.py",
                "__init__.py"
              ],
              "version": {
                "_files": [
                  "__init__.py"
                ]
              }
            },
            "_config": {
              "_files": [
                "config.py",
                "dates.py",
                "display.py",
                "localization.py",
                "__init__.py"
              ]
            },
            "_libs": {
              "_files": [
                "algos.cp313-win_amd64.lib",
                "algos.cp313-win_amd64.pyd",
                "algos.pyi",
                "arrays.cp313-win_amd64.lib",
                "arrays.cp313-win_amd64.pyd",
                "arrays.pyi",
                "byteswap.cp313-win_amd64.lib",
                "byteswap.cp313-win_amd64.pyd",
                "byteswap.pyi",
                "groupby.cp313-win_amd64.lib",
                "groupby.cp313-win_amd64.pyd",
                "groupby.pyi",
                "hashing.cp313-win_amd64.lib",
                "hashing.cp313-win_amd64.pyd",
                "hashing.pyi",
                "hashtable.cp313-win_amd64.lib",
                "hashtable.cp313-win_amd64.pyd",
                "hashtable.pyi",
                "index.cp313-win_amd64.lib",
                "index.cp313-win_amd64.pyd",
                "index.pyi",
                "indexing.cp313-win_amd64.lib",
                "indexing.cp313-win_amd64.pyd",
                "indexing.pyi",
                "internals.cp313-win_amd64.lib",
                "internals.cp313-win_amd64.pyd",
                "internals.pyi",
                "interval.cp313-win_amd64.lib",
                "interval.cp313-win_amd64.pyd",
                "interval.pyi",
                "join.cp313-win_amd64.lib",
                "join.cp313-win_amd64.pyd",
                "join.pyi",
                "json.cp313-win_amd64.lib",
                "json.cp313-win_amd64.pyd",
                "json.pyi",
                "lib.cp313-win_amd64.lib",
                "lib.cp313-win_amd64.pyd",
                "lib.pyi",
                "missing.cp313-win_amd64.lib",
                "missing.cp313-win_amd64.pyd",
                "missing.pyi",
                "ops.cp313-win_amd64.lib",
                "ops.cp313-win_amd64.pyd",
                "ops.pyi",
                "ops_dispatch.cp313-win_amd64.lib",
                "ops_dispatch.cp313-win_amd64.pyd",
                "ops_dispatch.pyi",
                "pandas_datetime.cp313-win_amd64.lib",
                "pandas_datetime.cp313-win_amd64.pyd",
                "pandas_parser.cp313-win_amd64.lib",
                "pandas_parser.cp313-win_amd64.pyd",
                "parsers.cp313-win_amd64.lib",
                "parsers.cp313-win_amd64.pyd",
                "parsers.pyi",
                "properties.cp313-win_amd64.lib",
                "properties.cp313-win_amd64.pyd",
                "properties.pyi",
                "reshape.cp313-win_amd64.lib",
                "reshape.cp313-win_amd64.pyd",
                "reshape.pyi",
                "sas.cp313-win_amd64.lib",
                "sas.cp313-win_amd64.pyd",
                "sas.pyi",
                "sparse.cp313-win_amd64.lib",
                "sparse.cp313-win_amd64.pyd",
                "sparse.pyi",
                "testing.cp313-win_amd64.lib",
                "testing.cp313-win_amd64.pyd",
                "testing.pyi",
                "tslib.cp313-win_amd64.lib",
                "tslib.cp313-win_amd64.pyd",
                "tslib.pyi",
                "writers.cp313-win_amd64.lib",
                "writers.cp313-win_amd64.pyd",
                "writers.pyi",
                "__init__.py"
              ],
              "tslibs": {
                "_files": [
                  "base.cp313-win_amd64.lib",
                  "base.cp313-win_amd64.pyd",
                  "ccalendar.cp313-win_amd64.lib",
                  "ccalendar.cp313-win_amd64.pyd",
                  "ccalendar.pyi",
                  "conversion.cp313-win_amd64.lib",
                  "conversion.cp313-win_amd64.pyd",
                  "conversion.pyi",
                  "dtypes.cp313-win_amd64.lib",
                  "dtypes.cp313-win_amd64.pyd",
                  "dtypes.pyi",
                  "fields.cp313-win_amd64.lib",
                  "fields.cp313-win_amd64.pyd",
                  "fields.pyi",
                  "nattype.cp313-win_amd64.lib",
                  "nattype.cp313-win_amd64.pyd",
                  "nattype.pyi",
                  "np_datetime.cp313-win_amd64.lib",
                  "np_datetime.cp313-win_amd64.pyd",
                  "np_datetime.pyi",
                  "offsets.cp313-win_amd64.lib",
                  "offsets.cp313-win_amd64.pyd",
                  "offsets.pyi",
                  "parsing.cp313-win_amd64.lib",
                  "parsing.cp313-win_amd64.pyd",
                  "parsing.pyi",
                  "period.cp313-win_amd64.lib",
                  "period.cp313-win_amd64.pyd",
                  "period.pyi",
                  "strptime.cp313-win_amd64.lib",
                  "strptime.cp313-win_amd64.pyd",
                  "strptime.pyi",
                  "timedeltas.cp313-win_amd64.lib",
                  "timedeltas.cp313-win_amd64.pyd",
                  "timedeltas.pyi",
                  "timestamps.cp313-win_amd64.lib",
                  "timestamps.cp313-win_amd64.pyd",
                  "timestamps.pyi",
                  "timezones.cp313-win_amd64.lib",
                  "timezones.cp313-win_amd64.pyd",
                  "timezones.pyi",
                  "tzconversion.cp313-win_amd64.lib",
                  "tzconversion.cp313-win_amd64.pyd",
                  "tzconversion.pyi",
                  "vectorized.cp313-win_amd64.lib",
                  "vectorized.cp313-win_amd64.pyd",
                  "vectorized.pyi",
                  "__init__.py"
                ]
              },
              "window": {
                "_files": [
                  "aggregations.cp313-win_amd64.lib",
                  "aggregations.cp313-win_amd64.pyd",
                  "aggregations.pyi",
                  "indexers.cp313-win_amd64.lib",
                  "indexers.cp313-win_amd64.pyd",
                  "indexers.pyi",
                  "__init__.py"
                ]
              }
            },
            "_testing": {
              "_files": [
                "asserters.py",
                "compat.py",
                "contexts.py",
                "_hypothesis.py",
                "_io.py",
                "_warnings.py",
                "__init__.py"
              ]
            }
          },
          "pandas-2.2.3.dist-info": {
            "_files": [
              "DELVEWHEEL",
              "entry_points.txt",
              "INSTALLER",
              "LICENSE",
              "METADATA",
              "RECORD",
              "REQUESTED",
              "WHEEL"
            ]
          },
          "pandas.libs": {
            "_files": [
              "msvcp140-0f2ea95580b32bcfc81c235d5751ce78.dll"
            ]
          },
          "pip": {
            "_files": [
              "py.typed",
              "__init__.py",
              "__main__.py",
              "__pip-runner__.py"
            ],
            "_internal": {
              "_files": [
                "build_env.py",
                "cache.py",
                "configuration.py",
                "exceptions.py",
                "main.py",
                "pyproject.py",
                "self_outdated_check.py",
                "wheel_builder.py",
                "__init__.py"
              ],
              "cli": {
                "_files": [
                  "autocompletion.py",
                  "base_command.py",
                  "cmdoptions.py",
                  "command_context.py",
                  "index_command.py",
                  "main.py",
                  "main_parser.py",
                  "parser.py",
                  "progress_bars.py",
                  "req_command.py",
                  "spinners.py",
                  "status_codes.py",
                  "__init__.py"
                ]
              },
              "commands": {
                "_files": [
                  "cache.py",
                  "check.py",
                  "completion.py",
                  "configuration.py",
                  "debug.py",
                  "download.py",
                  "freeze.py",
                  "hash.py",
                  "help.py",
                  "index.py",
                  "inspect.py",
                  "install.py",
                  "list.py",
                  "search.py",
                  "show.py",
                  "uninstall.py",
                  "wheel.py",
                  "__init__.py"
                ]
              },
              "distributions": {
                "_files": [
                  "base.py",
                  "installed.py",
                  "sdist.py",
                  "wheel.py",
                  "__init__.py"
                ]
              },
              "index": {
                "_files": [
                  "collector.py",
                  "package_finder.py",
                  "sources.py",
                  "__init__.py"
                ]
              },
              "locations": {
                "_files": [
                  "base.py",
                  "_distutils.py",
                  "_sysconfig.py",
                  "__init__.py"
                ]
              },
              "metadata": {
                "_files": [
                  "base.py",
                  "pkg_resources.py",
                  "_json.py",
                  "__init__.py"
                ],
                "importlib": {
                  "_files": [
                    "_compat.py",
                    "_dists.py",
                    "_envs.py",
                    "__init__.py"
                  ]
                }
              },
              "models": {
                "_files": [
                  "candidate.py",
                  "direct_url.py",
                  "format_control.py",
                  "index.py",
                  "installation_report.py",
                  "link.py",
                  "scheme.py",
                  "search_scope.py",
                  "selection_prefs.py",
                  "target_python.py",
                  "wheel.py",
                  "__init__.py"
                ]
              },
              "network": {
                "_files": [
                  "auth.py",
                  "cache.py",
                  "download.py",
                  "lazy_wheel.py",
                  "session.py",
                  "utils.py",
                  "xmlrpc.py",
                  "__init__.py"
                ]
              },
              "operations": {
                "_files": [
                  "check.py",
                  "freeze.py",
                  "prepare.py",
                  "__init__.py"
                ],
                "build": {
                  "_files": [
                    "build_tracker.py",
                    "metadata.py",
                    "metadata_editable.py",
                    "metadata_legacy.py",
                    "wheel.py",
                    "wheel_editable.py",
                    "wheel_legacy.py",
                    "__init__.py"
                  ]
                },
                "install": {
                  "_files": [
                    "editable_legacy.py",
                    "wheel.py",
                    "__init__.py"
                  ]
                }
              },
              "req": {
                "_files": [
                  "constructors.py",
                  "req_file.py",
                  "req_install.py",
                  "req_set.py",
                  "req_uninstall.py",
                  "__init__.py"
                ]
              },
              "resolution": {
                "_files": [
                  "base.py",
                  "__init__.py"
                ],
                "legacy": {
                  "_files": [
                    "resolver.py",
                    "__init__.py"
                  ]
                },
                "resolvelib": {
                  "_files": [
                    "base.py",
                    "candidates.py",
                    "factory.py",
                    "found_candidates.py",
                    "provider.py",
                    "reporter.py",
                    "requirements.py",
                    "resolver.py",
                    "__init__.py"
                  ]
                }
              },
              "utils": {
                "_files": [
                  "appdirs.py",
                  "compat.py",
                  "compatibility_tags.py",
                  "datetime.py",
                  "deprecation.py",
                  "direct_url_helpers.py",
                  "egg_link.py",
                  "entrypoints.py",
                  "filesystem.py",
                  "filetypes.py",
                  "glibc.py",
                  "hashes.py",
                  "logging.py",
                  "misc.py",
                  "packaging.py",
                  "retry.py",
                  "setuptools_build.py",
                  "subprocess.py",
                  "temp_dir.py",
                  "unpacking.py",
                  "urls.py",
                  "virtualenv.py",
                  "wheel.py",
                  "_jaraco_text.py",
                  "_log.py",
                  "__init__.py"
                ]
              },
              "vcs": {
                "_files": [
                  "bazaar.py",
                  "git.py",
                  "mercurial.py",
                  "subversion.py",
                  "versioncontrol.py",
                  "__init__.py"
                ]
              }
            },
            "_vendor": {
              "_files": [
                "typing_extensions.py",
                "vendor.txt",
                "__init__.py"
              ],
              "cachecontrol": {
                "_files": [
                  "adapter.py",
                  "cache.py",
                  "controller.py",
                  "filewrapper.py",
                  "heuristics.py",
                  "py.typed",
                  "serialize.py",
                  "wrapper.py",
                  "_cmd.py",
                  "__init__.py"
                ],
                "caches": {
                  "_files": [
                    "file_cache.py",
                    "redis_cache.py",
                    "__init__.py"
                  ]
                }
              },
              "certifi": {
                "_files": [
                  "cacert.pem",
                  "core.py",
                  "py.typed",
                  "__init__.py",
                  "__main__.py"
                ]
              },
              "distlib": {
                "_files": [
                  "compat.py",
                  "database.py",
                  "index.py",
                  "locators.py",
                  "manifest.py",
                  "markers.py",
                  "metadata.py",
                  "resources.py",
                  "scripts.py",
                  "t32.exe",
                  "t64-arm.exe",
                  "t64.exe",
                  "util.py",
                  "version.py",
                  "w32.exe",
                  "w64-arm.exe",
                  "w64.exe",
                  "wheel.py",
                  "__init__.py"
                ]
              },
              "distro": {
                "_files": [
                  "distro.py",
                  "py.typed",
                  "__init__.py",
                  "__main__.py"
                ]
              },
              "idna": {
                "_files": [
                  "codec.py",
                  "compat.py",
                  "core.py",
                  "idnadata.py",
                  "intranges.py",
                  "package_data.py",
                  "py.typed",
                  "uts46data.py",
                  "__init__.py"
                ]
              },
              "msgpack": {
                "_files": [
                  "exceptions.py",
                  "ext.py",
                  "fallback.py",
                  "__init__.py"
                ]
              },
              "packaging": {
                "_files": [
                  "markers.py",
                  "metadata.py",
                  "py.typed",
                  "requirements.py",
                  "specifiers.py",
                  "tags.py",
                  "utils.py",
                  "version.py",
                  "_elffile.py",
                  "_manylinux.py",
                  "_musllinux.py",
                  "_parser.py",
                  "_structures.py",
                  "_tokenizer.py",
                  "__init__.py"
                ],
                "licenses": {
                  "_files": [
                    "_spdx.py",
                    "__init__.py"
                  ]
                }
              },
              "pkg_resources": {
                "_files": [
                  "__init__.py"
                ]
              },
              "platformdirs": {
                "_files": [
                  "android.py",
                  "api.py",
                  "macos.py",
                  "py.typed",
                  "unix.py",
                  "version.py",
                  "windows.py",
                  "__init__.py",
                  "__main__.py"
                ]
              },
              "pygments": {
                "_files": [
                  "cmdline.py",
                  "console.py",
                  "filter.py",
                  "formatter.py",
                  "lexer.py",
                  "modeline.py",
                  "plugin.py",
                  "regexopt.py",
                  "scanner.py",
                  "sphinxext.py",
                  "style.py",
                  "token.py",
                  "unistring.py",
                  "util.py",
                  "__init__.py",
                  "__main__.py"
                ],
                "filters": {
                  "_files": [
                    "__init__.py"
                  ]
                },
                "formatters": {
                  "_files": [
                    "bbcode.py",
                    "groff.py",
                    "html.py",
                    "img.py",
                    "irc.py",
                    "latex.py",
                    "other.py",
                    "pangomarkup.py",
                    "rtf.py",
                    "svg.py",
                    "terminal.py",
                    "terminal256.py",
                    "_mapping.py",
                    "__init__.py"
                  ]
                },
                "lexers": {
                  "_files": [
                    "python.py",
                    "_mapping.py",
                    "__init__.py"
                  ]
                },
                "styles": {
                  "_files": [
                    "_mapping.py",
                    "__init__.py"
                  ]
                }
              },
              "pyproject_hooks": {
                "_files": [
                  "py.typed",
                  "_impl.py",
                  "__init__.py"
                ],
                "_in_process": {
                  "_files": [
                    "_in_process.py",
                    "__init__.py"
                  ]
                }
              },
              "requests": {
                "_files": [
                  "adapters.py",
                  "api.py",
                  "auth.py",
                  "certs.py",
                  "compat.py",
                  "cookies.py",
                  "exceptions.py",
                  "help.py",
                  "hooks.py",
                  "models.py",
                  "packages.py",
                  "sessions.py",
                  "status_codes.py",
                  "structures.py",
                  "utils.py",
                  "_internal_utils.py",
                  "__init__.py",
                  "__version__.py"
                ]
              },
              "resolvelib": {
                "_files": [
                  "providers.py",
                  "py.typed",
                  "reporters.py",
                  "resolvers.py",
                  "structs.py",
                  "__init__.py"
                ],
                "compat": {
                  "_files": [
                    "collections_abc.py",
                    "__init__.py"
                  ]
                }
              },
              "rich": {
                "_files": [
                  "abc.py",
                  "align.py",
                  "ansi.py",
                  "bar.py",
                  "box.py",
                  "cells.py",
                  "color.py",
                  "color_triplet.py",
                  "columns.py",
                  "console.py",
                  "constrain.py",
                  "containers.py",
                  "control.py",
                  "default_styles.py",
                  "diagnose.py",
                  "emoji.py",
                  "errors.py",
                  "filesize.py",
                  "file_proxy.py",
                  "highlighter.py",
                  "json.py",
                  "jupyter.py",
                  "layout.py",
                  "live.py",
                  "live_render.py",
                  "logging.py",
                  "markup.py",
                  "measure.py",
                  "padding.py",
                  "pager.py",
                  "palette.py",
                  "panel.py",
                  "pretty.py",
                  "progress.py",
                  "progress_bar.py",
                  "prompt.py",
                  "protocol.py",
                  "py.typed",
                  "region.py",
                  "repr.py",
                  "rule.py",
                  "scope.py",
                  "screen.py",
                  "segment.py",
                  "spinner.py",
                  "status.py",
                  "style.py",
                  "styled.py",
                  "syntax.py",
                  "table.py",
                  "terminal_theme.py",
                  "text.py",
                  "theme.py",
                  "themes.py",
                  "traceback.py",
                  "tree.py",
                  "_cell_widths.py",
                  "_emoji_codes.py",
                  "_emoji_replace.py",
                  "_export_format.py",
                  "_extension.py",
                  "_fileno.py",
                  "_inspect.py",
                  "_log_render.py",
                  "_loop.py",
                  "_null_file.py",
                  "_palettes.py",
                  "_pick.py",
                  "_ratio.py",
                  "_spinners.py",
                  "_stack.py",
                  "_timer.py",
                  "_win32_console.py",
                  "_windows.py",
                  "_windows_renderer.py",
                  "_wrap.py",
                  "__init__.py",
                  "__main__.py"
                ]
              },
              "tomli": {
                "_files": [
                  "py.typed",
                  "_parser.py",
                  "_re.py",
                  "_types.py",
                  "__init__.py"
                ]
              },
              "truststore": {
                "_files": [
                  "py.typed",
                  "_api.py",
                  "_macos.py",
                  "_openssl.py",
                  "_ssl_constants.py",
                  "_windows.py",
                  "__init__.py"
                ]
              },
              "urllib3": {
                "_files": [
                  "connection.py",
                  "connectionpool.py",
                  "exceptions.py",
                  "fields.py",
                  "filepost.py",
                  "poolmanager.py",
                  "request.py",
                  "response.py",
                  "_collections.py",
                  "_version.py",
                  "__init__.py"
                ],
                "contrib": {
                  "_files": [
                    "appengine.py",
                    "ntlmpool.py",
                    "pyopenssl.py",
                    "securetransport.py",
                    "socks.py",
                    "_appengine_environ.py",
                    "__init__.py"
                  ],
                  "_securetransport": {
                    "_files": [
                      "bindings.py",
                      "low_level.py",
                      "__init__.py"
                    ]
                  }
                },
                "packages": {
                  "_files": [
                    "six.py",
                    "__init__.py"
                  ],
                  "backports": {
                    "_files": [
                      "makefile.py",
                      "weakref_finalize.py",
                      "__init__.py"
                    ]
                  }
                },
                "util": {
                  "_files": [
                    "connection.py",
                    "proxy.py",
                    "queue.py",
                    "request.py",
                    "response.py",
                    "retry.py",
                    "ssltransport.py",
                    "ssl_.py",
                    "ssl_match_hostname.py",
                    "timeout.py",
                    "url.py",
                    "wait.py",
                    "__init__.py"
                  ]
                }
              }
            }
          },
          "pip-25.0.1.dist-info": {
            "_files": [
              "AUTHORS.txt",
              "entry_points.txt",
              "INSTALLER",
              "LICENSE.txt",
              "METADATA",
              "RECORD",
              "REQUESTED",
              "top_level.txt",
              "WHEEL"
            ]
          },
          "python_dateutil-2.9.0.post0.dist-info": {
            "_files": [
              "INSTALLER",
              "LICENSE",
              "METADATA",
              "RECORD",
              "top_level.txt",
              "WHEEL",
              "zip-safe"
            ]
          },
          "python_dotenv-1.0.1.dist-info": {
            "_files": [
              "entry_points.txt",
              "INSTALLER",
              "LICENSE",
              "METADATA",
              "RECORD",
              "top_level.txt",
              "WHEEL"
            ]
          },
          "pytz": {
            "_files": [
              "exceptions.py",
              "lazy.py",
              "reference.py",
              "tzfile.py",
              "tzinfo.py",
              "__init__.py"
            ],
            "zoneinfo": {
              "_files": [
                "CET",
                "CST6CDT",
                "Cuba",
                "EET",
                "Egypt",
                "Eire",
                "EST",
                "EST5EDT",
                "Factory",
                "GB",
                "GB-Eire",
                "GMT",
                "GMT+0",
                "GMT-0",
                "GMT0",
                "Greenwich",
                "Hongkong",
                "HST",
                "Iceland",
                "Iran",
                "iso3166.tab",
                "Israel",
                "Jamaica",
                "Japan",
                "Kwajalein",
                "leapseconds",
                "Libya",
                "MET",
                "MST",
                "MST7MDT",
                "Navajo",
                "NZ",
                "NZ-CHAT",
                "Poland",
                "Portugal",
                "PRC",
                "PST8PDT",
                "ROC",
                "ROK",
                "Singapore",
                "Turkey",
                "tzdata.zi",
                "UCT",
                "Universal",
                "UTC",
                "W-SU",
                "WET",
                "zone.tab",
                "zone1970.tab",
                "zonenow.tab",
                "Zulu"
              ],
              "Africa": {
                "_files": [
                  "Abidjan",
                  "Accra",
                  "Addis_Ababa",
                  "Algiers",
                  "Asmara",
                  "Asmera",
                  "Bamako",
                  "Bangui",
                  "Banjul",
                  "Bissau",
                  "Blantyre",
                  "Brazzaville",
                  "Bujumbura",
                  "Cairo",
                  "Casablanca",
                  "Ceuta",
                  "Conakry",
                  "Dakar",
                  "Dar_es_Salaam",
                  "Djibouti",
                  "Douala",
                  "El_Aaiun",
                  "Freetown",
                  "Gaborone",
                  "Harare",
                  "Johannesburg",
                  "Juba",
                  "Kampala",
                  "Khartoum",
                  "Kigali",
                  "Kinshasa",
                  "Lagos",
                  "Libreville",
                  "Lome",
                  "Luanda",
                  "Lubumbashi",
                  "Lusaka",
                  "Malabo",
                  "Maputo",
                  "Maseru",
                  "Mbabane",
                  "Mogadishu",
                  "Monrovia",
                  "Nairobi",
                  "Ndjamena",
                  "Niamey",
                  "Nouakchott",
                  "Ouagadougou",
                  "Porto-Novo",
                  "Sao_Tome",
                  "Timbuktu",
                  "Tripoli",
                  "Tunis",
                  "Windhoek"
                ]
              },
              "America": {
                "_files": [
                  "Adak",
                  "Anchorage",
                  "Anguilla",
                  "Antigua",
                  "Araguaina",
                  "Aruba",
                  "Asuncion",
                  "Atikokan",
                  "Atka",
                  "Bahia",
                  "Bahia_Banderas",
                  "Barbados",
                  "Belem",
                  "Belize",
                  "Blanc-Sablon",
                  "Boa_Vista",
                  "Bogota",
                  "Boise",
                  "Buenos_Aires",
                  "Cambridge_Bay",
                  "Campo_Grande",
                  "Cancun",
                  "Caracas",
                  "Catamarca",
                  "Cayenne",
                  "Cayman",
                  "Chicago",
                  "Chihuahua",
                  "Ciudad_Juarez",
                  "Coral_Harbour",
                  "Cordoba",
                  "Costa_Rica",
                  "Coyhaique",
                  "Creston",
                  "Cuiaba",
                  "Curacao",
                  "Danmarkshavn",
                  "Dawson",
                  "Dawson_Creek",
                  "Denver",
                  "Detroit",
                  "Dominica",
                  "Edmonton",
                  "Eirunepe",
                  "El_Salvador",
                  "Ensenada",
                  "Fortaleza",
                  "Fort_Nelson",
                  "Fort_Wayne",
                  "Glace_Bay",
                  "Godthab",
                  "Goose_Bay",
                  "Grand_Turk",
                  "Grenada",
                  "Guadeloupe",
                  "Guatemala",
                  "Guayaquil",
                  "Guyana",
                  "Halifax",
                  "Havana",
                  "Hermosillo",
                  "Indianapolis",
                  "Inuvik",
                  "Iqaluit",
                  "Jamaica",
                  "Jujuy",
                  "Juneau",
                  "Knox_IN",
                  "Kralendijk",
                  "La_Paz",
                  "Lima",
                  "Los_Angeles",
                  "Louisville",
                  "Lower_Princes",
                  "Maceio",
                  "Managua",
                  "Manaus",
                  "Marigot",
                  "Martinique",
                  "Matamoros",
                  "Mazatlan",
                  "Mendoza",
                  "Menominee",
                  "Merida",
                  "Metlakatla",
                  "Mexico_City",
                  "Miquelon",
                  "Moncton",
                  "Monterrey",
                  "Montevideo",
                  "Montreal",
                  "Montserrat",
                  "Nassau",
                  "New_York",
                  "Nipigon",
                  "Nome",
                  "Noronha",
                  "Nuuk",
                  "Ojinaga",
                  "Panama",
                  "Pangnirtung",
                  "Paramaribo",
                  "Phoenix",
                  "Port-au-Prince",
                  "Porto_Acre",
                  "Porto_Velho",
                  "Port_of_Spain",
                  "Puerto_Rico",
                  "Punta_Arenas",
                  "Rainy_River",
                  "Rankin_Inlet",
                  "Recife",
                  "Regina",
                  "Resolute",
                  "Rio_Branco",
                  "Rosario",
                  "Santarem",
                  "Santa_Isabel",
                  "Santiago",
                  "Santo_Domingo",
                  "Sao_Paulo",
                  "Scoresbysund",
                  "Shiprock",
                  "Sitka",
                  "St_Barthelemy",
                  "St_Johns",
                  "St_Kitts",
                  "St_Lucia",
                  "St_Thomas",
                  "St_Vincent",
                  "Swift_Current",
                  "Tegucigalpa",
                  "Thule",
                  "Thunder_Bay",
                  "Tijuana",
                  "Toronto",
                  "Tortola",
                  "Vancouver",
                  "Virgin",
                  "Whitehorse",
                  "Winnipeg",
                  "Yakutat",
                  "Yellowknife"
                ],
                "Argentina": {
                  "_files": [
                    "Buenos_Aires",
                    "Catamarca",
                    "ComodRivadavia",
                    "Cordoba",
                    "Jujuy",
                    "La_Rioja",
                    "Mendoza",
                    "Rio_Gallegos",
                    "Salta",
                    "San_Juan",
                    "San_Luis",
                    "Tucuman",
                    "Ushuaia"
                  ]
                },
                "Indiana": {
                  "_files": [
                    "Indianapolis",
                    "Knox",
                    "Marengo",
                    "Petersburg",
                    "Tell_City",
                    "Vevay",
                    "Vincennes",
                    "Winamac"
                  ]
                },
                "Kentucky": {
                  "_files": [
                    "Louisville",
                    "Monticello"
                  ]
                },
                "North_Dakota": {
                  "_files": [
                    "Beulah",
                    "Center",
                    "New_Salem"
                  ]
                }
              },
              "Antarctica": {
                "_files": [
                  "Casey",
                  "Davis",
                  "DumontDUrville",
                  "Macquarie",
                  "Mawson",
                  "McMurdo",
                  "Palmer",
                  "Rothera",
                  "South_Pole",
                  "Syowa",
                  "Troll",
                  "Vostok"
                ]
              },
              "Arctic": {
                "_files": [
                  "Longyearbyen"
                ]
              },
              "Asia": {
                "_files": [
                  "Aden",
                  "Almaty",
                  "Amman",
                  "Anadyr",
                  "Aqtau",
                  "Aqtobe",
                  "Ashgabat",
                  "Ashkhabad",
                  "Atyrau",
                  "Baghdad",
                  "Bahrain",
                  "Baku",
                  "Bangkok",
                  "Barnaul",
                  "Beirut",
                  "Bishkek",
                  "Brunei",
                  "Calcutta",
                  "Chita",
                  "Choibalsan",
                  "Chongqing",
                  "Chungking",
                  "Colombo",
                  "Dacca",
                  "Damascus",
                  "Dhaka",
                  "Dili",
                  "Dubai",
                  "Dushanbe",
                  "Famagusta",
                  "Gaza",
                  "Harbin",
                  "Hebron",
                  "Hong_Kong",
                  "Hovd",
                  "Ho_Chi_Minh",
                  "Irkutsk",
                  "Istanbul",
                  "Jakarta",
                  "Jayapura",
                  "Jerusalem",
                  "Kabul",
                  "Kamchatka",
                  "Karachi",
                  "Kashgar",
                  "Kathmandu",
                  "Katmandu",
                  "Khandyga",
                  "Kolkata",
                  "Krasnoyarsk",
                  "Kuala_Lumpur",
                  "Kuching",
                  "Kuwait",
                  "Macao",
                  "Macau",
                  "Magadan",
                  "Makassar",
                  "Manila",
                  "Muscat",
                  "Nicosia",
                  "Novokuznetsk",
                  "Novosibirsk",
                  "Omsk",
                  "Oral",
                  "Phnom_Penh",
                  "Pontianak",
                  "Pyongyang",
                  "Qatar",
                  "Qostanay",
                  "Qyzylorda",
                  "Rangoon",
                  "Riyadh",
                  "Saigon",
                  "Sakhalin",
                  "Samarkand",
                  "Seoul",
                  "Shanghai",
                  "Singapore",
                  "Srednekolymsk",
                  "Taipei",
                  "Tashkent",
                  "Tbilisi",
                  "Tehran",
                  "Tel_Aviv",
                  "Thimbu",
                  "Thimphu",
                  "Tokyo",
                  "Tomsk",
                  "Ujung_Pandang",
                  "Ulaanbaatar",
                  "Ulan_Bator",
                  "Urumqi",
                  "Ust-Nera",
                  "Vientiane",
                  "Vladivostok",
                  "Yakutsk",
                  "Yangon",
                  "Yekaterinburg",
                  "Yerevan"
                ]
              },
              "Atlantic": {
                "_files": [
                  "Azores",
                  "Bermuda",
                  "Canary",
                  "Cape_Verde",
                  "Faeroe",
                  "Faroe",
                  "Jan_Mayen",
                  "Madeira",
                  "Reykjavik",
                  "South_Georgia",
                  "Stanley",
                  "St_Helena"
                ]
              },
              "Australia": {
                "_files": [
                  "ACT",
                  "Adelaide",
                  "Brisbane",
                  "Broken_Hill",
                  "Canberra",
                  "Currie",
                  "Darwin",
                  "Eucla",
                  "Hobart",
                  "LHI",
                  "Lindeman",
                  "Lord_Howe",
                  "Melbourne",
                  "North",
                  "NSW",
                  "Perth",
                  "Queensland",
                  "South",
                  "Sydney",
                  "Tasmania",
                  "Victoria",
                  "West",
                  "Yancowinna"
                ]
              },
              "Brazil": {
                "_files": [
                  "Acre",
                  "DeNoronha",
                  "East",
                  "West"
                ]
              },
              "Canada": {
                "_files": [
                  "Atlantic",
                  "Central",
                  "Eastern",
                  "Mountain",
                  "Newfoundland",
                  "Pacific",
                  "Saskatchewan",
                  "Yukon"
                ]
              },
              "Chile": {
                "_files": [
                  "Continental",
                  "EasterIsland"
                ]
              },
              "Etc": {
                "_files": [
                  "GMT",
                  "GMT+0",
                  "GMT+1",
                  "GMT+10",
                  "GMT+11",
                  "GMT+12",
                  "GMT+2",
                  "GMT+3",
                  "GMT+4",
                  "GMT+5",
                  "GMT+6",
                  "GMT+7",
                  "GMT+8",
                  "GMT+9",
                  "GMT-0",
                  "GMT-1",
                  "GMT-10",
                  "GMT-11",
                  "GMT-12",
                  "GMT-13",
                  "GMT-14",
                  "GMT-2",
                  "GMT-3",
                  "GMT-4",
                  "GMT-5",
                  "GMT-6",
                  "GMT-7",
                  "GMT-8",
                  "GMT-9",
                  "GMT0",
                  "Greenwich",
                  "UCT",
                  "Universal",
                  "UTC",
                  "Zulu"
                ]
              },
              "Europe": {
                "_files": [
                  "Amsterdam",
                  "Andorra",
                  "Astrakhan",
                  "Athens",
                  "Belfast",
                  "Belgrade",
                  "Berlin",
                  "Bratislava",
                  "Brussels",
                  "Bucharest",
                  "Budapest",
                  "Busingen",
                  "Chisinau",
                  "Copenhagen",
                  "Dublin",
                  "Gibraltar",
                  "Guernsey",
                  "Helsinki",
                  "Isle_of_Man",
                  "Istanbul",
                  "Jersey",
                  "Kaliningrad",
                  "Kiev",
                  "Kirov",
                  "Kyiv",
                  "Lisbon",
                  "Ljubljana",
                  "London",
                  "Luxembourg",
                  "Madrid",
                  "Malta",
                  "Mariehamn",
                  "Minsk",
                  "Monaco",
                  "Moscow",
                  "Nicosia",
                  "Oslo",
                  "Paris",
                  "Podgorica",
                  "Prague",
                  "Riga",
                  "Rome",
                  "Samara",
                  "San_Marino",
                  "Sarajevo",
                  "Saratov",
                  "Simferopol",
                  "Skopje",
                  "Sofia",
                  "Stockholm",
                  "Tallinn",
                  "Tirane",
                  "Tiraspol",
                  "Ulyanovsk",
                  "Uzhgorod",
                  "Vaduz",
                  "Vatican",
                  "Vienna",
                  "Vilnius",
                  "Volgograd",
                  "Warsaw",
                  "Zagreb",
                  "Zaporozhye",
                  "Zurich"
                ]
              },
              "Indian": {
                "_files": [
                  "Antananarivo",
                  "Chagos",
                  "Christmas",
                  "Cocos",
                  "Comoro",
                  "Kerguelen",
                  "Mahe",
                  "Maldives",
                  "Mauritius",
                  "Mayotte",
                  "Reunion"
                ]
              },
              "Mexico": {
                "_files": [
                  "BajaNorte",
                  "BajaSur",
                  "General"
                ]
              },
              "Pacific": {
                "_files": [
                  "Apia",
                  "Auckland",
                  "Bougainville",
                  "Chatham",
                  "Chuuk",
                  "Easter",
                  "Efate",
                  "Enderbury",
                  "Fakaofo",
                  "Fiji",
                  "Funafuti",
                  "Galapagos",
                  "Gambier",
                  "Guadalcanal",
                  "Guam",
                  "Honolulu",
                  "Johnston",
                  "Kanton",
                  "Kiritimati",
                  "Kosrae",
                  "Kwajalein",
                  "Majuro",
                  "Marquesas",
                  "Midway",
                  "Nauru",
                  "Niue",
                  "Norfolk",
                  "Noumea",
                  "Pago_Pago",
                  "Palau",
                  "Pitcairn",
                  "Pohnpei",
                  "Ponape",
                  "Port_Moresby",
                  "Rarotonga",
                  "Saipan",
                  "Samoa",
                  "Tahiti",
                  "Tarawa",
                  "Tongatapu",
                  "Truk",
                  "Wake",
                  "Wallis",
                  "Yap"
                ]
              },
              "US": {
                "_files": [
                  "Alaska",
                  "Aleutian",
                  "Arizona",
                  "Central",
                  "East-Indiana",
                  "Eastern",
                  "Hawaii",
                  "Indiana-Starke",
                  "Michigan",
                  "Mountain",
                  "Pacific",
                  "Samoa"
                ]
              }
            }
          },
          "pytz-2025.2.dist-info": {
            "_files": [
              "INSTALLER",
              "LICENSE.txt",
              "METADATA",
              "RECORD",
              "top_level.txt",
              "WHEEL",
              "zip-safe"
            ]
          },
          "six-1.17.0.dist-info": {
            "_files": [
              "INSTALLER",
              "LICENSE",
              "METADATA",
              "RECORD",
              "top_level.txt",
              "WHEEL"
            ]
          },
          "tzdata": {
            "_files": [
              "zones",
              "__init__.py"
            ],
            "zoneinfo": {
              "_files": [
                "CET",
                "CST6CDT",
                "Cuba",
                "EET",
                "Egypt",
                "Eire",
                "EST",
                "EST5EDT",
                "Factory",
                "GB",
                "GB-Eire",
                "GMT",
                "GMT+0",
                "GMT-0",
                "GMT0",
                "Greenwich",
                "Hongkong",
                "HST",
                "Iceland",
                "Iran",
                "iso3166.tab",
                "Israel",
                "Jamaica",
                "Japan",
                "Kwajalein",
                "leapseconds",
                "Libya",
                "MET",
                "MST",
                "MST7MDT",
                "Navajo",
                "NZ",
                "NZ-CHAT",
                "Poland",
                "Portugal",
                "PRC",
                "PST8PDT",
                "ROC",
                "ROK",
                "Singapore",
                "Turkey",
                "tzdata.zi",
                "UCT",
                "Universal",
                "UTC",
                "W-SU",
                "WET",
                "zone.tab",
                "zone1970.tab",
                "zonenow.tab",
                "Zulu",
                "__init__.py"
              ],
              "Africa": {
                "_files": [
                  "Abidjan",
                  "Accra",
                  "Addis_Ababa",
                  "Algiers",
                  "Asmara",
                  "Asmera",
                  "Bamako",
                  "Bangui",
                  "Banjul",
                  "Bissau",
                  "Blantyre",
                  "Brazzaville",
                  "Bujumbura",
                  "Cairo",
                  "Casablanca",
                  "Ceuta",
                  "Conakry",
                  "Dakar",
                  "Dar_es_Salaam",
                  "Djibouti",
                  "Douala",
                  "El_Aaiun",
                  "Freetown",
                  "Gaborone",
                  "Harare",
                  "Johannesburg",
                  "Juba",
                  "Kampala",
                  "Khartoum",
                  "Kigali",
                  "Kinshasa",
                  "Lagos",
                  "Libreville",
                  "Lome",
                  "Luanda",
                  "Lubumbashi",
                  "Lusaka",
                  "Malabo",
                  "Maputo",
                  "Maseru",
                  "Mbabane",
                  "Mogadishu",
                  "Monrovia",
                  "Nairobi",
                  "Ndjamena",
                  "Niamey",
                  "Nouakchott",
                  "Ouagadougou",
                  "Porto-Novo",
                  "Sao_Tome",
                  "Timbuktu",
                  "Tripoli",
                  "Tunis",
                  "Windhoek",
                  "__init__.py"
                ]
              },
              "America": {
                "_files": [
                  "Adak",
                  "Anchorage",
                  "Anguilla",
                  "Antigua",
                  "Araguaina",
                  "Aruba",
                  "Asuncion",
                  "Atikokan",
                  "Atka",
                  "Bahia",
                  "Bahia_Banderas",
                  "Barbados",
                  "Belem",
                  "Belize",
                  "Blanc-Sablon",
                  "Boa_Vista",
                  "Bogota",
                  "Boise",
                  "Buenos_Aires",
                  "Cambridge_Bay",
                  "Campo_Grande",
                  "Cancun",
                  "Caracas",
                  "Catamarca",
                  "Cayenne",
                  "Cayman",
                  "Chicago",
                  "Chihuahua",
                  "Ciudad_Juarez",
                  "Coral_Harbour",
                  "Cordoba",
                  "Costa_Rica",
                  "Coyhaique",
                  "Creston",
                  "Cuiaba",
                  "Curacao",
                  "Danmarkshavn",
                  "Dawson",
                  "Dawson_Creek",
                  "Denver",
                  "Detroit",
                  "Dominica",
                  "Edmonton",
                  "Eirunepe",
                  "El_Salvador",
                  "Ensenada",
                  "Fortaleza",
                  "Fort_Nelson",
                  "Fort_Wayne",
                  "Glace_Bay",
                  "Godthab",
                  "Goose_Bay",
                  "Grand_Turk",
                  "Grenada",
                  "Guadeloupe",
                  "Guatemala",
                  "Guayaquil",
                  "Guyana",
                  "Halifax",
                  "Havana",
                  "Hermosillo",
                  "Indianapolis",
                  "Inuvik",
                  "Iqaluit",
                  "Jamaica",
                  "Jujuy",
                  "Juneau",
                  "Knox_IN",
                  "Kralendijk",
                  "La_Paz",
                  "Lima",
                  "Los_Angeles",
                  "Louisville",
                  "Lower_Princes",
                  "Maceio",
                  "Managua",
                  "Manaus",
                  "Marigot",
                  "Martinique",
                  "Matamoros",
                  "Mazatlan",
                  "Mendoza",
                  "Menominee",
                  "Merida",
                  "Metlakatla",
                  "Mexico_City",
                  "Miquelon",
                  "Moncton",
                  "Monterrey",
                  "Montevideo",
                  "Montreal",
                  "Montserrat",
                  "Nassau",
                  "New_York",
                  "Nipigon",
                  "Nome",
                  "Noronha",
                  "Nuuk",
                  "Ojinaga",
                  "Panama",
                  "Pangnirtung",
                  "Paramaribo",
                  "Phoenix",
                  "Port-au-Prince",
                  "Porto_Acre",
                  "Porto_Velho",
                  "Port_of_Spain",
                  "Puerto_Rico",
                  "Punta_Arenas",
                  "Rainy_River",
                  "Rankin_Inlet",
                  "Recife",
                  "Regina",
                  "Resolute",
                  "Rio_Branco",
                  "Rosario",
                  "Santarem",
                  "Santa_Isabel",
                  "Santiago",
                  "Santo_Domingo",
                  "Sao_Paulo",
                  "Scoresbysund",
                  "Shiprock",
                  "Sitka",
                  "St_Barthelemy",
                  "St_Johns",
                  "St_Kitts",
                  "St_Lucia",
                  "St_Thomas",
                  "St_Vincent",
                  "Swift_Current",
                  "Tegucigalpa",
                  "Thule",
                  "Thunder_Bay",
                  "Tijuana",
                  "Toronto",
                  "Tortola",
                  "Vancouver",
                  "Virgin",
                  "Whitehorse",
                  "Winnipeg",
                  "Yakutat",
                  "Yellowknife",
                  "__init__.py"
                ],
                "Argentina": {
                  "_files": [
                    "Buenos_Aires",
                    "Catamarca",
                    "ComodRivadavia",
                    "Cordoba",
                    "Jujuy",
                    "La_Rioja",
                    "Mendoza",
                    "Rio_Gallegos",
                    "Salta",
                    "San_Juan",
                    "San_Luis",
                    "Tucuman",
                    "Ushuaia",
                    "__init__.py"
                  ]
                },
                "Indiana": {
                  "_files": [
                    "Indianapolis",
                    "Knox",
                    "Marengo",
                    "Petersburg",
                    "Tell_City",
                    "Vevay",
                    "Vincennes",
                    "Winamac",
                    "__init__.py"
                  ]
                },
                "Kentucky": {
                  "_files": [
                    "Louisville",
                    "Monticello",
                    "__init__.py"
                  ]
                },
                "North_Dakota": {
                  "_files": [
                    "Beulah",
                    "Center",
                    "New_Salem",
                    "__init__.py"
                  ]
                }
              },
              "Antarctica": {
                "_files": [
                  "Casey",
                  "Davis",
                  "DumontDUrville",
                  "Macquarie",
                  "Mawson",
                  "McMurdo",
                  "Palmer",
                  "Rothera",
                  "South_Pole",
                  "Syowa",
                  "Troll",
                  "Vostok",
                  "__init__.py"
                ]
              },
              "Arctic": {
                "_files": [
                  "Longyearbyen",
                  "__init__.py"
                ]
              },
              "Asia": {
                "_files": [
                  "Aden",
                  "Almaty",
                  "Amman",
                  "Anadyr",
                  "Aqtau",
                  "Aqtobe",
                  "Ashgabat",
                  "Ashkhabad",
                  "Atyrau",
                  "Baghdad",
                  "Bahrain",
                  "Baku",
                  "Bangkok",
                  "Barnaul",
                  "Beirut",
                  "Bishkek",
                  "Brunei",
                  "Calcutta",
                  "Chita",
                  "Choibalsan",
                  "Chongqing",
                  "Chungking",
                  "Colombo",
                  "Dacca",
                  "Damascus",
                  "Dhaka",
                  "Dili",
                  "Dubai",
                  "Dushanbe",
                  "Famagusta",
                  "Gaza",
                  "Harbin",
                  "Hebron",
                  "Hong_Kong",
                  "Hovd",
                  "Ho_Chi_Minh",
                  "Irkutsk",
                  "Istanbul",
                  "Jakarta",
                  "Jayapura",
                  "Jerusalem",
                  "Kabul",
                  "Kamchatka",
                  "Karachi",
                  "Kashgar",
                  "Kathmandu",
                  "Katmandu",
                  "Khandyga",
                  "Kolkata",
                  "Krasnoyarsk",
                  "Kuala_Lumpur",
                  "Kuching",
                  "Kuwait",
                  "Macao",
                  "Macau",
                  "Magadan",
                  "Makassar",
                  "Manila",
                  "Muscat",
                  "Nicosia",
                  "Novokuznetsk",
                  "Novosibirsk",
                  "Omsk",
                  "Oral",
                  "Phnom_Penh",
                  "Pontianak",
                  "Pyongyang",
                  "Qatar",
                  "Qostanay",
                  "Qyzylorda",
                  "Rangoon",
                  "Riyadh",
                  "Saigon",
                  "Sakhalin",
                  "Samarkand",
                  "Seoul",
                  "Shanghai",
                  "Singapore",
                  "Srednekolymsk",
                  "Taipei",
                  "Tashkent",
                  "Tbilisi",
                  "Tehran",
                  "Tel_Aviv",
                  "Thimbu",
                  "Thimphu",
                  "Tokyo",
                  "Tomsk",
                  "Ujung_Pandang",
                  "Ulaanbaatar",
                  "Ulan_Bator",
                  "Urumqi",
                  "Ust-Nera",
                  "Vientiane",
                  "Vladivostok",
                  "Yakutsk",
                  "Yangon",
                  "Yekaterinburg",
                  "Yerevan",
                  "__init__.py"
                ]
              },
              "Atlantic": {
                "_files": [
                  "Azores",
                  "Bermuda",
                  "Canary",
                  "Cape_Verde",
                  "Faeroe",
                  "Faroe",
                  "Jan_Mayen",
                  "Madeira",
                  "Reykjavik",
                  "South_Georgia",
                  "Stanley",
                  "St_Helena",
                  "__init__.py"
                ]
              },
              "Australia": {
                "_files": [
                  "ACT",
                  "Adelaide",
                  "Brisbane",
                  "Broken_Hill",
                  "Canberra",
                  "Currie",
                  "Darwin",
                  "Eucla",
                  "Hobart",
                  "LHI",
                  "Lindeman",
                  "Lord_Howe",
                  "Melbourne",
                  "North",
                  "NSW",
                  "Perth",
                  "Queensland",
                  "South",
                  "Sydney",
                  "Tasmania",
                  "Victoria",
                  "West",
                  "Yancowinna",
                  "__init__.py"
                ]
              },
              "Brazil": {
                "_files": [
                  "Acre",
                  "DeNoronha",
                  "East",
                  "West",
                  "__init__.py"
                ]
              },
              "Canada": {
                "_files": [
                  "Atlantic",
                  "Central",
                  "Eastern",
                  "Mountain",
                  "Newfoundland",
                  "Pacific",
                  "Saskatchewan",
                  "Yukon",
                  "__init__.py"
                ]
              },
              "Chile": {
                "_files": [
                  "Continental",
                  "EasterIsland",
                  "__init__.py"
                ]
              },
              "Etc": {
                "_files": [
                  "GMT",
                  "GMT+0",
                  "GMT+1",
                  "GMT+10",
                  "GMT+11",
                  "GMT+12",
                  "GMT+2",
                  "GMT+3",
                  "GMT+4",
                  "GMT+5",
                  "GMT+6",
                  "GMT+7",
                  "GMT+8",
                  "GMT+9",
                  "GMT-0",
                  "GMT-1",
                  "GMT-10",
                  "GMT-11",
                  "GMT-12",
                  "GMT-13",
                  "GMT-14",
                  "GMT-2",
                  "GMT-3",
                  "GMT-4",
                  "GMT-5",
                  "GMT-6",
                  "GMT-7",
                  "GMT-8",
                  "GMT-9",
                  "GMT0",
                  "Greenwich",
                  "UCT",
                  "Universal",
                  "UTC",
                  "Zulu",
                  "__init__.py"
                ]
              },
              "Europe": {
                "_files": [
                  "Amsterdam",
                  "Andorra",
                  "Astrakhan",
                  "Athens",
                  "Belfast",
                  "Belgrade",
                  "Berlin",
                  "Bratislava",
                  "Brussels",
                  "Bucharest",
                  "Budapest",
                  "Busingen",
                  "Chisinau",
                  "Copenhagen",
                  "Dublin",
                  "Gibraltar",
                  "Guernsey",
                  "Helsinki",
                  "Isle_of_Man",
                  "Istanbul",
                  "Jersey",
                  "Kaliningrad",
                  "Kiev",
                  "Kirov",
                  "Kyiv",
                  "Lisbon",
                  "Ljubljana",
                  "London",
                  "Luxembourg",
                  "Madrid",
                  "Malta",
                  "Mariehamn",
                  "Minsk",
                  "Monaco",
                  "Moscow",
                  "Nicosia",
                  "Oslo",
                  "Paris",
                  "Podgorica",
                  "Prague",
                  "Riga",
                  "Rome",
                  "Samara",
                  "San_Marino",
                  "Sarajevo",
                  "Saratov",
                  "Simferopol",
                  "Skopje",
                  "Sofia",
                  "Stockholm",
                  "Tallinn",
                  "Tirane",
                  "Tiraspol",
                  "Ulyanovsk",
                  "Uzhgorod",
                  "Vaduz",
                  "Vatican",
                  "Vienna",
                  "Vilnius",
                  "Volgograd",
                  "Warsaw",
                  "Zagreb",
                  "Zaporozhye",
                  "Zurich",
                  "__init__.py"
                ]
              },
              "Indian": {
                "_files": [
                  "Antananarivo",
                  "Chagos",
                  "Christmas",
                  "Cocos",
                  "Comoro",
                  "Kerguelen",
                  "Mahe",
                  "Maldives",
                  "Mauritius",
                  "Mayotte",
                  "Reunion",
                  "__init__.py"
                ]
              },
              "Mexico": {
                "_files": [
                  "BajaNorte",
                  "BajaSur",
                  "General",
                  "__init__.py"
                ]
              },
              "Pacific": {
                "_files": [
                  "Apia",
                  "Auckland",
                  "Bougainville",
                  "Chatham",
                  "Chuuk",
                  "Easter",
                  "Efate",
                  "Enderbury",
                  "Fakaofo",
                  "Fiji",
                  "Funafuti",
                  "Galapagos",
                  "Gambier",
                  "Guadalcanal",
                  "Guam",
                  "Honolulu",
                  "Johnston",
                  "Kanton",
                  "Kiritimati",
                  "Kosrae",
                  "Kwajalein",
                  "Majuro",
                  "Marquesas",
                  "Midway",
                  "Nauru",
                  "Niue",
                  "Norfolk",
                  "Noumea",
                  "Pago_Pago",
                  "Palau",
                  "Pitcairn",
                  "Pohnpei",
                  "Ponape",
                  "Port_Moresby",
                  "Rarotonga",
                  "Saipan",
                  "Samoa",
                  "Tahiti",
                  "Tarawa",
                  "Tongatapu",
                  "Truk",
                  "Wake",
                  "Wallis",
                  "Yap",
                  "__init__.py"
                ]
              },
              "US": {
                "_files": [
                  "Alaska",
                  "Aleutian",
                  "Arizona",
                  "Central",
                  "East-Indiana",
                  "Eastern",
                  "Hawaii",
                  "Indiana-Starke",
                  "Michigan",
                  "Mountain",
                  "Pacific",
                  "Samoa",
                  "__init__.py"
                ]
              }
            }
          },
          "tzdata-2025.2.dist-info": {
            "_files": [
              "INSTALLER",
              "METADATA",
              "RECORD",
              "top_level.txt",
              "WHEEL"
            ],
            "licenses": {
              "_files": [
                "LICENSE"
              ],
              "licenses": {
                "_files": [
                  "LICENSE_APACHE"
                ]
              }
            }
          },
          "werkzeug": {
            "_files": [
              "exceptions.py",
              "formparser.py",
              "http.py",
              "local.py",
              "py.typed",
              "security.py",
              "serving.py",
              "test.py",
              "testapp.py",
              "urls.py",
              "user_agent.py",
              "utils.py",
              "wsgi.py",
              "_internal.py",
              "_reloader.py",
              "__init__.py"
            ],
            "datastructures": {
              "_files": [
                "accept.py",
                "auth.py",
                "cache_control.py",
                "csp.py",
                "etag.py",
                "file_storage.py",
                "headers.py",
                "mixins.py",
                "range.py",
                "structures.py",
                "__init__.py"
              ]
            },
            "debug": {
              "_files": [
                "console.py",
                "repr.py",
                "tbtools.py",
                "__init__.py"
              ],
              "shared": {
                "_files": [
                  "console.png",
                  "debugger.js",
                  "ICON_LICENSE.md",
                  "less.png",
                  "more.png",
                  "style.css"
                ]
              }
            },
            "middleware": {
              "_files": [
                "dispatcher.py",
                "http_proxy.py",
                "lint.py",
                "profiler.py",
                "proxy_fix.py",
                "shared_data.py",
                "__init__.py"
              ]
            },
            "routing": {
              "_files": [
                "converters.py",
                "exceptions.py",
                "map.py",
                "matcher.py",
                "rules.py",
                "__init__.py"
              ]
            },
            "sansio": {
              "_files": [
                "http.py",
                "multipart.py",
                "request.py",
                "response.py",
                "utils.py",
                "__init__.py"
              ]
            },
            "wrappers": {
              "_files": [
                "request.py",
                "response.py",
                "__init__.py"
              ]
            }
          },
          "werkzeug-3.1.3.dist-info": {
            "_files": [
              "INSTALLER",
              "LICENSE.txt",
              "METADATA",
              "RECORD",
              "WHEEL"
            ]
          }
        }
      },
      "Scripts": {
        "_files": [
          "activate",
          "activate.bat",
          "activate.fish",
          "Activate.ps1",
          "deactivate.bat",
          "dotenv.exe",
          "f2py.exe",
          "flask.exe",
          "numpy-config.exe",
          "pip.exe",
          "pip3.13.exe",
          "pip3.exe",
          "python.exe",
          "pythonw.exe"
        ]
      }
    },
    "web": {
      "_files": [
        "app.py",
        "README.md",
        "requirements.txt",
        "__init__.py"
      ],
      "routes": {
        "_files": [
          "ota_routes.py",
          "rate_routes.py"
        ]
      },
      "static": {
        "_files": [],
        "css": {
          "_files": [
            "editable.css",
            "style.css",
            "themes.css"
          ]
        },
        "js": {
          "_files": [
            "dashboard.js",
            "main.js",
            "ota_correction.js",
            "rate_correction.js",
            "theme.js"
          ]
        }
      },
      "templates": {
        "_files": [
          "base.html",
          "dashboard.html",
          "escalations.html",
          "index.html",
          "instructions.html",
          "non_global.html",
          "ota.html",
          "process_detail.html",
          "rate_corrections.html",
          "unauthorized.html"
        ]
      }
    }
  },
  "architecture": {
    "components": {
      "BundleValidator": {
        "type": "validator",
        "file": "core\\validators\\bundle_validator.py",
        "methods": [
          {
            "name": "__init__",
            "args": [
              "self",
              "bundle_config_path"
            ],
            "docstring": "Initialize the bundle validator with a configuration file.\n\nArgs:\n    bundle_config_path: Path to the bundle configuration JSON file",
            "line_count": 4,
            "decorators": []
          },
          {
            "name": "_load_bundle_config",
            "args": [
              "self",
              "config_path"
            ],
            "docstring": "Load bundle configuration from JSON file.\n\nArgs:\n    config_path: Path to the configuration file\n    \nReturns:\n    Dict: Bundle configuration",
            "line_count": 5,
            "decorators": []
          },
          {
            "name": "_categorize_bundles",
            "args": [
              "self"
            ],
            "docstring": "Categorize bundles by type for easier lookup.\n\nReturns:\n    Dict: Bundles organized by type",
            "line_count": 4,
            "decorators": []
          },
          {
            "name": "detect_bundle",
            "args": [
              "self",
              "cpt_codes"
            ],
            "docstring": "Detect if a set of CPT codes matches any known bundle pattern.\n\nArgs:\n    cpt_codes: Set of CPT codes to check\n    \nReturns:\n    Dict: Bundle information or empty dict if no bundle detected",
            "line_count": 5,
            "decorators": []
          },
          {
            "name": "compare_bundles",
            "args": [
              "self",
              "order_cpt_codes",
              "hcfa_cpt_codes"
            ],
            "docstring": "Compare bundles between order and HCFA CPT codes.\n\nArgs:\n    order_cpt_codes: CPT codes from order\n    hcfa_cpt_codes: CPT codes from HCFA\n    \nReturns:\n    Dict: Comparison results",
            "line_count": 8,
            "decorators": []
          },
          {
            "name": "validate",
            "args": [
              "self",
              "order_data",
              "hcfa_data"
            ],
            "docstring": "Validate bundle matching between order and HCFA data.\n\nArgs:\n    order_data: Order data with CPT codes\n    hcfa_data: HCFA data with CPT codes\n    \nReturns:\n    Dict: Validation results",
            "line_count": 11,
            "decorators": []
          }
        ],
        "docstring": "A flexible validator for detecting and comparing procedure bundles\nbetween order data and HCFA data.",
        "inheritance": []
      },
      "ClinicalIntentValidator": {
        "type": "validator",
        "file": "core\\validators\\intent_validator.py",
        "methods": [
          {
            "name": "__init__",
            "args": [
              "self",
              "clinical_equiv_path",
              "dim_proc_df"
            ],
            "docstring": "Initialize the clinical intent validator.\n\nArgs:\n    clinical_equiv_path: Path to clinical equivalence mapping file\n    dim_proc_df: DataFrame with procedure codes and categories (optional)",
            "line_count": 6,
            "decorators": []
          },
          {
            "name": "_load_equivalence_map",
            "args": [
              "self",
              "config_path"
            ],
            "docstring": "Load clinical equivalence mapping from JSON file.\n\nArgs:\n    config_path: Path to the configuration file\n    \nReturns:\n    Dict: Clinical equivalence mapping",
            "line_count": 3,
            "decorators": []
          },
          {
            "name": "get_procedure_categories",
            "args": [
              "self",
              "cpt_code"
            ],
            "docstring": "Get categories for a CPT code.\n\nArgs:\n    cpt_code: CPT code to categorize\n    \nReturns:\n    List[str]: Categories for the CPT code",
            "line_count": 6,
            "decorators": []
          },
          {
            "name": "get_body_part",
            "args": [
              "self",
              "cpt_code"
            ],
            "docstring": "Determine the body part from a CPT code.\n\nArgs:\n    cpt_code: CPT code to analyze\n    \nReturns:\n    Optional[str]: Body part or None if undetermined",
            "line_count": 6,
            "decorators": []
          },
          {
            "name": "classify_intent",
            "args": [
              "self",
              "cpt_codes"
            ],
            "docstring": "Classify the clinical intent of a set of CPT codes.\n\nArgs:\n    cpt_codes: Set of CPT codes to classify\n    \nReturns:\n    Dict: Clinical intent classification",
            "line_count": 12,
            "decorators": []
          },
          {
            "name": "compare_intents",
            "args": [
              "self",
              "order_cpt_codes",
              "hcfa_cpt_codes"
            ],
            "docstring": "Compare clinical intents between order and HCFA CPT codes.\n\nArgs:\n    order_cpt_codes: CPT codes from order\n    hcfa_cpt_codes: CPT codes from HCFA\n    \nReturns:\n    Dict: Comparison results",
            "line_count": 8,
            "decorators": []
          },
          {
            "name": "validate",
            "args": [
              "self",
              "order_data",
              "hcfa_data"
            ],
            "docstring": "Validate clinical intent matching between order and HCFA data.\n\nArgs:\n    order_data: Order data with CPT codes\n    hcfa_data: HCFA data with CPT codes\n    \nReturns:\n    Dict: Validation results",
            "line_count": 10,
            "decorators": []
          },
          {
            "name": "from_cpt_codes",
            "args": [
              "self",
              "cpt_codes"
            ],
            "docstring": "Create a ClinicalIntent from a set of CPT codes.\n\nArgs:\n    cpt_codes: Set of CPT codes to analyze\n    \nReturns:\n    Dict: Classified clinical intent",
            "line_count": 5,
            "decorators": []
          }
        ],
        "docstring": "Validator for clinical intent matching between order and HCFA data.\nFocuses on the clinical purpose rather than exact CPT code matching.",
        "inheritance": []
      },
      "LineItemValidator": {
        "type": "validator",
        "file": "core\\validators\\line_items.py",
        "methods": [
          {
            "name": "__init__",
            "args": [
              "self",
              "dim_proc_df",
              "logger"
            ],
            "docstring": "Initialize the line items validator.\n\nArgs:\n    dim_proc_df: DataFrame with procedure code information (optional)\n    logger: Logger for diagnostic information (optional)",
            "line_count": 5,
            "decorators": []
          },
          {
            "name": "validate",
            "args": [
              "self",
              "hcfa_lines",
              "order_lines"
            ],
            "docstring": "Validate line items between HCFA data and order data.\n\nArgs:\n    hcfa_lines: Line items from HCFA data\n    order_lines: DataFrame with line items from order data\n    \nReturns:\n    Dict: Validation results",
            "line_count": 2,
            "decorators": []
          },
          {
            "name": "_format_hcfa_line",
            "args": [
              "self",
              "line"
            ],
            "docstring": "Format HCFA line item for comparison and reporting.",
            "line_count": 2,
            "decorators": []
          },
          {
            "name": "_format_order_line",
            "args": [
              "self",
              "row"
            ],
            "docstring": "Format order line item for comparison and reporting.",
            "line_count": 2,
            "decorators": []
          },
          {
            "name": "_is_clinically_equivalent",
            "args": [
              "self",
              "cpt1",
              "cpt2"
            ],
            "docstring": "Check if two CPT codes are clinically equivalent.\nThis is a simplified implementation - in a real system, this would use \na comprehensive mapping of equivalent codes.",
            "line_count": 6,
            "decorators": []
          },
          {
            "name": "_code_similarity",
            "args": [
              "self",
              "cpt1",
              "cpt2"
            ],
            "docstring": "Calculate similarity between two CPT codes.\nReturns a value between 0.0 and 1.0.",
            "line_count": 7,
            "decorators": []
          },
          {
            "name": "_check_component_modifiers",
            "args": [
              "self",
              "hcfa_line",
              "order_line"
            ],
            "docstring": "Check if there are component modifiers (TC or 26) that affect matching.\n\nArgs:\n    hcfa_line: HCFA line item\n    order_line: Order line item\n    \nReturns:\n    Dict: Component modifier assessment",
            "line_count": 14,
            "decorators": []
          }
        ],
        "docstring": "Enhanced validator for matching line items between order and HCFA data.\nFeatures improved error reporting and diagnostics.",
        "inheritance": []
      },
      "ModifierValidator": {
        "type": "validator",
        "file": "core\\validators\\modifier_validator.py",
        "methods": [
          {
            "name": "__init__",
            "args": [
              "self",
              "invalid_modifiers"
            ],
            "docstring": "Initialize the modifier validator.\n\nArgs:\n    invalid_modifiers: Set of invalid modifiers (default: from settings)",
            "line_count": 6,
            "decorators": []
          },
          {
            "name": "detect_component_modifiers",
            "args": [
              "self",
              "hcfa_data"
            ],
            "docstring": "Detect and categorize TC (Technical Component) or 26 (Professional Component) modifiers.\n\nArgs:\n    hcfa_data: HCFA data with line_items\n    \nReturns:\n    Dict: Component billing information",
            "line_count": 6,
            "decorators": []
          },
          {
            "name": "validate",
            "args": [
              "self",
              "hcfa_data"
            ],
            "docstring": "Validate modifiers in HCFA data.\n\nArgs:\n    hcfa_data: HCFA data with line_items\n    \nReturns:\n    Dict: Validation results",
            "line_count": 12,
            "decorators": []
          },
          {
            "name": "_parse_modifiers",
            "args": [
              "self",
              "modifier_value"
            ],
            "docstring": "Parse modifiers from various formats into a set of strings.\n\nArgs:\n    modifier_value: Modifier value (string, list, etc.)\n    \nReturns:\n    Set[str]: Set of modifier strings",
            "line_count": 6,
            "decorators": []
          },
          {
            "name": "_get_valid_modifiers",
            "args": [
              "self",
              "cpt",
              "bundle_type"
            ],
            "docstring": "Get valid modifiers for a CPT code.\n\nArgs:\n    cpt: CPT code\n    bundle_type: Bundle type (optional)\n    \nReturns:\n    Set[str]: Set of valid modifiers",
            "line_count": 5,
            "decorators": []
          },
          {
            "name": "_generate_messages",
            "args": [
              "self",
              "invalid_modifiers",
              "incompatible_sets",
              "missing_required"
            ],
            "docstring": "Generate human-readable messages for validation results.\n\nArgs:\n    invalid_modifiers: List of invalid modifier details\n    incompatible_sets: List of incompatible modifier sets\n    missing_required: List of missing required modifiers\n    \nReturns:\n    List[str]: Human-readable messages",
            "line_count": 7,
            "decorators": []
          }
        ],
        "docstring": "Validator for checking CPT code modifiers.\nEnsures modifiers are valid and appropriate for the CPT codes.",
        "inheritance": []
      },
      "RateValidator": {
        "type": "validator",
        "file": "core\\validators\\rate_validator.py",
        "methods": [
          {
            "name": "__init__",
            "args": [
              "self",
              "conn",
              "bundle_rates_path"
            ],
            "docstring": "Initialize the rate validator.\n\nArgs:\n    conn: SQLite database connection\n    bundle_rates_path: Path to bundle rates config (optional)",
            "line_count": 5,
            "decorators": []
          },
          {
            "name": "_load_bundle_rates",
            "args": [
              "self",
              "config_path"
            ],
            "docstring": "Load bundle rate configuration if available.",
            "line_count": 4,
            "decorators": []
          },
          {
            "name": "get_bundle_rate",
            "args": [
              "self",
              "bundle_name",
              "provider_tin",
              "network_status"
            ],
            "docstring": "Get rate for a bundle based on provider and network status.\n\nArgs:\n    bundle_name: Name of the bundle\n    provider_tin: Provider TIN\n    network_status: Network status (in-network, out-of-network)\n    \nReturns:\n    float: Bundle rate or None if not found",
            "line_count": 6,
            "decorators": []
          },
          {
            "name": "validate",
            "args": [
              "self",
              "hcfa_lines",
              "order_id"
            ],
            "docstring": "Validate rates for CPT codes with enhanced bundle handling.\n\nArgs:\n    hcfa_lines: Line items from HCFA data\n    order_id: Order ID for reference data\n    \nReturns:\n    Dict: Validation results",
            "line_count": 21,
            "decorators": []
          },
          {
            "name": "_validate_individual_rate",
            "args": [
              "self",
              "line",
              "provider_tin",
              "provider_network",
              "proc_categories",
              "total_rate",
              "rate_sources",
              "rate_results"
            ],
            "docstring": "Validate rate for an individual line item.\n\nArgs:\n    line: Line item data\n    provider_tin: Provider TIN\n    provider_network: Provider network status\n    proc_categories: Procedure categories mapping\n    total_rate: Running total rate (modified in place)\n    rate_sources: Rate sources tracking dict (modified in place)\n    rate_results: Results list (modified in place)\n    \nReturns:\n    Dict: Individual rate validation result",
            "line_count": 19,
            "decorators": []
          },
          {
            "name": "_get_provider_details",
            "args": [
              "self",
              "order_id"
            ],
            "docstring": "Get provider details for an order.",
            "line_count": 5,
            "decorators": []
          },
          {
            "name": "_clean_rate_string",
            "args": [
              "self",
              "rate_str"
            ],
            "docstring": "Clean a rate string by removing currency symbols, spaces, and commas.\n\nArgs:\n    rate_str: Rate string to clean\n    \nReturns:\n    float: Cleaned rate value",
            "line_count": 4,
            "decorators": []
          },
          {
            "name": "_get_ppo_rate",
            "args": [
              "self",
              "provider_tin",
              "cpt_code",
              "modifier"
            ],
            "docstring": "Get PPO rate for a provider and CPT code, considering modifiers 26 and TC if present.",
            "line_count": 5,
            "decorators": []
          },
          {
            "name": "_get_ota_rate",
            "args": [
              "self",
              "order_id",
              "cpt_code"
            ],
            "docstring": "Get OTA rate for an order and CPT code.",
            "line_count": 5,
            "decorators": []
          },
          {
            "name": "_get_equivalent_code_rate",
            "args": [
              "self",
              "provider_tin",
              "cpt_code"
            ],
            "docstring": "Find rate for an equivalent code when the original code has no rate.\n\nArgs:\n    provider_tin: Provider TIN\n    cpt_code: CPT code to find equivalent for\n    \nReturns:\n    Dict with rate and equivalent code, or None if no equivalent rate found",
            "line_count": 7,
            "decorators": []
          },
          {
            "name": "_generate_messages",
            "args": [
              "self",
              "rate_results",
              "total_rate",
              "rate_sources",
              "bundle_name"
            ],
            "docstring": "Generate human-readable messages about rate validation results.\n\nArgs:\n    rate_results: List of rate validation results\n    total_rate: Total calculated rate\n    rate_sources: Dictionary of rate sources and counts\n    bundle_name: Name of the bundle if applicable\n    \nReturns:\n    List[str]: Human-readable messages",
            "line_count": 5,
            "decorators": []
          }
        ],
        "docstring": "Enhanced rate validator with bundle awareness and clinical equivalence support.",
        "inheritance": []
      },
      "UnitsValidator": {
        "type": "validator",
        "file": "core\\validators\\units_validator.py",
        "methods": [
          {
            "name": "__init__",
            "args": [
              "self",
              "dim_proc_df"
            ],
            "docstring": "Initialize the units validator.\n\nArgs:\n    dim_proc_df: DataFrame with procedure code information (optional)",
            "line_count": 5,
            "decorators": []
          },
          {
            "name": "get_proc_category",
            "args": [
              "self",
              "cpt"
            ],
            "docstring": "Get procedure category from reference data.\n\nArgs:\n    cpt: CPT code\n    \nReturns:\n    str: Procedure category or None if not found",
            "line_count": 7,
            "decorators": []
          },
          {
            "name": "is_ancillary",
            "args": [
              "self",
              "cpt"
            ],
            "docstring": "Check if a CPT code is ancillary.\n\nArgs:\n    cpt: CPT code\n    \nReturns:\n    bool: True if ancillary, False otherwise",
            "line_count": 3,
            "decorators": []
          },
          {
            "name": "get_max_units",
            "args": [
              "self",
              "cpt",
              "bundle_type"
            ],
            "docstring": "Get maximum allowed units for a CPT code.\n\nArgs:\n    cpt: CPT code\n    bundle_type: Bundle type (optional)\n    \nReturns:\n    int: Maximum allowed units",
            "line_count": 5,
            "decorators": []
          },
          {
            "name": "detect_bundle",
            "args": [
              "self",
              "line_items"
            ],
            "docstring": "Detect bundle type from line items.\n\nArgs:\n    line_items: List of line items\n    \nReturns:\n    Dict: Bundle detection result",
            "line_count": 12,
            "decorators": []
          },
          {
            "name": "validate",
            "args": [
              "self",
              "hcfa_data"
            ],
            "docstring": "Validate units in line items.\n\nArgs:\n    hcfa_data: HCFA data with line_items\n    \nReturns:\n    Dict: Validation results",
            "line_count": 2,
            "decorators": []
          }
        ],
        "docstring": "Validator for checking procedure code units.\nEnsures units are appropriate for the CPT codes, with special handling for bundles.",
        "inheritance": []
      }
    },
    "relationships": {
      "BillReviewApplication": [
        "uses:core.models.validation.ValidationResult",
        "uses:core.services.database.DatabaseService",
        "uses:core.validators.units_validator.UnitsValidator",
        "uses:core.models.validation.ValidationSession",
        "uses:core.validators.bundle_validator.BundleValidator",
        "uses:core.validators.modifier_validator.ModifierValidator",
        "uses:core.validators.intent_validator.ClinicalIntentValidator",
        "uses:utils.helpers.format_timestamp",
        "uses:core.validators.line_items.LineItemValidator",
        "uses:core.validators.rate_validator.RateValidator",
        "uses:core.services.reporter.ValidationReporter",
        "uses:core.services.normalizer.normalize_hcfa_format",
        "uses:utils.code_mapper.CodeMapper"
      ],
      "_LazyDescr": [
        "inherits_from:object"
      ],
      "MovedModule": [
        "inherits_from:_LazyDescr"
      ],
      "MovedAttribute": [
        "inherits_from:_LazyDescr"
      ],
      "_SixMetaPathImporter": [
        "inherits_from:object"
      ],
      "_MovedItems": [
        "inherits_from:_LazyModule"
      ],
      "Module_six_moves_urllib_parse": [
        "inherits_from:_LazyModule"
      ],
      "Module_six_moves_urllib_error": [
        "inherits_from:_LazyModule"
      ],
      "Module_six_moves_urllib_request": [
        "inherits_from:_LazyModule"
      ],
      "Module_six_moves_urllib_response": [
        "inherits_from:_LazyModule"
      ],
      "Module_six_moves_urllib_robotparser": [
        "inherits_from:_LazyModule"
      ],
      "Iterator": [
        "inherits_from:object"
      ],
      "metaclass": [
        "inherits_from:type"
      ],
      "X": [
        "inherits_from:object"
      ],
      "NamedSignal": [
        "inherits_from:Signal"
      ],
      "Context": [
        "uses:utils.internalcode",
        "uses:utils._detect_program_name",
        "uses:utils._PassArg",
        "uses:utils.make_str",
        "uses:utils.echo",
        "uses:utils.PacifyFlushWrapper",
        "uses:utils.object_type_repr",
        "uses:utils.concat",
        "uses:utils.pass_eval_context",
        "uses:utils.Namespace",
        "uses:utils.make_default_short_help",
        "uses:utils._expand_args",
        "uses:utils.missing"
      ],
      "BaseCommand": [
        "uses:utils._detect_program_name",
        "uses:utils.make_str",
        "uses:utils.echo",
        "uses:utils.PacifyFlushWrapper",
        "uses:utils.make_default_short_help",
        "uses:utils._expand_args"
      ],
      "Command": [
        "uses:utils._detect_program_name",
        "inherits_from:CommandContextMixIn",
        "uses:utils.make_str",
        "uses:utils.echo",
        "uses:utils.PacifyFlushWrapper",
        "inherits_from:BaseCommand",
        "uses:utils.make_default_short_help",
        "uses:utils._expand_args"
      ],
      "MultiCommand": [
        "uses:utils._detect_program_name",
        "uses:utils.make_str",
        "uses:utils.echo",
        "uses:utils.PacifyFlushWrapper",
        "uses:utils.make_default_short_help",
        "uses:utils._expand_args",
        "inherits_from:Command"
      ],
      "Group": [
        "uses:utils._detect_program_name",
        "inherits_from:MultiCommand",
        "uses:utils.make_str",
        "uses:utils.echo",
        "uses:utils.PacifyFlushWrapper",
        "uses:utils.make_default_short_help",
        "uses:utils._expand_args"
      ],
      "CommandCollection": [
        "uses:utils._detect_program_name",
        "inherits_from:MultiCommand",
        "uses:utils.make_str",
        "uses:utils.echo",
        "uses:utils.PacifyFlushWrapper",
        "uses:utils.make_default_short_help",
        "uses:utils._expand_args"
      ],
      "Parameter": [
        "uses:utils._detect_program_name",
        "uses:utils.make_str",
        "uses:utils.echo",
        "uses:utils.PacifyFlushWrapper",
        "uses:utils.make_default_short_help",
        "uses:utils._expand_args"
      ],
      "Option": [
        "uses:core.Argument",
        "uses:utils._detect_program_name",
        "uses:utils.make_str",
        "uses:utils.echo",
        "uses:utils.PacifyFlushWrapper",
        "inherits_from:Parameter",
        "uses:core.Option",
        "uses:core.Context",
        "uses:utils.make_default_short_help",
        "uses:utils._expand_args",
        "uses:core.Parameter"
      ],
      "Argument": [
        "uses:core.Argument",
        "uses:utils._detect_program_name",
        "uses:utils.make_str",
        "uses:utils.echo",
        "uses:utils.PacifyFlushWrapper",
        "inherits_from:Parameter",
        "uses:core.Option",
        "uses:core.Context",
        "uses:utils.make_default_short_help",
        "uses:utils._expand_args",
        "uses:core.Parameter"
      ],
      "HelpOption": [
        "uses:core.Group",
        "uses:core.Argument",
        "uses:core.Command",
        "uses:utils.echo",
        "uses:core.Option",
        "uses:core.Context",
        "uses:core.Parameter",
        "inherits_from:Option"
      ],
      "ClickException": [
        "uses:utils.format_filename",
        "uses:core.Command",
        "uses:utils.echo",
        "uses:core.Context",
        "inherits_from:Exception",
        "uses:core.Parameter"
      ],
      "UsageError": [
        "uses:utils.format_filename",
        "uses:core.Command",
        "uses:utils.echo",
        "uses:core.Context",
        "uses:core.Parameter",
        "inherits_from:ClickException"
      ],
      "BadParameter": [
        "uses:utils.format_filename",
        "uses:core.Command",
        "uses:utils.echo",
        "inherits_from:UsageError",
        "uses:core.Context",
        "uses:core.Parameter"
      ],
      "MissingParameter": [
        "uses:utils.format_filename",
        "uses:core.Command",
        "uses:utils.echo",
        "uses:core.Context",
        "uses:core.Parameter",
        "inherits_from:BadParameter"
      ],
      "NoSuchOption": [
        "uses:utils.format_filename",
        "uses:core.Command",
        "uses:utils.echo",
        "inherits_from:UsageError",
        "uses:core.Context",
        "uses:core.Parameter"
      ],
      "BadOptionUsage": [
        "uses:utils.format_filename",
        "uses:core.Command",
        "uses:utils.echo",
        "inherits_from:UsageError",
        "uses:core.Context",
        "uses:core.Parameter"
      ],
      "BadArgumentUsage": [
        "inherits_from:UsageError"
      ],
      "FileError": [
        "uses:utils.format_filename",
        "uses:core.Command",
        "uses:utils.echo",
        "uses:core.Context",
        "uses:core.Parameter",
        "inherits_from:ClickException"
      ],
      "Abort": [
        "inherits_from:RuntimeError"
      ],
      "Exit": [
        "inherits_from:RuntimeError",
        "uses:utils.format_filename",
        "uses:core.Command",
        "uses:utils.echo",
        "uses:core.Context",
        "uses:core.Parameter"
      ],
      "ParsingState": [
        "uses:core.Argument",
        "uses:core.Context",
        "uses:core.Parameter",
        "uses:core.Option"
      ],
      "OptionParser": [
        "uses:core.Argument",
        "uses:core.Context",
        "uses:core.Parameter",
        "uses:core.Option"
      ],
      "CompletionItem": [
        "uses:core.Argument",
        "uses:core.BaseCommand",
        "uses:core.MultiCommand",
        "uses:core.ParameterSource",
        "uses:utils.echo",
        "uses:core.Option",
        "uses:core.Context",
        "uses:core.Parameter"
      ],
      "ShellComplete": [
        "uses:core.Argument",
        "uses:core.BaseCommand",
        "uses:core.MultiCommand",
        "uses:core.ParameterSource",
        "uses:utils.echo",
        "uses:core.Option",
        "uses:core.Context",
        "uses:core.Parameter"
      ],
      "BashComplete": [
        "uses:core.Argument",
        "uses:core.BaseCommand",
        "uses:core.MultiCommand",
        "uses:core.ParameterSource",
        "uses:utils.echo",
        "uses:core.Option",
        "uses:core.Context",
        "uses:core.Parameter",
        "inherits_from:ShellComplete"
      ],
      "ZshComplete": [
        "uses:core.Argument",
        "uses:core.BaseCommand",
        "uses:core.MultiCommand",
        "uses:core.ParameterSource",
        "uses:utils.echo",
        "uses:core.Option",
        "uses:core.Context",
        "uses:core.Parameter",
        "inherits_from:ShellComplete"
      ],
      "FishComplete": [
        "uses:core.Argument",
        "uses:core.BaseCommand",
        "uses:core.MultiCommand",
        "uses:core.ParameterSource",
        "uses:utils.echo",
        "uses:core.Option",
        "uses:core.Context",
        "uses:core.Parameter",
        "inherits_from:ShellComplete"
      ],
      "EchoingStdin": [
        "uses:core.BaseCommand"
      ],
      "_NamedTextIOWrapper": [
        "uses:core.BaseCommand"
      ],
      "Result": [
        "uses:core.BaseCommand"
      ],
      "CliRunner": [
        "uses:core.BaseCommand"
      ],
      "ParamType": [
        "uses:utils.format_filename",
        "uses:utils.safecall",
        "uses:core.Context",
        "uses:utils.LazyFile",
        "uses:core.Parameter"
      ],
      "CompositeParamType": [
        "uses:utils.format_filename",
        "uses:utils.safecall",
        "uses:utils.LazyFile",
        "inherits_from:ParamType",
        "uses:core.Context",
        "uses:core.Parameter"
      ],
      "FuncParamType": [
        "uses:utils.format_filename",
        "uses:utils.safecall",
        "uses:utils.LazyFile",
        "inherits_from:ParamType",
        "uses:core.Context",
        "uses:core.Parameter"
      ],
      "UnprocessedParamType": [
        "uses:utils.format_filename",
        "uses:utils.safecall",
        "uses:utils.LazyFile",
        "inherits_from:ParamType",
        "uses:core.Context",
        "uses:core.Parameter"
      ],
      "StringParamType": [
        "uses:utils.format_filename",
        "uses:utils.safecall",
        "uses:utils.LazyFile",
        "inherits_from:ParamType",
        "uses:core.Context",
        "uses:core.Parameter"
      ],
      "Choice": [
        "uses:utils.format_filename",
        "uses:utils.safecall",
        "uses:utils.LazyFile",
        "inherits_from:ParamType",
        "uses:core.Context",
        "uses:core.Parameter"
      ],
      "DateTime": [
        "inherits_from:Typed",
        "uses:utils.format_filename",
        "uses:utils.safecall",
        "uses:utils.LazyFile",
        "inherits_from:ParamType",
        "uses:core.Context",
        "uses:core.Parameter"
      ],
      "_NumberParamTypeBase": [
        "uses:utils.format_filename",
        "uses:utils.safecall",
        "uses:utils.LazyFile",
        "inherits_from:ParamType",
        "uses:core.Context",
        "uses:core.Parameter"
      ],
      "_NumberRangeBase": [
        "uses:utils.format_filename",
        "inherits_from:_NumberParamTypeBase",
        "uses:utils.safecall",
        "uses:utils.LazyFile",
        "uses:core.Context",
        "uses:core.Parameter"
      ],
      "IntParamType": [
        "uses:utils.format_filename",
        "inherits_from:_NumberParamTypeBase",
        "uses:utils.safecall",
        "uses:utils.LazyFile",
        "uses:core.Context",
        "uses:core.Parameter"
      ],
      "IntRange": [
        "uses:utils.format_filename",
        "uses:core.Parameter",
        "uses:utils.safecall",
        "uses:utils.LazyFile",
        "uses:core.Context",
        "inherits_from:_NumberRangeBase",
        "inherits_from:IntParamType"
      ],
      "FloatParamType": [
        "uses:utils.format_filename",
        "inherits_from:_NumberParamTypeBase",
        "uses:utils.safecall",
        "uses:utils.LazyFile",
        "uses:core.Context",
        "uses:core.Parameter"
      ],
      "FloatRange": [
        "uses:utils.format_filename",
        "uses:utils.safecall",
        "uses:utils.LazyFile",
        "uses:core.Context",
        "inherits_from:FloatParamType",
        "inherits_from:_NumberRangeBase",
        "uses:core.Parameter"
      ],
      "BoolParamType": [
        "uses:utils.format_filename",
        "uses:utils.safecall",
        "uses:utils.LazyFile",
        "inherits_from:ParamType",
        "uses:core.Context",
        "uses:core.Parameter"
      ],
      "UUIDParameterType": [
        "uses:utils.format_filename",
        "uses:utils.safecall",
        "uses:utils.LazyFile",
        "inherits_from:ParamType",
        "uses:core.Context",
        "uses:core.Parameter"
      ],
      "File": [
        "uses:utils.format_filename",
        "inherits_from:Protocol",
        "inherits_from:Event",
        "uses:utils.safecall",
        "uses:utils.LazyFile",
        "inherits_from:ParamType",
        "uses:core.Context",
        "uses:core.Parameter"
      ],
      "Path": [
        "uses:utils.format_filename",
        "uses:utils.safecall",
        "uses:utils.LazyFile",
        "inherits_from:ParamType",
        "uses:core.Context",
        "uses:core.Parameter"
      ],
      "Tuple": [
        "inherits_from:Typed",
        "inherits_from:CompositeParamType",
        "uses:utils.format_filename",
        "inherits_from:Serialisable",
        "uses:utils._PassArg",
        "uses:utils.safecall",
        "uses:utils.LazyFile",
        "uses:core.Context",
        "uses:core.Parameter",
        "inherits_from:Literal"
      ],
      "ProgressBar": [
        "inherits_from:JupyterMixin",
        "uses:utils.echo"
      ],
      "Editor": [
        "uses:utils.echo"
      ],
      "_WindowsConsoleReader": [
        "inherits_from:_WindowsConsoleRawIOBase"
      ],
      "_WindowsConsoleWriter": [
        "inherits_from:_WindowsConsoleRawIOBase"
      ],
      "Py_buffer": [
        "inherits_from:Structure"
      ],
      "AnsiCodes": [
        "inherits_from:object"
      ],
      "AnsiCursor": [
        "inherits_from:object"
      ],
      "AnsiFore": [
        "inherits_from:AnsiCodes"
      ],
      "AnsiBack": [
        "inherits_from:AnsiCodes"
      ],
      "AnsiStyle": [
        "inherits_from:AnsiCodes"
      ],
      "StreamWrapper": [
        "inherits_from:object",
        "inherits_from:StringIO"
      ],
      "AnsiToWin32": [
        "inherits_from:object"
      ],
      "CONSOLE_SCREEN_BUFFER_INFO": [
        "inherits_from:Structure"
      ],
      "WinColor": [
        "inherits_from:object"
      ],
      "WinStyle": [
        "inherits_from:object"
      ],
      "WinTerm": [
        "inherits_from:object"
      ],
      "relativedelta": [
        "inherits_from:object"
      ],
      "weekday": [
        "inherits_from:object",
        "inherits_from:weekdaybase"
      ],
      "rrulebase": [
        "inherits_from:object"
      ],
      "rrule": [
        "inherits_from:rrulebase"
      ],
      "_iterinfo": [
        "inherits_from:object"
      ],
      "rruleset": [
        "inherits_from:rrulebase"
      ],
      "_rrulestr": [
        "inherits_from:object"
      ],
      "_genitem": [
        "inherits_from:object"
      ],
      "IPythonDotEnv": [
        "inherits_from:Magics"
      ],
      "Original": [
        "inherits_from:NamedTuple"
      ],
      "Binding": [
        "inherits_from:NamedTuple"
      ],
      "Error": [
        "inherits_from:Exception",
        "inherits_from:Serialisable"
      ],
      "Literal": [
        "inherits_from:Atom",
        "inherits_from:Expr"
      ],
      "Variable": [
        "inherits_from:Atom",
        "inherits_from:Node"
      ],
      "LxmlSyntaxError": [
        "inherits_from:Exception"
      ],
      "_IncrementalFileWriter": [
        "inherits_from:object"
      ],
      "xmlfile": [
        "inherits_from:object"
      ],
      "Flask": [
        "inherits_from:App"
      ],
      "Blueprint": [
        "inherits_from:Scaffold",
        "inherits_from:SansioBlueprint"
      ],
      "FlaskGroup": [
        "inherits_from:AppGroup"
      ],
      "Config": [
        "inherits_from:dict"
      ],
      "UnexpectedUnicodeError": [
        "inherits_from:AssertionError",
        "inherits_from:UnicodeError"
      ],
      "DebugFilesKeyError": [
        "inherits_from:AssertionError",
        "inherits_from:KeyError"
      ],
      "FormDataRoutingRedirect": [
        "inherits_from:AssertionError"
      ],
      "newcls": [
        "inherits_from:oldcls"
      ],
      "SessionMixin": [
        "inherits_from:MutableMapping"
      ],
      "SecureCookieSession": [
        "inherits_from:CallbackDict",
        "inherits_from:SessionMixin"
      ],
      "NullSession": [
        "inherits_from:SecureCookieSession"
      ],
      "SecureCookieSessionInterface": [
        "inherits_from:SessionInterface"
      ],
      "Environment": [
        "uses:utils.internalcode",
        "inherits_from:BaseEnvironment",
        "uses:utils._PassArg",
        "uses:utils.import_string",
        "uses:utils.concat",
        "uses:utils.LRUCache",
        "inherits_from:TypedDict",
        "uses:utils.consume",
        "uses:utils.missing"
      ],
      "DispatchingJinjaLoader": [
        "inherits_from:BaseLoader"
      ],
      "FlaskClient": [
        "inherits_from:Client"
      ],
      "FlaskCliRunner": [
        "inherits_from:CliRunner"
      ],
      "MethodView": [
        "inherits_from:View"
      ],
      "Request": [
        "uses:utils.super_len",
        "uses:utils.check_header_validity",
        "uses:utils.guess_filename",
        "uses:utils.iter_slices",
        "uses:utils.stream_decode_response_unicode",
        "uses:utils.guess_json_utf",
        "uses:utils.parse_header_links",
        "inherits_from:_SansIORequest",
        "uses:utils.cached_property",
        "uses:utils.to_key_val_list",
        "uses:utils.get_content_length",
        "uses:utils.header_property",
        "inherits_from:RequestBase",
        "uses:utils.requote_uri",
        "uses:utils.get_auth_from_url",
        "uses:utils.get_host",
        "uses:utils.get_current_url",
        "uses:utils.environ_property",
        "inherits_from:RequestHooksMixin"
      ],
      "Response": [
        "uses:utils.cached_property",
        "uses:utils.super_len",
        "uses:utils.iter_slices",
        "uses:utils.get_content_type",
        "uses:utils.check_header_validity",
        "uses:utils.to_key_val_list",
        "uses:utils.requote_uri",
        "inherits_from:ResponseBase",
        "uses:utils.stream_decode_response_unicode",
        "uses:utils.guess_json_utf",
        "uses:utils.parse_header_links",
        "uses:utils.get_auth_from_url",
        "uses:utils.guess_filename",
        "inherits_from:_SansIOResponse",
        "uses:utils.header_property"
      ],
      "CORS": [
        "uses:core.get_regexp_pattern",
        "uses:core.try_match",
        "uses:core.get_cors_options",
        "uses:core.parse_resources",
        "uses:core.ACL_ORIGIN",
        "uses:core.set_cors_headers"
      ],
      "StringProcessor": [
        "inherits_from:object"
      ],
      "BadData": [
        "inherits_from:Exception"
      ],
      "BadSignature": [
        "inherits_from:BadData"
      ],
      "BadTimeSignature": [
        "inherits_from:BadSignature"
      ],
      "SignatureExpired": [
        "inherits_from:BadTimeSignature"
      ],
      "BadHeader": [
        "inherits_from:BadSignature"
      ],
      "BadPayload": [
        "inherits_from:BadData"
      ],
      "NoneAlgorithm": [
        "inherits_from:SigningAlgorithm"
      ],
      "HMACAlgorithm": [
        "inherits_from:SigningAlgorithm"
      ],
      "TimestampSigner": [
        "inherits_from:Signer"
      ],
      "URLSafeSerializer": [
        "inherits_from:URLSafeSerializerMixin"
      ],
      "URLSafeTimedSerializer": [
        "inherits_from:URLSafeSerializerMixin"
      ],
      "_IteratorToAsyncIterator": [
        "uses:utils._PassArg",
        "uses:utils.pass_eval_context"
      ],
      "FileSystemBytecodeCache": [
        "inherits_from:BytecodeCache"
      ],
      "MemcachedBytecodeCache": [
        "inherits_from:BytecodeCache"
      ],
      "MacroRef": [
        "uses:utils.concat",
        "uses:utils._PassArg"
      ],
      "Frame": [
        "uses:utils.concat",
        "uses:utils._PassArg"
      ],
      "VisitorExit": [
        "inherits_from:RuntimeError"
      ],
      "DependencyFinderVisitor": [
        "uses:utils.concat",
        "uses:utils._PassArg",
        "inherits_from:NodeVisitor"
      ],
      "UndeclaredNameVisitor": [
        "uses:utils.concat",
        "uses:utils._PassArg",
        "inherits_from:NodeVisitor"
      ],
      "CompilerExit": [
        "inherits_from:Exception"
      ],
      "CodeGenerator": [
        "uses:utils.concat",
        "uses:utils._PassArg",
        "inherits_from:NodeVisitor"
      ],
      "Template": [
        "uses:utils.internalcode",
        "uses:utils._PassArg",
        "uses:utils.import_string",
        "uses:utils.concat",
        "uses:utils.LRUCache",
        "uses:utils.consume",
        "inherits_from:Node",
        "uses:utils.missing"
      ],
      "TemplateModule": [
        "uses:utils.internalcode",
        "uses:utils._PassArg",
        "uses:utils.import_string",
        "uses:utils.concat",
        "uses:utils.LRUCache",
        "uses:utils.consume",
        "uses:utils.missing"
      ],
      "TemplateExpression": [
        "uses:utils.internalcode",
        "uses:utils._PassArg",
        "uses:utils.import_string",
        "uses:utils.concat",
        "uses:utils.LRUCache",
        "uses:utils.consume",
        "uses:utils.missing"
      ],
      "TemplateStream": [
        "uses:utils.internalcode",
        "uses:utils._PassArg",
        "uses:utils.import_string",
        "uses:utils.concat",
        "uses:utils.LRUCache",
        "uses:utils.consume",
        "uses:utils.missing"
      ],
      "TemplateError": [
        "inherits_from:Exception"
      ],
      "TemplateNotFound": [
        "inherits_from:LookupError",
        "inherits_from:TemplateError",
        "inherits_from:IOError"
      ],
      "TemplatesNotFound": [
        "inherits_from:TemplateNotFound"
      ],
      "TemplateSyntaxError": [
        "inherits_from:TemplateError"
      ],
      "TemplateAssertionError": [
        "inherits_from:TemplateSyntaxError"
      ],
      "TemplateRuntimeError": [
        "inherits_from:TemplateError"
      ],
      "UndefinedError": [
        "inherits_from:TemplateRuntimeError"
      ],
      "SecurityError": [
        "inherits_from:BadRequest",
        "inherits_from:TemplateRuntimeError"
      ],
      "FilterArgumentError": [
        "inherits_from:TemplateRuntimeError"
      ],
      "Extension": [
        "uses:utils.pass_context",
        "uses:utils.import_string",
        "inherits_from:Serialisable"
      ],
      "InternationalizationExtension": [
        "uses:utils.pass_context",
        "uses:utils.import_string",
        "inherits_from:Extension"
      ],
      "ExprStmtExtension": [
        "uses:utils.pass_context",
        "uses:utils.import_string",
        "inherits_from:Extension"
      ],
      "LoopControlExtension": [
        "uses:utils.pass_context",
        "uses:utils.import_string",
        "inherits_from:Extension"
      ],
      "DebugExtension": [
        "uses:utils.pass_context",
        "uses:utils.import_string",
        "inherits_from:Extension"
      ],
      "_CommentFinder": [
        "uses:utils.pass_context",
        "uses:utils.import_string"
      ],
      "_TranslationsBasic": [
        "uses:utils.pass_context",
        "uses:utils.import_string"
      ],
      "_TranslationsContext": [
        "uses:utils.pass_context",
        "uses:utils.import_string",
        "inherits_from:_TranslationsBasic"
      ],
      "_GroupTuple": [
        "uses:utils.pass_context",
        "uses:utils.pformat",
        "uses:utils.htmlsafe_json_dumps",
        "uses:utils.url_quote",
        "uses:utils.urlize",
        "uses:utils.pass_environment",
        "uses:utils.pass_eval_context"
      ],
      "HasHTML": [
        "uses:utils.pass_context",
        "uses:utils.pformat",
        "uses:utils.htmlsafe_json_dumps",
        "uses:utils.url_quote",
        "uses:utils.urlize",
        "uses:utils.pass_environment",
        "uses:utils.pass_eval_context"
      ],
      "RootVisitor": [
        "inherits_from:NodeVisitor"
      ],
      "FrameSymbolVisitor": [
        "inherits_from:NodeVisitor"
      ],
      "Failure": [
        "uses:utils.LRUCache"
      ],
      "Token": [
        "uses:utils.LRUCache"
      ],
      "TokenStreamIterator": [
        "uses:utils.LRUCache"
      ],
      "TokenStream": [
        "uses:utils.LRUCache"
      ],
      "OptionalLStrip": [
        "inherits_from:tuple",
        "uses:utils.LRUCache"
      ],
      "Lexer": [
        "uses:utils.LRUCache"
      ],
      "BaseLoader": [
        "uses:utils.internalcode"
      ],
      "FileSystemLoader": [
        "uses:utils.internalcode",
        "inherits_from:BaseLoader"
      ],
      "PackageLoader": [
        "uses:utils.internalcode",
        "inherits_from:BaseLoader"
      ],
      "DictLoader": [
        "uses:utils.internalcode",
        "inherits_from:BaseLoader"
      ],
      "FunctionLoader": [
        "uses:utils.internalcode",
        "inherits_from:BaseLoader"
      ],
      "PrefixLoader": [
        "uses:utils.internalcode",
        "inherits_from:BaseLoader"
      ],
      "ChoiceLoader": [
        "uses:utils.internalcode",
        "inherits_from:BaseLoader"
      ],
      "_TemplateModule": [
        "inherits_from:ModuleType"
      ],
      "ModuleLoader": [
        "uses:utils.internalcode",
        "inherits_from:BaseLoader"
      ],
      "TrackingCodeGenerator": [
        "inherits_from:CodeGenerator"
      ],
      "NativeCodeGenerator": [
        "inherits_from:CodeGenerator"
      ],
      "NativeEnvironment": [
        "inherits_from:Environment"
      ],
      "NativeTemplate": [
        "inherits_from:Template"
      ],
      "Impossible": [
        "inherits_from:Exception"
      ],
      "NodeType": [
        "uses:utils._PassArg",
        "inherits_from:type"
      ],
      "EvalContext": [
        "uses:utils._PassArg"
      ],
      "Node": [
        "uses:utils._PassArg"
      ],
      "Stmt": [
        "inherits_from:Node"
      ],
      "Helper": [
        "inherits_from:Node"
      ],
      "Output": [
        "inherits_from:NamedTuple",
        "inherits_from:Stmt"
      ],
      "Extends": [
        "inherits_from:Stmt"
      ],
      "For": [
        "inherits_from:Stmt"
      ],
      "If": [
        "inherits_from:Stmt"
      ],
      "Macro": [
        "uses:utils.internalcode",
        "uses:utils._PassArg",
        "uses:utils.object_type_repr",
        "inherits_from:Stmt",
        "uses:utils.concat",
        "uses:utils.pass_eval_context",
        "uses:utils.Namespace",
        "uses:utils.missing"
      ],
      "CallBlock": [
        "inherits_from:Stmt"
      ],
      "FilterBlock": [
        "inherits_from:Stmt"
      ],
      "With": [
        "inherits_from:Stmt"
      ],
      "Block": [
        "inherits_from:PandasObject",
        "inherits_from:Stmt"
      ],
      "Include": [
        "inherits_from:Stmt"
      ],
      "Import": [
        "inherits_from:Stmt"
      ],
      "FromImport": [
        "inherits_from:Stmt"
      ],
      "ExprStmt": [
        "inherits_from:Stmt"
      ],
      "Assign": [
        "inherits_from:Stmt"
      ],
      "AssignBlock": [
        "inherits_from:Stmt"
      ],
      "Expr": [
        "uses:utils._PassArg",
        "inherits_from:Node"
      ],
      "BinExpr": [
        "uses:utils._PassArg",
        "inherits_from:Expr"
      ],
      "UnaryExpr": [
        "uses:utils._PassArg",
        "inherits_from:Expr"
      ],
      "Name": [
        "uses:utils._PassArg",
        "inherits_from:Expr"
      ],
      "NSRef": [
        "uses:utils._PassArg",
        "inherits_from:Expr"
      ],
      "Const": [
        "uses:utils._PassArg",
        "inherits_from:Literal"
      ],
      "TemplateData": [
        "uses:utils._PassArg",
        "inherits_from:Literal"
      ],
      "List": [
        "uses:utils._PassArg",
        "inherits_from:list",
        "inherits_from:Literal"
      ],
      "Dict": [
        "uses:utils._PassArg",
        "inherits_from:Literal"
      ],
      "Pair": [
        "uses:utils._PassArg",
        "inherits_from:Helper"
      ],
      "Keyword": [
        "uses:utils._PassArg",
        "inherits_from:Helper"
      ],
      "CondExpr": [
        "uses:utils._PassArg",
        "inherits_from:Expr"
      ],
      "_FilterTestCommon": [
        "uses:utils._PassArg",
        "inherits_from:Expr"
      ],
      "Filter": [
        "uses:utils._PassArg",
        "inherits_from:_FilterTestCommon"
      ],
      "Test": [
        "inherits_from:_FilterTestCommon",
        "inherits_from:BaseModel"
      ],
      "Call": [
        "inherits_from:Expr"
      ],
      "Getitem": [
        "uses:utils._PassArg",
        "inherits_from:Expr"
      ],
      "Getattr": [
        "uses:utils._PassArg",
        "inherits_from:Expr"
      ],
      "Slice": [
        "uses:utils._PassArg",
        "inherits_from:Expr"
      ],
      "Concat": [
        "uses:utils._PassArg",
        "inherits_from:Expr"
      ],
      "Compare": [
        "uses:utils._PassArg",
        "inherits_from:Expr"
      ],
      "Operand": [
        "inherits_from:Helper"
      ],
      "Mul": [
        "inherits_from:BinExpr"
      ],
      "Div": [
        "inherits_from:BinExpr"
      ],
      "FloorDiv": [
        "inherits_from:BinExpr"
      ],
      "Add": [
        "inherits_from:BinExpr"
      ],
      "Sub": [
        "inherits_from:BinExpr"
      ],
      "Mod": [
        "inherits_from:BinExpr"
      ],
      "Pow": [
        "inherits_from:BinExpr"
      ],
      "And": [
        "uses:utils._PassArg",
        "inherits_from:BinExpr"
      ],
      "Or": [
        "uses:utils._PassArg",
        "inherits_from:BinExpr"
      ],
      "Not": [
        "inherits_from:UnaryExpr"
      ],
      "Neg": [
        "inherits_from:UnaryExpr"
      ],
      "Pos": [
        "inherits_from:UnaryExpr"
      ],
      "EnvironmentAttribute": [
        "inherits_from:Expr"
      ],
      "ExtensionAttribute": [
        "inherits_from:Expr"
      ],
      "ImportedName": [
        "inherits_from:Expr"
      ],
      "InternalName": [
        "uses:utils._PassArg",
        "inherits_from:Expr"
      ],
      "MarkSafe": [
        "uses:utils._PassArg",
        "inherits_from:Expr"
      ],
      "MarkSafeIfAutoescape": [
        "uses:utils._PassArg",
        "inherits_from:Expr"
      ],
      "ContextReference": [
        "inherits_from:Expr"
      ],
      "DerivedContextReference": [
        "inherits_from:Expr"
      ],
      "Continue": [
        "inherits_from:Stmt"
      ],
      "Break": [
        "inherits_from:Serialisable",
        "inherits_from:Stmt"
      ],
      "Scope": [
        "inherits_from:Stmt"
      ],
      "OverlayScope": [
        "inherits_from:Stmt"
      ],
      "EvalContextModifier": [
        "inherits_from:Stmt"
      ],
      "ScopedEvalContextModifier": [
        "inherits_from:EvalContextModifier"
      ],
      "Optimizer": [
        "inherits_from:NodeTransformer"
      ],
      "TemplateReference": [
        "uses:utils.internalcode",
        "uses:utils._PassArg",
        "uses:utils.object_type_repr",
        "uses:utils.concat",
        "uses:utils.pass_eval_context",
        "uses:utils.Namespace",
        "uses:utils.missing"
      ],
      "BlockReference": [
        "uses:utils.internalcode",
        "uses:utils._PassArg",
        "uses:utils.object_type_repr",
        "uses:utils.concat",
        "uses:utils.pass_eval_context",
        "uses:utils.Namespace",
        "uses:utils.missing"
      ],
      "LoopContext": [
        "uses:utils.internalcode",
        "uses:utils._PassArg",
        "uses:utils.object_type_repr",
        "uses:utils.concat",
        "uses:utils.pass_eval_context",
        "uses:utils.Namespace",
        "uses:utils.missing"
      ],
      "AsyncLoopContext": [
        "uses:utils.internalcode",
        "inherits_from:LoopContext",
        "uses:utils._PassArg",
        "uses:utils.object_type_repr",
        "uses:utils.concat",
        "uses:utils.pass_eval_context",
        "uses:utils.Namespace",
        "uses:utils.missing"
      ],
      "Undefined": [
        "uses:utils.internalcode",
        "uses:utils._PassArg",
        "uses:utils.object_type_repr",
        "uses:utils.concat",
        "uses:utils.pass_eval_context",
        "uses:utils.Namespace",
        "uses:utils.missing"
      ],
      "ChainableUndefined": [
        "uses:utils.internalcode",
        "uses:utils._PassArg",
        "uses:utils.object_type_repr",
        "uses:utils.concat",
        "inherits_from:Undefined",
        "uses:utils.pass_eval_context",
        "uses:utils.Namespace",
        "uses:utils.missing"
      ],
      "DebugUndefined": [
        "uses:utils.internalcode",
        "uses:utils._PassArg",
        "uses:utils.object_type_repr",
        "uses:utils.concat",
        "inherits_from:Undefined",
        "uses:utils.pass_eval_context",
        "uses:utils.Namespace",
        "uses:utils.missing"
      ],
      "StrictUndefined": [
        "inherits_from:Undefined"
      ],
      "LoopRenderFunc": [
        "uses:utils.internalcode",
        "uses:utils._PassArg",
        "uses:utils.object_type_repr",
        "uses:utils.concat",
        "uses:utils.pass_eval_context",
        "uses:utils.Namespace",
        "uses:utils.missing"
      ],
      "LoggingUndefined": [
        "uses:utils.internalcode",
        "uses:utils._PassArg",
        "uses:utils.object_type_repr",
        "uses:utils.concat",
        "inherits_from:base",
        "uses:utils.pass_eval_context",
        "uses:utils.Namespace",
        "uses:utils.missing"
      ],
      "SandboxedEnvironment": [
        "inherits_from:Environment"
      ],
      "ImmutableSandboxedEnvironment": [
        "inherits_from:SandboxedEnvironment"
      ],
      "SandboxedFormatter": [
        "inherits_from:Formatter"
      ],
      "SandboxedEscapeFormatter": [
        "inherits_from:EscapeFormatter",
        "inherits_from:SandboxedFormatter"
      ],
      "NodeTransformer": [
        "inherits_from:NodeVisitor"
      ],
      "Markup": [
        "inherits_from:str"
      ],
      "_ndptr": [
        "inherits_from:_ndptr_base"
      ],
      "_concrete_ndptr": [
        "inherits_from:_ndptr"
      ],
      "ComplexWarning": [
        "inherits_from:RuntimeWarning"
      ],
      "ModuleDeprecationWarning": [
        "inherits_from:DeprecationWarning"
      ],
      "VisibleDeprecationWarning": [
        "inherits_from:UserWarning"
      ],
      "RankWarning": [
        "inherits_from:RuntimeWarning"
      ],
      "TooHardError": [
        "inherits_from:RuntimeError"
      ],
      "AxisError": [
        "inherits_from:IndexError",
        "inherits_from:ValueError"
      ],
      "DTypePromotionError": [
        "inherits_from:TypeError"
      ],
      "DisplayModes": [
        "inherits_from:Enum"
      ],
      "TestSubDict": [
        "inherits_from:dict"
      ],
      "BaseBuffer": [
        "inherits_from:Protocol"
      ],
      "ReadBuffer": [
        "inherits_from:BaseBuffer"
      ],
      "WriteBuffer": [
        "inherits_from:BaseBuffer"
      ],
      "ReadPickleBuffer": [
        "inherits_from:Protocol"
      ],
      "WriteExcelBuffer": [
        "inherits_from:Protocol"
      ],
      "ReadCsvBuffer": [
        "inherits_from:Protocol"
      ],
      "NotThisMethod": [
        "inherits_from:Exception"
      ],
      "UnknownTimeZoneError": [
        "inherits_from:KeyError",
        "inherits_from:Error"
      ],
      "InvalidTimeError": [
        "inherits_from:Error"
      ],
      "AmbiguousTimeError": [
        "inherits_from:InvalidTimeError"
      ],
      "NonExistentTimeError": [
        "inherits_from:InvalidTimeError"
      ],
      "LazyDict": [
        "inherits_from:DictMixin"
      ],
      "LazyList": [
        "inherits_from:list"
      ],
      "LazySet": [
        "inherits_from:set"
      ],
      "FixedOffset": [
        "inherits_from:tzinfo"
      ],
      "LocalTimezone": [
        "inherits_from:tzinfo"
      ],
      "USTimeZone": [
        "inherits_from:tzinfo"
      ],
      "BaseTzInfo": [
        "inherits_from:tzinfo"
      ],
      "StaticTzInfo": [
        "inherits_from:BaseTzInfo"
      ],
      "DstTzInfo": [
        "inherits_from:BaseTzInfo"
      ],
      "UTC": [
        "inherits_from:BaseTzInfo"
      ],
      "_CountryTimezoneDict": [
        "inherits_from:LazyDict"
      ],
      "_CountryNameDict": [
        "inherits_from:LazyDict"
      ],
      "HTTPException": [
        "inherits_from:Exception"
      ],
      "BadRequest": [
        "inherits_from:HTTPException"
      ],
      "BadRequestKeyError": [
        "inherits_from:BadRequest",
        "inherits_from:KeyError"
      ],
      "ClientDisconnected": [
        "inherits_from:BadRequest"
      ],
      "BadHost": [
        "inherits_from:BadRequest"
      ],
      "Unauthorized": [
        "inherits_from:HTTPException"
      ],
      "Forbidden": [
        "inherits_from:HTTPException"
      ],
      "NotFound": [
        "inherits_from:HTTPException"
      ],
      "MethodNotAllowed": [
        "inherits_from:HTTPException"
      ],
      "NotAcceptable": [
        "inherits_from:HTTPException"
      ],
      "RequestTimeout": [
        "inherits_from:HTTPException"
      ],
      "Conflict": [
        "inherits_from:HTTPException"
      ],
      "Gone": [
        "inherits_from:HTTPException"
      ],
      "LengthRequired": [
        "inherits_from:HTTPException"
      ],
      "PreconditionFailed": [
        "inherits_from:HTTPException"
      ],
      "RequestEntityTooLarge": [
        "inherits_from:HTTPException"
      ],
      "RequestURITooLarge": [
        "inherits_from:HTTPException"
      ],
      "UnsupportedMediaType": [
        "inherits_from:HTTPException"
      ],
      "RequestedRangeNotSatisfiable": [
        "inherits_from:HTTPException"
      ],
      "ExpectationFailed": [
        "inherits_from:HTTPException"
      ],
      "ImATeapot": [
        "inherits_from:HTTPException"
      ],
      "MisdirectedRequest": [
        "inherits_from:HTTPException"
      ],
      "UnprocessableEntity": [
        "inherits_from:HTTPException"
      ],
      "Locked": [
        "inherits_from:HTTPException"
      ],
      "FailedDependency": [
        "inherits_from:HTTPException"
      ],
      "PreconditionRequired": [
        "inherits_from:HTTPException"
      ],
      "_RetryAfter": [
        "inherits_from:HTTPException"
      ],
      "TooManyRequests": [
        "inherits_from:_RetryAfter"
      ],
      "RequestHeaderFieldsTooLarge": [
        "inherits_from:HTTPException"
      ],
      "UnavailableForLegalReasons": [
        "inherits_from:HTTPException"
      ],
      "InternalServerError": [
        "inherits_from:HTTPException"
      ],
      "NotImplemented": [
        "inherits_from:HTTPException"
      ],
      "BadGateway": [
        "inherits_from:HTTPException"
      ],
      "ServiceUnavailable": [
        "inherits_from:_RetryAfter"
      ],
      "GatewayTimeout": [
        "inherits_from:HTTPException"
      ],
      "HTTPVersionNotSupported": [
        "inherits_from:HTTPException"
      ],
      "COEP": [
        "inherits_from:Enum"
      ],
      "COOP": [
        "inherits_from:Enum"
      ],
      "_ProxyIOp": [
        "inherits_from:_ProxyLookup"
      ],
      "WSGIRequestHandler": [
        "inherits_from:BaseHTTPRequestHandler"
      ],
      "BaseWSGIServer": [
        "inherits_from:HTTPServer"
      ],
      "ThreadedWSGIServer": [
        "inherits_from:BaseWSGIServer"
      ],
      "ForkingWSGIServer": [
        "inherits_from:BaseWSGIServer",
        "inherits_from:ForkingMixIn"
      ],
      "EnvironBuilder": [
        "uses:utils.get_content_type",
        "uses:utils.cached_property"
      ],
      "ClientRedirectError": [
        "inherits_from:Exception"
      ],
      "Client": [
        "uses:utils.get_content_type",
        "uses:utils.cached_property"
      ],
      "TestResponse": [
        "uses:utils.get_content_type",
        "inherits_from:Response",
        "uses:utils.cached_property"
      ],
      "Cookie": [
        "uses:utils.get_content_type",
        "uses:utils.cached_property"
      ],
      "cached_property": [
        "inherits_from:property",
        "inherits_from:object"
      ],
      "ImportStringError": [
        "inherits_from:ImportError"
      ],
      "StatReloaderLoop": [
        "inherits_from:ReloaderLoop"
      ],
      "WatchdogReloaderLoop": [
        "inherits_from:ReloaderLoop"
      ],
      "EventHandler": [
        "inherits_from:PatternMatchingEventHandler"
      ],
      "MIMEAccept": [
        "inherits_from:Accept"
      ],
      "LanguageAccept": [
        "inherits_from:Accept"
      ],
      "CharsetAccept": [
        "inherits_from:Accept"
      ],
      "RequestCacheControl": [
        "inherits_from:_CacheControl"
      ],
      "ResponseCacheControl": [
        "inherits_from:_CacheControl"
      ],
      "EnvironHeaders": [
        "inherits_from:Headers",
        "inherits_from:ImmutableHeadersMixin"
      ],
      "ImmutableList": [
        "inherits_from:ImmutableListMixin"
      ],
      "DebugTraceback": [
        "uses:utils.cached_property"
      ],
      "DebugFrameSummary": [
        "uses:utils.cached_property"
      ],
      "_ConsoleFrame": [
        "uses:utils.send_file"
      ],
      "DebuggedApplication": [
        "uses:utils.send_file"
      ],
      "WSGIWarning": [
        "inherits_from:Warning"
      ],
      "HTTPWarning": [
        "inherits_from:Warning"
      ],
      "SharedDataMiddleware": [
        "uses:utils.get_content_type"
      ],
      "ValidationError": [
        "inherits_from:ValueError"
      ],
      "UnicodeConverter": [
        "inherits_from:BaseConverter"
      ],
      "AnyConverter": [
        "inherits_from:BaseConverter"
      ],
      "PathConverter": [
        "inherits_from:BaseConverter"
      ],
      "NumberConverter": [
        "inherits_from:BaseConverter"
      ],
      "IntegerConverter": [
        "inherits_from:NumberConverter"
      ],
      "FloatConverter": [
        "inherits_from:NumberConverter"
      ],
      "UUIDConverter": [
        "inherits_from:BaseConverter"
      ],
      "RoutingException": [
        "inherits_from:Exception"
      ],
      "RequestRedirect": [
        "uses:utils.cached_property",
        "inherits_from:RoutingException",
        "uses:utils.redirect",
        "inherits_from:HTTPException"
      ],
      "RequestPath": [
        "uses:utils.cached_property",
        "inherits_from:RoutingException",
        "uses:utils.redirect"
      ],
      "RequestAliasRedirect": [
        "uses:utils.cached_property",
        "inherits_from:RoutingException",
        "uses:utils.redirect"
      ],
      "BuildError": [
        "uses:utils.cached_property",
        "inherits_from:RoutingException",
        "inherits_from:LookupError",
        "uses:utils.redirect"
      ],
      "WebsocketMismatch": [
        "inherits_from:BadRequest"
      ],
      "NoMatch": [
        "inherits_from:Exception",
        "uses:utils.redirect",
        "uses:utils.cached_property"
      ],
      "SlashRequired": [
        "inherits_from:Exception"
      ],
      "Subdomain": [
        "inherits_from:RuleFactory"
      ],
      "Submount": [
        "inherits_from:RuleFactory"
      ],
      "EndpointPrefix": [
        "inherits_from:RuleFactory"
      ],
      "RuleTemplateFactory": [
        "inherits_from:RuleFactory"
      ],
      "Rule": [
        "inherits_from:JupyterMixin",
        "inherits_from:Serialisable",
        "inherits_from:RuleFactory"
      ],
      "Preamble": [
        "inherits_from:Event"
      ],
      "Field": [
        "inherits_from:Event"
      ],
      "Data": [
        "inherits_from:Event"
      ],
      "Epilogue": [
        "inherits_from:Event"
      ],
      "NeedData": [
        "inherits_from:Event"
      ],
      "State": [
        "inherits_from:Enum"
      ],
      "ResponseStream": [
        "uses:utils.cached_property"
      ],
      "NoOpBuildEnvironment": [
        "inherits_from:BuildEnvironment"
      ],
      "SimpleWheelCache": [
        "inherits_from:Cache"
      ],
      "EphemWheelCache": [
        "inherits_from:SimpleWheelCache"
      ],
      "WheelCache": [
        "inherits_from:Cache"
      ],
      "PipError": [
        "inherits_from:Exception"
      ],
      "DiagnosticPipError": [
        "inherits_from:PipError"
      ],
      "ConfigurationError": [
        "inherits_from:PipError"
      ],
      "InstallationError": [
        "inherits_from:PipError"
      ],
      "MissingPyProjectBuildRequires": [
        "inherits_from:DiagnosticPipError"
      ],
      "InvalidPyProjectBuildRequires": [
        "inherits_from:DiagnosticPipError"
      ],
      "NoneMetadataError": [
        "inherits_from:PipError"
      ],
      "UserInstallationInvalid": [
        "inherits_from:InstallationError"
      ],
      "InvalidSchemeCombination": [
        "inherits_from:InstallationError"
      ],
      "DistributionNotFound": [
        "inherits_from:InstallationError",
        "inherits_from:ResolutionError"
      ],
      "RequirementsFileParseError": [
        "inherits_from:InstallationError"
      ],
      "BestVersionAlreadyInstalled": [
        "inherits_from:PipError"
      ],
      "BadCommand": [
        "inherits_from:PipError"
      ],
      "CommandError": [
        "inherits_from:PipError"
      ],
      "PreviousBuildDirError": [
        "inherits_from:PipError"
      ],
      "NetworkConnectionError": [
        "inherits_from:PipError"
      ],
      "InvalidWheelFilename": [
        "inherits_from:ValueError",
        "inherits_from:InstallationError"
      ],
      "UnsupportedWheel": [
        "inherits_from:InstallationError"
      ],
      "InvalidWheel": [
        "inherits_from:InstallationError"
      ],
      "MetadataInconsistent": [
        "inherits_from:InstallationError"
      ],
      "MetadataInvalid": [
        "inherits_from:InstallationError"
      ],
      "InstallationSubprocessError": [
        "inherits_from:DiagnosticPipError",
        "inherits_from:InstallationError"
      ],
      "MetadataGenerationFailed": [
        "inherits_from:InstallationSubprocessError",
        "inherits_from:InstallationError"
      ],
      "HashErrors": [
        "inherits_from:InstallationError"
      ],
      "HashError": [
        "inherits_from:InstallationError"
      ],
      "VcsHashUnsupported": [
        "inherits_from:HashError"
      ],
      "DirectoryUrlHashUnsupported": [
        "inherits_from:HashError"
      ],
      "HashMissing": [
        "inherits_from:HashError"
      ],
      "HashUnpinned": [
        "inherits_from:HashError"
      ],
      "HashMismatch": [
        "inherits_from:HashError"
      ],
      "UnsupportedPythonVersion": [
        "inherits_from:InstallationError"
      ],
      "ConfigurationFileCouldNotBeLoaded": [
        "inherits_from:ConfigurationError"
      ],
      "ExternallyManagedEnvironment": [
        "inherits_from:DiagnosticPipError"
      ],
      "UninstallMissingRecord": [
        "inherits_from:DiagnosticPipError"
      ],
      "LegacyDistutilsInstall": [
        "inherits_from:DiagnosticPipError"
      ],
      "InvalidInstalledPackage": [
        "inherits_from:DiagnosticPipError"
      ],
      "_TypeVarLikeMeta": [
        "inherits_from:type"
      ],
      "_AnyMeta": [
        "inherits_from:type"
      ],
      "_LiteralForm": [
        "inherits_from:_ExtensionsSpecialForm"
      ],
      "_SpecialGenericAlias": [
        "inherits_from:_special_generic_alias_base"
      ],
      "SupportsInt": [
        "inherits_from:Protocol"
      ],
      "SupportsFloat": [
        "inherits_from:Protocol"
      ],
      "SupportsComplex": [
        "inherits_from:Protocol"
      ],
      "SupportsBytes": [
        "inherits_from:Protocol"
      ],
      "SupportsIndex": [
        "inherits_from:Protocol"
      ],
      "_TypedDictMeta": [
        "inherits_from:type"
      ],
      "NoDefaultTypeMeta": [
        "inherits_from:type"
      ],
      "ParamSpecArgs": [
        "inherits_from:_Immutable"
      ],
      "ParamSpecKwargs": [
        "inherits_from:_Immutable"
      ],
      "_ConcatenateGenericAlias": [
        "inherits_from:list"
      ],
      "_NamedTupleMeta": [
        "inherits_from:type"
      ],
      "ParamSpec": [
        "inherits_from:_DefaultMixin",
        "inherits_from:list"
      ],
      "_ConcatenateForm": [
        "inherits_from:_ExtensionsSpecialForm"
      ],
      "_TypeGuardForm": [
        "inherits_from:_ExtensionsSpecialForm"
      ],
      "_TypeIsForm": [
        "inherits_from:_ExtensionsSpecialForm"
      ],
      "_RequiredForm": [
        "inherits_from:_ExtensionsSpecialForm"
      ],
      "_ReadOnlyForm": [
        "inherits_from:_ExtensionsSpecialForm"
      ],
      "_UnpackSpecialForm": [
        "inherits_from:_ExtensionsSpecialForm"
      ],
      "_UnpackForm": [
        "inherits_from:_ExtensionsSpecialForm"
      ],
      "TypeVarTuple": [
        "inherits_from:_DefaultMixin"
      ],
      "CacheControlAdapter": [
        "inherits_from:HTTPAdapter",
        "inherits_from:_SSLContextAdapterMixin",
        "inherits_from:_BaseCacheControlAdapter"
      ],
      "DictCache": [
        "inherits_from:BaseCache"
      ],
      "SeparateBodyBaseCache": [
        "inherits_from:BaseCache"
      ],
      "OneDayCache": [
        "inherits_from:BaseHeuristic"
      ],
      "ExpiresAfter": [
        "inherits_from:BaseHeuristic"
      ],
      "LastModified": [
        "inherits_from:BaseHeuristic"
      ],
      "ZipExtFile": [
        "inherits_from:BaseZipExtFile"
      ],
      "ZipFile": [
        "inherits_from:BaseZipFile"
      ],
      "CertificateError": [
        "inherits_from:ValueError"
      ],
      "Container": [
        "inherits_from:object"
      ],
      "ChainMap": [
        "inherits_from:MutableMapping"
      ],
      "OrderedDict": [
        "inherits_from:dict"
      ],
      "ConvertingDict": [
        "inherits_from:dict"
      ],
      "ConvertingList": [
        "inherits_from:list"
      ],
      "ConvertingTuple": [
        "inherits_from:tuple"
      ],
      "BaseConfigurator": [
        "inherits_from:object"
      ],
      "_Cache": [
        "inherits_from:object"
      ],
      "DistributionPath": [
        "inherits_from:object"
      ],
      "Distribution": [
        "inherits_from:object",
        "inherits_from:BaseDistribution"
      ],
      "BaseInstalledDistribution": [
        "inherits_from:Distribution"
      ],
      "InstalledDistribution": [
        "inherits_from:BaseInstalledDistribution",
        "inherits_from:AbstractDistribution"
      ],
      "EggInfoDistribution": [
        "inherits_from:Distribution",
        "inherits_from:BaseInstalledDistribution"
      ],
      "DependencyGraph": [
        "inherits_from:object"
      ],
      "PackageIndex": [
        "inherits_from:object"
      ],
      "RedirectHandler": [
        "inherits_from:BaseRedirectHandler"
      ],
      "Locator": [
        "inherits_from:object"
      ],
      "PyPIRPCLocator": [
        "inherits_from:Locator"
      ],
      "PyPIJSONLocator": [
        "inherits_from:Locator"
      ],
      "Page": [
        "inherits_from:object"
      ],
      "SimpleScrapingLocator": [
        "inherits_from:Locator"
      ],
      "DirectoryLocator": [
        "inherits_from:Locator"
      ],
      "JSONLocator": [
        "inherits_from:Locator"
      ],
      "DistPathLocator": [
        "inherits_from:Locator"
      ],
      "AggregatingLocator": [
        "inherits_from:Locator"
      ],
      "DependencyFinder": [
        "inherits_from:object"
      ],
      "Manifest": [
        "inherits_from:object",
        "inherits_from:Serialisable"
      ],
      "Evaluator": [
        "inherits_from:object"
      ],
      "MetadataMissingError": [
        "inherits_from:DistlibException"
      ],
      "MetadataConflictError": [
        "inherits_from:DistlibException"
      ],
      "MetadataUnrecognizedVersionError": [
        "inherits_from:DistlibException"
      ],
      "MetadataInvalidError": [
        "inherits_from:DistlibException"
      ],
      "LegacyMetadata": [
        "inherits_from:object"
      ],
      "Metadata": [
        "inherits_from:object"
      ],
      "ResourceCache": [
        "inherits_from:Cache"
      ],
      "ResourceBase": [
        "inherits_from:object"
      ],
      "Resource": [
        "inherits_from:ResourceBase"
      ],
      "ResourceContainer": [
        "inherits_from:ResourceBase"
      ],
      "ResourceFinder": [
        "inherits_from:object"
      ],
      "ZipResourceFinder": [
        "inherits_from:ResourceFinder"
      ],
      "ScriptMaker": [
        "inherits_from:object"
      ],
      "FileOperator": [
        "inherits_from:object"
      ],
      "ExportEntry": [
        "inherits_from:object"
      ],
      "Cache": [
        "inherits_from:object"
      ],
      "EventMixin": [
        "inherits_from:object"
      ],
      "Sequencer": [
        "inherits_from:object"
      ],
      "Progress": [
        "inherits_from:JupyterMixin",
        "inherits_from:object"
      ],
      "CSVBase": [
        "inherits_from:object"
      ],
      "CSVReader": [
        "inherits_from:CSVBase"
      ],
      "CSVWriter": [
        "inherits_from:CSVBase"
      ],
      "Configurator": [
        "inherits_from:BaseConfigurator"
      ],
      "SubprocessMixin": [
        "inherits_from:object"
      ],
      "PyPIRCFile": [
        "inherits_from:object"
      ],
      "HTTPSHandler": [
        "inherits_from:BaseHTTPSHandler"
      ],
      "HTTPSOnlyHandler": [
        "inherits_from:HTTPHandler",
        "inherits_from:HTTPSHandler"
      ],
      "UnsupportedVersionError": [
        "inherits_from:ValueError"
      ],
      "Version": [
        "inherits_from:object",
        "inherits_from:_BaseVersion"
      ],
      "Matcher": [
        "inherits_from:object"
      ],
      "NormalizedVersion": [
        "inherits_from:Version"
      ],
      "NormalizedMatcher": [
        "inherits_from:Matcher"
      ],
      "LegacyVersion": [
        "inherits_from:Version",
        "inherits_from:_BaseVersion"
      ],
      "LegacyMatcher": [
        "inherits_from:Matcher"
      ],
      "SemanticVersion": [
        "inherits_from:Version"
      ],
      "SemanticMatcher": [
        "inherits_from:Matcher"
      ],
      "VersionScheme": [
        "inherits_from:object"
      ],
      "Mounter": [
        "inherits_from:object"
      ],
      "Wheel": [
        "inherits_from:object",
        "inherits_from:Protocol"
      ],
      "DistlibException": [
        "inherits_from:Exception"
      ],
      "VersionDict": [
        "inherits_from:TypedDict"
      ],
      "InfoDict": [
        "inherits_from:TypedDict"
      ],
      "Codec": [
        "uses:core.encode",
        "uses:core.alabel",
        "uses:core.decode",
        "uses:core.ulabel",
        "uses:core.IDNAError"
      ],
      "IncrementalEncoder": [
        "uses:core.encode",
        "uses:core.alabel",
        "uses:core.decode",
        "uses:core.ulabel",
        "uses:core.IDNAError"
      ],
      "IncrementalDecoder": [
        "uses:core.encode",
        "uses:core.alabel",
        "uses:core.decode",
        "uses:core.ulabel",
        "uses:core.IDNAError"
      ],
      "StreamWriter": [
        "inherits_from:Codec"
      ],
      "StreamReader": [
        "inherits_from:Codec"
      ],
      "IDNAError": [
        "inherits_from:UnicodeError"
      ],
      "IDNABidiError": [
        "inherits_from:IDNAError"
      ],
      "InvalidCodepoint": [
        "inherits_from:IDNAError"
      ],
      "InvalidCodepointContext": [
        "inherits_from:IDNAError"
      ],
      "UnpackException": [
        "inherits_from:Exception"
      ],
      "BufferFull": [
        "inherits_from:UnpackException"
      ],
      "OutOfData": [
        "inherits_from:UnpackException"
      ],
      "FormatError": [
        "inherits_from:ValueError",
        "inherits_from:UnpackException"
      ],
      "StackError": [
        "inherits_from:ValueError",
        "inherits_from:UnpackException"
      ],
      "ExtraData": [
        "inherits_from:UnpackValueError"
      ],
      "InvalidMarker": [
        "inherits_from:ValueError"
      ],
      "UndefinedComparison": [
        "inherits_from:ValueError"
      ],
      "UndefinedEnvironmentName": [
        "inherits_from:ValueError"
      ],
      "Marker": [
        "inherits_from:Serialisable",
        "uses:utils.canonicalize_name"
      ],
      "InvalidMetadata": [
        "inherits_from:ValueError"
      ],
      "RawMetadata": [
        "inherits_from:TypedDict"
      ],
      "ExceptionGroup": [
        "inherits_from:Exception"
      ],
      "InvalidRequirement": [
        "inherits_from:ValueError"
      ],
      "Requirement": [
        "uses:utils.canonicalize_name"
      ],
      "InvalidSpecifier": [
        "inherits_from:ValueError"
      ],
      "BaseSpecifier": [
        "uses:utils.canonicalize_version"
      ],
      "Specifier": [
        "uses:utils.canonicalize_version",
        "inherits_from:BaseSpecifier"
      ],
      "SpecifierSet": [
        "uses:utils.canonicalize_version",
        "inherits_from:BaseSpecifier"
      ],
      "InvalidName": [
        "inherits_from:ValueError"
      ],
      "InvalidSdistFilename": [
        "inherits_from:ValueError"
      ],
      "_Version": [
        "inherits_from:NamedTuple"
      ],
      "InvalidVersion": [
        "inherits_from:ValueError"
      ],
      "_TrimmedRelease": [
        "inherits_from:Version"
      ],
      "ELFInvalid": [
        "inherits_from:ValueError"
      ],
      "_GLibCVersion": [
        "inherits_from:NamedTuple"
      ],
      "_MuslVersion": [
        "inherits_from:NamedTuple"
      ],
      "Value": [
        "inherits_from:Node"
      ],
      "Op": [
        "inherits_from:Enum",
        "inherits_from:Node"
      ],
      "ParsedRequirement": [
        "inherits_from:NamedTuple"
      ],
      "ParserSyntaxError": [
        "inherits_from:Exception"
      ],
      "_LoaderProtocol": [
        "inherits_from:Protocol"
      ],
      "_ZipLoaderModule": [
        "inherits_from:Protocol"
      ],
      "PEP440Warning": [
        "inherits_from:RuntimeWarning"
      ],
      "ResolutionError": [
        "inherits_from:Exception",
        "inherits_from:ResolverException"
      ],
      "VersionConflict": [
        "inherits_from:ResolutionError"
      ],
      "ContextualVersionConflict": [
        "inherits_from:VersionConflict"
      ],
      "UnknownExtra": [
        "inherits_from:ResolutionError"
      ],
      "IMetadataProvider": [
        "inherits_from:Protocol"
      ],
      "IResourceProvider": [
        "inherits_from:Protocol",
        "inherits_from:IMetadataProvider"
      ],
      "ExtractionError": [
        "inherits_from:RuntimeError"
      ],
      "EggProvider": [
        "inherits_from:NullProvider"
      ],
      "DefaultProvider": [
        "inherits_from:EggProvider"
      ],
      "EmptyProvider": [
        "inherits_from:NullProvider"
      ],
      "MemoizedZipManifests": [
        "inherits_from:ZipManifests"
      ],
      "ZipProvider": [
        "inherits_from:EggProvider"
      ],
      "FileMetadata": [
        "inherits_from:EmptyProvider"
      ],
      "PathMetadata": [
        "inherits_from:DefaultProvider"
      ],
      "EggMetadata": [
        "inherits_from:ZipProvider"
      ],
      "DistInfoDistribution": [
        "inherits_from:Distribution"
      ],
      "PkgResourcesDeprecationWarning": [
        "inherits_from:Warning"
      ],
      "manifest_mod": [
        "inherits_from:NamedTuple"
      ],
      "Android": [
        "inherits_from:PlatformDirsABC"
      ],
      "PlatformDirsABC": [
        "inherits_from:ABC"
      ],
      "MacOS": [
        "inherits_from:PlatformDirsABC"
      ],
      "Unix": [
        "inherits_from:PlatformDirsABC"
      ],
      "Windows": [
        "inherits_from:PlatformDirsABC"
      ],
      "FunctionFilter": [
        "inherits_from:Filter"
      ],
      "LexerMeta": [
        "inherits_from:type"
      ],
      "DelegatingLexer": [
        "inherits_from:Lexer"
      ],
      "include": [
        "inherits_from:str"
      ],
      "combined": [
        "inherits_from:tuple"
      ],
      "words": [
        "inherits_from:Future"
      ],
      "RegexLexerMeta": [
        "inherits_from:LexerMeta"
      ],
      "RegexLexer": [
        "inherits_from:Lexer"
      ],
      "ExtendedRegexLexer": [
        "inherits_from:RegexLexer"
      ],
      "ProfilingRegexLexerMeta": [
        "inherits_from:RegexLexerMeta"
      ],
      "ProfilingRegexLexer": [
        "inherits_from:RegexLexer"
      ],
      "EndOfText": [
        "inherits_from:RuntimeError"
      ],
      "PygmentsDoc": [
        "inherits_from:Directive"
      ],
      "StyleMeta": [
        "inherits_from:type"
      ],
      "_TokenType": [
        "inherits_from:tuple"
      ],
      "ClassNotFound": [
        "inherits_from:ValueError"
      ],
      "OptionError": [
        "inherits_from:Exception",
        "inherits_from:KeyError",
        "inherits_from:AttributeError"
      ],
      "UnclosingTextIOWrapper": [
        "inherits_from:TextIOWrapper"
      ],
      "BackendUnavailable": [
        "inherits_from:Exception"
      ],
      "HookMissing": [
        "inherits_from:Exception"
      ],
      "UnsupportedOperation": [
        "inherits_from:Exception"
      ],
      "SubprocessRunner": [
        "inherits_from:Protocol"
      ],
      "BaseAdapter": [
        "uses:utils.prepend_scheme_if_needed",
        "uses:utils.get_encoding_from_headers",
        "uses:utils.select_proxy",
        "uses:utils.DEFAULT_CA_BUNDLE_PATH",
        "uses:utils.get_auth_from_url",
        "uses:utils.urldefragauth",
        "uses:utils.extract_zipped_paths"
      ],
      "HTTPAdapter": [
        "uses:utils.prepend_scheme_if_needed",
        "inherits_from:_SSLContextAdapterMixin",
        "uses:utils.get_encoding_from_headers",
        "inherits_from:BaseAdapter",
        "uses:utils.select_proxy",
        "uses:utils.DEFAULT_CA_BUNDLE_PATH",
        "uses:utils.get_auth_from_url",
        "uses:utils.urldefragauth",
        "inherits_from:_BaseHTTPAdapter",
        "uses:utils.extract_zipped_paths"
      ],
      "AuthBase": [
        "uses:utils.parse_dict_header"
      ],
      "HTTPBasicAuth": [
        "uses:utils.parse_dict_header",
        "inherits_from:AuthBase"
      ],
      "HTTPProxyAuth": [
        "uses:utils.parse_dict_header",
        "inherits_from:HTTPBasicAuth"
      ],
      "HTTPDigestAuth": [
        "uses:utils.parse_dict_header",
        "inherits_from:AuthBase"
      ],
      "CookieConflictError": [
        "inherits_from:RuntimeError"
      ],
      "RequestsCookieJar": [
        "inherits_from:MutableMapping"
      ],
      "RequestException": [
        "inherits_from:IOError"
      ],
      "InvalidJSONError": [
        "inherits_from:RequestException"
      ],
      "JSONDecodeError": [
        "inherits_from:InvalidJSONError",
        "inherits_from:CompatJSONDecodeError"
      ],
      "HTTPError": [
        "inherits_from:Exception",
        "inherits_from:RequestException"
      ],
      "ConnectionError": [
        "inherits_from:Exception",
        "inherits_from:RequestException"
      ],
      "ProxyError": [
        "inherits_from:HTTPError",
        "inherits_from:ConnectionError"
      ],
      "SSLError": [
        "inherits_from:HTTPError",
        "inherits_from:ConnectionError"
      ],
      "Timeout": [
        "inherits_from:object",
        "inherits_from:RequestException"
      ],
      "ConnectTimeout": [
        "inherits_from:Timeout",
        "inherits_from:ConnectionError"
      ],
      "ReadTimeout": [
        "inherits_from:Timeout"
      ],
      "URLRequired": [
        "inherits_from:RequestException"
      ],
      "TooManyRedirects": [
        "inherits_from:RequestException"
      ],
      "MissingSchema": [
        "inherits_from:ValueError",
        "inherits_from:RequestException"
      ],
      "InvalidSchema": [
        "inherits_from:ValueError",
        "inherits_from:RequestException"
      ],
      "InvalidURL": [
        "inherits_from:ValueError",
        "inherits_from:RequestException"
      ],
      "InvalidHeader": [
        "inherits_from:ValueError",
        "inherits_from:HTTPError",
        "inherits_from:RequestException"
      ],
      "InvalidProxyURL": [
        "inherits_from:InvalidURL"
      ],
      "ChunkedEncodingError": [
        "inherits_from:RequestException"
      ],
      "ContentDecodingError": [
        "inherits_from:BaseHTTPError",
        "inherits_from:RequestException"
      ],
      "StreamConsumedError": [
        "inherits_from:TypeError",
        "inherits_from:RequestException"
      ],
      "RetryError": [
        "inherits_from:RequestException"
      ],
      "UnrewindableBodyError": [
        "inherits_from:HTTPError",
        "inherits_from:RequestException"
      ],
      "RequestsWarning": [
        "inherits_from:Warning"
      ],
      "FileModeWarning": [
        "inherits_from:RequestsWarning",
        "inherits_from:DeprecationWarning"
      ],
      "RequestsDependencyWarning": [
        "inherits_from:RequestsWarning"
      ],
      "RequestEncodingMixin": [
        "uses:utils.super_len",
        "uses:utils.iter_slices",
        "uses:utils.check_header_validity",
        "uses:utils.to_key_val_list",
        "uses:utils.requote_uri",
        "uses:utils.stream_decode_response_unicode",
        "uses:utils.guess_json_utf",
        "uses:utils.parse_header_links",
        "uses:utils.get_auth_from_url",
        "uses:utils.guess_filename"
      ],
      "RequestHooksMixin": [
        "uses:utils.super_len",
        "uses:utils.iter_slices",
        "uses:utils.check_header_validity",
        "uses:utils.to_key_val_list",
        "uses:utils.requote_uri",
        "uses:utils.stream_decode_response_unicode",
        "uses:utils.guess_json_utf",
        "uses:utils.parse_header_links",
        "uses:utils.get_auth_from_url",
        "uses:utils.guess_filename"
      ],
      "PreparedRequest": [
        "uses:utils.super_len",
        "uses:utils.iter_slices",
        "uses:utils.check_header_validity",
        "uses:utils.to_key_val_list",
        "uses:utils.requote_uri",
        "uses:utils.stream_decode_response_unicode",
        "uses:utils.guess_json_utf",
        "inherits_from:RequestEncodingMixin",
        "uses:utils.parse_header_links",
        "uses:utils.get_auth_from_url",
        "uses:utils.guess_filename",
        "inherits_from:RequestHooksMixin"
      ],
      "SessionRedirectMixin": [
        "uses:utils.get_netrc_auth",
        "uses:utils.to_key_val_list",
        "uses:utils.requote_uri",
        "uses:utils.should_bypass_proxies",
        "uses:utils.get_auth_from_url",
        "uses:utils.default_headers",
        "uses:utils.DEFAULT_PORTS",
        "uses:utils.resolve_proxies",
        "uses:utils.rewind_body",
        "uses:utils.get_environ_proxies"
      ],
      "Session": [
        "uses:utils.get_netrc_auth",
        "inherits_from:SessionRedirectMixin",
        "uses:utils.to_key_val_list",
        "uses:utils.requote_uri",
        "uses:utils.should_bypass_proxies",
        "uses:utils.get_auth_from_url",
        "uses:utils.default_headers",
        "uses:utils.DEFAULT_PORTS",
        "uses:utils.resolve_proxies",
        "uses:utils.rewind_body",
        "uses:utils.get_environ_proxies"
      ],
      "CaseInsensitiveDict": [
        "inherits_from:MutableMapping"
      ],
      "LookupDict": [
        "inherits_from:dict"
      ],
      "AbstractProvider": [
        "inherits_from:object"
      ],
      "AbstractResolver": [
        "inherits_from:object"
      ],
      "BaseReporter": [
        "inherits_from:object"
      ],
      "ResolverException": [
        "inherits_from:Exception"
      ],
      "RequirementsConflicted": [
        "inherits_from:ResolverException"
      ],
      "InconsistentCandidate": [
        "inherits_from:ResolverException"
      ],
      "Criterion": [
        "inherits_from:object"
      ],
      "ResolutionImpossible": [
        "inherits_from:ResolutionError"
      ],
      "ResolutionTooDeep": [
        "inherits_from:ResolutionError"
      ],
      "Resolution": [
        "inherits_from:object"
      ],
      "Resolver": [
        "inherits_from:BaseResolver",
        "inherits_from:AbstractResolver"
      ],
      "DirectedGraph": [
        "inherits_from:object"
      ],
      "_FactoryIterableView": [
        "inherits_from:object"
      ],
      "_SequenceIterableView": [
        "inherits_from:object"
      ],
      "RichRenderable": [
        "inherits_from:ABC"
      ],
      "Align": [
        "inherits_from:JupyterMixin"
      ],
      "VerticalCenter": [
        "inherits_from:JupyterMixin"
      ],
      "_AnsiToken": [
        "inherits_from:NamedTuple"
      ],
      "Bar": [
        "inherits_from:JupyterMixin"
      ],
      "ColorSystem": [
        "inherits_from:IntEnum"
      ],
      "ColorType": [
        "inherits_from:IntEnum"
      ],
      "ColorParseError": [
        "inherits_from:Exception"
      ],
      "Color": [
        "inherits_from:Serialisable",
        "inherits_from:NamedTuple"
      ],
      "ColorTriplet": [
        "inherits_from:NamedTuple"
      ],
      "Columns": [
        "inherits_from:JupyterMixin"
      ],
      "ConsoleDimensions": [
        "inherits_from:NamedTuple"
      ],
      "RichCast": [
        "inherits_from:Protocol"
      ],
      "ConsoleRenderable": [
        "inherits_from:Protocol"
      ],
      "CaptureError": [
        "inherits_from:Exception"
      ],
      "RenderHook": [
        "inherits_from:ABC"
      ],
      "Constrain": [
        "inherits_from:JupyterMixin"
      ],
      "NoEmoji": [
        "inherits_from:Exception"
      ],
      "Emoji": [
        "inherits_from:JupyterMixin"
      ],
      "ConsoleError": [
        "inherits_from:Exception"
      ],
      "StyleError": [
        "inherits_from:Exception"
      ],
      "StyleSyntaxError": [
        "inherits_from:ConsoleError"
      ],
      "MissingStyle": [
        "inherits_from:StyleError"
      ],
      "StyleStackError": [
        "inherits_from:ConsoleError"
      ],
      "NotRenderableError": [
        "inherits_from:ConsoleError"
      ],
      "MarkupError": [
        "inherits_from:ConsoleError"
      ],
      "LiveError": [
        "inherits_from:ConsoleError"
      ],
      "NoAltScreen": [
        "inherits_from:ConsoleError"
      ],
      "Highlighter": [
        "inherits_from:ABC"
      ],
      "NullHighlighter": [
        "inherits_from:Highlighter"
      ],
      "RegexHighlighter": [
        "inherits_from:Highlighter"
      ],
      "ReprHighlighter": [
        "inherits_from:RegexHighlighter"
      ],
      "JSONHighlighter": [
        "inherits_from:RegexHighlighter"
      ],
      "ISO8601Highlighter": [
        "inherits_from:RegexHighlighter"
      ],
      "LayoutRender": [
        "inherits_from:NamedTuple"
      ],
      "LayoutError": [
        "inherits_from:Exception"
      ],
      "NoSplitter": [
        "inherits_from:LayoutError"
      ],
      "Splitter": [
        "inherits_from:ABC"
      ],
      "RowSplitter": [
        "inherits_from:Splitter"
      ],
      "ColumnSplitter": [
        "inherits_from:Splitter"
      ],
      "_RefreshThread": [
        "inherits_from:Thread"
      ],
      "Live": [
        "inherits_from:JupyterMixin",
        "inherits_from:RenderHook"
      ],
      "RichHandler": [
        "inherits_from:Handler"
      ],
      "Tag": [
        "inherits_from:NamedTuple"
      ],
      "Measurement": [
        "inherits_from:NamedTuple"
      ],
      "Padding": [
        "inherits_from:JupyterMixin"
      ],
      "Pager": [
        "inherits_from:ABC"
      ],
      "SystemPager": [
        "inherits_from:Pager"
      ],
      "Panel": [
        "inherits_from:JupyterMixin"
      ],
      "Pretty": [
        "inherits_from:JupyterMixin"
      ],
      "StockKeepingUnit": [
        "inherits_from:NamedTuple"
      ],
      "RichFormatter": [
        "inherits_from:BaseFormatter"
      ],
      "_TrackThread": [
        "inherits_from:Thread"
      ],
      "_Reader": [
        "inherits_from:RawIOBase",
        "inherits_from:BinaryIO"
      ],
      "ProgressColumn": [
        "inherits_from:ABC"
      ],
      "RenderableColumn": [
        "inherits_from:ProgressColumn"
      ],
      "SpinnerColumn": [
        "inherits_from:ProgressColumn"
      ],
      "TextColumn": [
        "inherits_from:ProgressColumn"
      ],
      "BarColumn": [
        "inherits_from:ProgressColumn"
      ],
      "TimeElapsedColumn": [
        "inherits_from:ProgressColumn"
      ],
      "TaskProgressColumn": [
        "inherits_from:TextColumn"
      ],
      "TimeRemainingColumn": [
        "inherits_from:ProgressColumn"
      ],
      "FileSizeColumn": [
        "inherits_from:ProgressColumn"
      ],
      "TotalFileSizeColumn": [
        "inherits_from:ProgressColumn"
      ],
      "MofNCompleteColumn": [
        "inherits_from:ProgressColumn"
      ],
      "DownloadColumn": [
        "inherits_from:ProgressColumn"
      ],
      "TransferSpeedColumn": [
        "inherits_from:ProgressColumn"
      ],
      "ProgressSample": [
        "inherits_from:NamedTuple"
      ],
      "PromptError": [
        "inherits_from:Exception"
      ],
      "InvalidResponse": [
        "inherits_from:PromptError"
      ],
      "Region": [
        "inherits_from:NamedTuple"
      ],
      "ReprError": [
        "inherits_from:Exception"
      ],
      "ControlType": [
        "inherits_from:IntEnum"
      ],
      "Segment": [
        "inherits_from:NamedTuple"
      ],
      "Status": [
        "inherits_from:JupyterMixin"
      ],
      "SyntaxTheme": [
        "inherits_from:ABC"
      ],
      "PygmentsSyntaxTheme": [
        "inherits_from:SyntaxTheme"
      ],
      "ANSISyntaxTheme": [
        "inherits_from:SyntaxTheme"
      ],
      "_SyntaxHighlightRange": [
        "inherits_from:NamedTuple"
      ],
      "Syntax": [
        "inherits_from:JupyterMixin"
      ],
      "_Cell": [
        "inherits_from:NamedTuple"
      ],
      "Table": [
        "inherits_from:JupyterMixin",
        "inherits_from:Fixed",
        "inherits_from:Serialisable"
      ],
      "Span": [
        "inherits_from:NamedTuple"
      ],
      "Text": [
        "inherits_from:JupyterMixin",
        "inherits_from:String",
        "inherits_from:Serialisable",
        "inherits_from:Convertible"
      ],
      "ThemeStackError": [
        "inherits_from:Exception"
      ],
      "PathHighlighter": [
        "inherits_from:RegexHighlighter"
      ],
      "Tree": [
        "inherits_from:JupyterMixin"
      ],
      "Inspect": [
        "inherits_from:JupyterMixin"
      ],
      "Edge": [
        "inherits_from:Protocol"
      ],
      "LegacyWindowsError": [
        "inherits_from:Exception"
      ],
      "WindowsCoordinates": [
        "inherits_from:NamedTuple"
      ],
      "TOMLDecodeError": [
        "inherits_from:ValueError"
      ],
      "SSLContext": [
        "inherits_from:object",
        "inherits_from:_truststore_SSLContext_super_class"
      ],
      "CERT_CONTEXT": [
        "inherits_from:Structure"
      ],
      "CERT_ENHKEY_USAGE": [
        "inherits_from:Structure"
      ],
      "CERT_USAGE_MATCH": [
        "inherits_from:Structure"
      ],
      "CERT_CHAIN_PARA": [
        "inherits_from:Structure"
      ],
      "CERT_TRUST_STATUS": [
        "inherits_from:Structure"
      ],
      "CERT_CHAIN_ELEMENT": [
        "inherits_from:Structure"
      ],
      "CERT_SIMPLE_CHAIN": [
        "inherits_from:Structure"
      ],
      "CERT_CHAIN_CONTEXT": [
        "inherits_from:Structure"
      ],
      "SSL_EXTRA_CERT_CHAIN_POLICY_PARA": [
        "inherits_from:Structure"
      ],
      "CERT_CHAIN_POLICY_PARA": [
        "inherits_from:Structure"
      ],
      "CERT_CHAIN_POLICY_STATUS": [
        "inherits_from:Structure"
      ],
      "CERT_CHAIN_ENGINE_CONFIG": [
        "inherits_from:Structure"
      ],
      "HTTPConnection": [
        "inherits_from:_HTTPConnection",
        "inherits_from:object"
      ],
      "HTTPSConnection": [
        "inherits_from:HTTPConnection"
      ],
      "DummyConnection": [
        "inherits_from:object"
      ],
      "BaseSSLError": [
        "inherits_from:BaseException"
      ],
      "BrokenPipeError": [
        "inherits_from:Exception"
      ],
      "ConnectionPool": [
        "inherits_from:object"
      ],
      "HTTPConnectionPool": [
        "inherits_from:RequestMethods",
        "inherits_from:ConnectionPool"
      ],
      "HTTPSConnectionPool": [
        "inherits_from:HTTPConnectionPool"
      ],
      "PoolError": [
        "inherits_from:HTTPError"
      ],
      "RequestError": [
        "inherits_from:PoolError"
      ],
      "DecodeError": [
        "inherits_from:HTTPError"
      ],
      "ProtocolError": [
        "inherits_from:HTTPError"
      ],
      "MaxRetryError": [
        "inherits_from:RequestError"
      ],
      "HostChangedError": [
        "inherits_from:RequestError"
      ],
      "TimeoutStateError": [
        "inherits_from:HTTPError"
      ],
      "TimeoutError": [
        "inherits_from:HTTPError"
      ],
      "ReadTimeoutError": [
        "inherits_from:TimeoutError",
        "inherits_from:RequestError"
      ],
      "ConnectTimeoutError": [
        "inherits_from:TimeoutError"
      ],
      "NewConnectionError": [
        "inherits_from:ConnectTimeoutError",
        "inherits_from:PoolError"
      ],
      "EmptyPoolError": [
        "inherits_from:PoolError"
      ],
      "ClosedPoolError": [
        "inherits_from:PoolError"
      ],
      "LocationValueError": [
        "inherits_from:ValueError",
        "inherits_from:HTTPError"
      ],
      "LocationParseError": [
        "inherits_from:LocationValueError"
      ],
      "URLSchemeUnknown": [
        "inherits_from:LocationValueError"
      ],
      "ResponseError": [
        "inherits_from:HTTPError"
      ],
      "SecurityWarning": [
        "inherits_from:HTTPWarning"
      ],
      "SubjectAltNameWarning": [
        "inherits_from:SecurityWarning"
      ],
      "InsecureRequestWarning": [
        "inherits_from:SecurityWarning"
      ],
      "SystemTimeWarning": [
        "inherits_from:SecurityWarning"
      ],
      "InsecurePlatformWarning": [
        "inherits_from:SecurityWarning"
      ],
      "SNIMissingWarning": [
        "inherits_from:HTTPWarning"
      ],
      "DependencyWarning": [
        "inherits_from:HTTPWarning"
      ],
      "ResponseNotChunked": [
        "inherits_from:ValueError",
        "inherits_from:ProtocolError"
      ],
      "BodyNotHttplibCompatible": [
        "inherits_from:HTTPError"
      ],
      "IncompleteRead": [
        "inherits_from:httplib_IncompleteRead",
        "inherits_from:HTTPError"
      ],
      "InvalidChunkLength": [
        "inherits_from:httplib_IncompleteRead",
        "inherits_from:HTTPError"
      ],
      "ProxySchemeUnknown": [
        "inherits_from:AssertionError",
        "inherits_from:URLSchemeUnknown"
      ],
      "ProxySchemeUnsupported": [
        "inherits_from:ValueError"
      ],
      "HeaderParsingError": [
        "inherits_from:HTTPError"
      ],
      "RequestField": [
        "inherits_from:object"
      ],
      "PoolManager": [
        "inherits_from:RequestMethods"
      ],
      "ProxyManager": [
        "inherits_from:PoolManager"
      ],
      "RequestMethods": [
        "inherits_from:object"
      ],
      "DeflateDecoder": [
        "inherits_from:object"
      ],
      "GzipDecoderState": [
        "inherits_from:object"
      ],
      "GzipDecoder": [
        "inherits_from:object"
      ],
      "MultiDecoder": [
        "inherits_from:object"
      ],
      "BrotliDecoder": [
        "inherits_from:object"
      ],
      "RecentlyUsedContainer": [
        "inherits_from:MutableMapping"
      ],
      "HTTPHeaderDict": [
        "inherits_from:MutableMapping"
      ],
      "AppEnginePlatformWarning": [
        "inherits_from:HTTPWarning"
      ],
      "AppEnginePlatformError": [
        "inherits_from:HTTPError"
      ],
      "AppEngineManager": [
        "inherits_from:RequestMethods"
      ],
      "NTLMConnectionPool": [
        "inherits_from:HTTPSConnectionPool"
      ],
      "WrappedSocket": [
        "inherits_from:object"
      ],
      "PyOpenSSLContext": [
        "inherits_from:object"
      ],
      "UnsupportedExtension": [
        "inherits_from:Exception"
      ],
      "SecureTransportContext": [
        "inherits_from:object"
      ],
      "SOCKSConnection": [
        "inherits_from:HTTPConnection"
      ],
      "SOCKSHTTPSConnection": [
        "inherits_from:SOCKSConnection",
        "inherits_from:HTTPSConnection"
      ],
      "SOCKSHTTPConnectionPool": [
        "inherits_from:HTTPConnectionPool"
      ],
      "SOCKSHTTPSConnectionPool": [
        "inherits_from:HTTPSConnectionPool"
      ],
      "SOCKSProxyManager": [
        "inherits_from:PoolManager"
      ],
      "_RetryMeta": [
        "inherits_from:type"
      ],
      "Retry": [
        "inherits_from:object"
      ],
      "NoWayToWaitForSocketError": [
        "inherits_from:Exception"
      ],
      "weakref_finalize": [
        "inherits_from:object"
      ],
      "_Info": [
        "inherits_from:object"
      ],
      "CFConst": [
        "inherits_from:object"
      ],
      "SecurityConst": [
        "inherits_from:object"
      ],
      "_DummyException": [
        "inherits_from:Exception"
      ],
      "GotUnsupportedOperation": [
        "inherits_from:Exception"
      ],
      "CodeTagFilter": [
        "inherits_from:Filter"
      ],
      "SymbolFilter": [
        "inherits_from:Filter"
      ],
      "KeywordCaseFilter": [
        "inherits_from:Filter"
      ],
      "NameHighlightFilter": [
        "inherits_from:Filter"
      ],
      "ErrorToken": [
        "inherits_from:Exception"
      ],
      "RaiseOnErrorTokenFilter": [
        "inherits_from:Filter"
      ],
      "VisibleWhitespaceFilter": [
        "inherits_from:Filter"
      ],
      "GobbleFilter": [
        "inherits_from:Filter"
      ],
      "TokenMergeFilter": [
        "inherits_from:Filter"
      ],
      "BBCodeFormatter": [
        "inherits_from:Formatter"
      ],
      "GroffFormatter": [
        "inherits_from:Formatter"
      ],
      "HtmlFormatter": [
        "inherits_from:Formatter"
      ],
      "PilNotAvailable": [
        "inherits_from:ImportError"
      ],
      "FontNotFound": [
        "inherits_from:Exception"
      ],
      "ImageFormatter": [
        "inherits_from:Formatter"
      ],
      "GifImageFormatter": [
        "inherits_from:ImageFormatter"
      ],
      "JpgImageFormatter": [
        "inherits_from:ImageFormatter"
      ],
      "BmpImageFormatter": [
        "inherits_from:ImageFormatter"
      ],
      "IRCFormatter": [
        "inherits_from:Formatter"
      ],
      "LatexFormatter": [
        "inherits_from:Formatter"
      ],
      "LatexEmbeddedLexer": [
        "inherits_from:Lexer"
      ],
      "NullFormatter": [
        "inherits_from:Formatter"
      ],
      "RawTokenFormatter": [
        "inherits_from:Formatter"
      ],
      "TestcaseFormatter": [
        "inherits_from:Formatter"
      ],
      "PangoMarkupFormatter": [
        "inherits_from:Formatter"
      ],
      "RtfFormatter": [
        "inherits_from:Formatter"
      ],
      "SvgFormatter": [
        "inherits_from:Formatter"
      ],
      "TerminalFormatter": [
        "inherits_from:Formatter"
      ],
      "Terminal256Formatter": [
        "inherits_from:Formatter"
      ],
      "TerminalTrueColorFormatter": [
        "inherits_from:Terminal256Formatter"
      ],
      "PythonLexer": [
        "inherits_from:RegexLexer"
      ],
      "Python2Lexer": [
        "inherits_from:RegexLexer"
      ],
      "_PythonConsoleLexerBase": [
        "inherits_from:RegexLexer"
      ],
      "PythonConsoleLexer": [
        "inherits_from:DelegatingLexer"
      ],
      "PythonTracebackLexer": [
        "inherits_from:RegexLexer"
      ],
      "Python2TracebackLexer": [
        "inherits_from:RegexLexer"
      ],
      "CythonLexer": [
        "inherits_from:RegexLexer"
      ],
      "DgLexer": [
        "inherits_from:RegexLexer"
      ],
      "NumPyLexer": [
        "inherits_from:PythonLexer"
      ],
      "_ReplaceInnerCode": [
        "inherits_from:DelegatingLexer"
      ],
      "SPDXLicense": [
        "inherits_from:TypedDict"
      ],
      "SPDXException": [
        "inherits_from:TypedDict"
      ],
      "InvalidLicenseExpression": [
        "inherits_from:ValueError"
      ],
      "FileCache": [
        "inherits_from:BaseCache",
        "inherits_from:_FileCacheMixin"
      ],
      "SeparateBodyFileCache": [
        "inherits_from:_FileCacheMixin",
        "inherits_from:SeparateBodyBaseCache"
      ],
      "RedisCache": [
        "inherits_from:BaseCache"
      ],
      "PipOption": [
        "inherits_from:Option"
      ],
      "SessionCommandMixin": [
        "inherits_from:CommandContextMixIn"
      ],
      "IndexGroupCommand": [
        "inherits_from:SessionCommandMixin",
        "inherits_from:Command"
      ],
      "UpdatingDefaultsHelpFormatter": [
        "inherits_from:PrettyHelpFormatter"
      ],
      "ConfigOptionParser": [
        "inherits_from:CustomOptionParser"
      ],
      "RequirementCommand": [
        "inherits_from:IndexGroupCommand"
      ],
      "InteractiveSpinner": [
        "inherits_from:SpinnerInterface"
      ],
      "NonInteractiveSpinner": [
        "inherits_from:SpinnerInterface"
      ],
      "CacheCommand": [
        "inherits_from:Command"
      ],
      "CheckCommand": [
        "inherits_from:Command"
      ],
      "CompletionCommand": [
        "inherits_from:Command"
      ],
      "ConfigurationCommand": [
        "inherits_from:Command"
      ],
      "DebugCommand": [
        "inherits_from:Command"
      ],
      "DownloadCommand": [
        "inherits_from:RequirementCommand"
      ],
      "FreezeCommand": [
        "inherits_from:Command"
      ],
      "HashCommand": [
        "inherits_from:Command"
      ],
      "HelpCommand": [
        "inherits_from:Command"
      ],
      "IndexCommand": [
        "inherits_from:IndexGroupCommand"
      ],
      "InspectCommand": [
        "inherits_from:Command"
      ],
      "InstallCommand": [
        "inherits_from:RequirementCommand"
      ],
      "ListCommand": [
        "inherits_from:IndexGroupCommand"
      ],
      "_DistWithLatestInfo": [
        "inherits_from:BaseDistribution"
      ],
      "SearchCommand": [
        "inherits_from:SessionCommandMixin",
        "inherits_from:Command"
      ],
      "TransformedHit": [
        "inherits_from:TypedDict"
      ],
      "ShowCommand": [
        "inherits_from:Command"
      ],
      "_PackageInfo": [
        "inherits_from:NamedTuple"
      ],
      "UninstallCommand": [
        "inherits_from:SessionCommandMixin",
        "inherits_from:Command"
      ],
      "WheelCommand": [
        "inherits_from:RequirementCommand"
      ],
      "SourceDistribution": [
        "inherits_from:AbstractDistribution"
      ],
      "WheelDistribution": [
        "inherits_from:AbstractDistribution"
      ],
      "_NotAPIContent": [
        "inherits_from:Exception"
      ],
      "_NotHTTP": [
        "inherits_from:Exception"
      ],
      "ParseLinks": [
        "inherits_from:Protocol"
      ],
      "HTMLLinkParser": [
        "inherits_from:HTMLParser"
      ],
      "CollectedSources": [
        "inherits_from:NamedTuple"
      ],
      "_FlatDirectorySource": [
        "inherits_from:LinkSource"
      ],
      "_LocalFileSource": [
        "inherits_from:LinkSource"
      ],
      "_RemoteFileSource": [
        "inherits_from:LinkSource"
      ],
      "_IndexDirectorySource": [
        "inherits_from:LinkSource"
      ],
      "BaseEntryPoint": [
        "inherits_from:Protocol"
      ],
      "RequiresEntry": [
        "inherits_from:NamedTuple"
      ],
      "BaseDistribution": [
        "inherits_from:Protocol"
      ],
      "FilesystemWheel": [
        "inherits_from:Wheel"
      ],
      "MemoryWheel": [
        "inherits_from:Wheel"
      ],
      "EntryPoint": [
        "inherits_from:NamedTuple"
      ],
      "Backend": [
        "inherits_from:Protocol",
        "inherits_from:ABC"
      ],
      "DirectUrlValidationError": [
        "inherits_from:Exception"
      ],
      "_CleanResult": [
        "inherits_from:NamedTuple"
      ],
      "Credentials": [
        "inherits_from:NamedTuple"
      ],
      "KeyRingBaseProvider": [
        "inherits_from:ABC"
      ],
      "KeyRingNullProvider": [
        "inherits_from:KeyRingBaseProvider"
      ],
      "KeyRingPythonProvider": [
        "inherits_from:KeyRingBaseProvider"
      ],
      "KeyRingCliProvider": [
        "inherits_from:KeyRingBaseProvider"
      ],
      "MultiDomainBasicAuth": [
        "inherits_from:AuthBase"
      ],
      "SafeFileCache": [
        "inherits_from:SeparateBodyBaseCache"
      ],
      "HTTPRangeRequestUnsupported": [
        "inherits_from:Exception"
      ],
      "LocalFSAdapter": [
        "inherits_from:BaseAdapter"
      ],
      "InsecureHTTPAdapter": [
        "inherits_from:HTTPAdapter"
      ],
      "InsecureCacheControlAdapter": [
        "inherits_from:CacheControlAdapter"
      ],
      "PackageDetails": [
        "inherits_from:NamedTuple"
      ],
      "_EditableInfo": [
        "inherits_from:NamedTuple"
      ],
      "OptionParsingError": [
        "inherits_from:Exception"
      ],
      "PipDeprecationWarning": [
        "inherits_from:Warning"
      ],
      "MissingHashes": [
        "inherits_from:Hashes"
      ],
      "BrokenStdoutLoggingError": [
        "inherits_from:Exception"
      ],
      "PipConsole": [
        "inherits_from:Console"
      ],
      "RichPipStreamHandler": [
        "inherits_from:RichHandler"
      ],
      "MaxLevelFilter": [
        "inherits_from:Filter"
      ],
      "ExcludeLoggerFilter": [
        "inherits_from:Filter"
      ],
      "ConfiguredBuildBackendHookCaller": [
        "inherits_from:BuildBackendHookCaller"
      ],
      "AdjacentTempDirectory": [
        "inherits_from:TempDirectory"
      ],
      "Bazaar": [
        "inherits_from:VersionControl"
      ],
      "Git": [
        "inherits_from:VersionControl"
      ],
      "Mercurial": [
        "inherits_from:VersionControl"
      ],
      "Subversion": [
        "inherits_from:VersionControl"
      ],
      "RemoteNotFoundError": [
        "inherits_from:Exception"
      ],
      "RemoteNotValidError": [
        "inherits_from:Exception"
      ],
      "_InstallRequirementBackedCandidate": [
        "inherits_from:Candidate"
      ],
      "LinkCandidate": [
        "inherits_from:_InstallRequirementBackedCandidate"
      ],
      "EditableCandidate": [
        "inherits_from:_InstallRequirementBackedCandidate"
      ],
      "AlreadyInstalledCandidate": [
        "inherits_from:Candidate"
      ],
      "ExtrasCandidate": [
        "inherits_from:Candidate"
      ],
      "RequiresPythonCandidate": [
        "inherits_from:Candidate"
      ],
      "CollectedRootRequirements": [
        "inherits_from:NamedTuple"
      ],
      "ConflictCause": [
        "inherits_from:Protocol"
      ],
      "FoundCandidates": [
        "inherits_from:SequenceCandidate"
      ],
      "PipProvider": [
        "inherits_from:_ProviderBase"
      ],
      "PipReporter": [
        "inherits_from:BaseReporter"
      ],
      "PipDebuggingReporter": [
        "inherits_from:BaseReporter"
      ],
      "ExplicitRequirement": [
        "inherits_from:Requirement"
      ],
      "SpecifierRequirement": [
        "inherits_from:Requirement"
      ],
      "SpecifierWithoutExtrasRequirement": [
        "inherits_from:SpecifierRequirement"
      ],
      "RequiresPythonRequirement": [
        "inherits_from:Requirement"
      ],
      "UnsatisfiableRequirement": [
        "inherits_from:Requirement"
      ],
      "TrackerId": [
        "inherits_from:str"
      ],
      "MissingCallableSuffix": [
        "inherits_from:InstallationError"
      ],
      "PipScriptMaker": [
        "inherits_from:ScriptMaker"
      ],
      "BadMetadata": [
        "inherits_from:ValueError"
      ],
      "BasePath": [
        "inherits_from:Protocol"
      ],
      "NDFrameApply": [
        "inherits_from:Apply"
      ],
      "FrameApply": [
        "inherits_from:NDFrameApply"
      ],
      "FrameRowApply": [
        "inherits_from:FrameApply"
      ],
      "FrameColumnApply": [
        "inherits_from:FrameApply"
      ],
      "SeriesApply": [
        "inherits_from:NDFrameApply"
      ],
      "GroupByApply": [
        "inherits_from:Apply"
      ],
      "ResamplerWindowApply": [
        "inherits_from:GroupByApply"
      ],
      "PandasObject": [
        "inherits_from:DirNamesMixin"
      ],
      "IndexOpsMixin": [
        "inherits_from:OpsMixin"
      ],
      "DataFrame": [
        "inherits_from:ABC",
        "inherits_from:NDFrame",
        "inherits_from:OpsMixin"
      ],
      "NDFrame": [
        "inherits_from:PandasObject"
      ],
      "_LocationIndexer": [
        "inherits_from:NDFrameIndexerBase"
      ],
      "_LocIndexer": [
        "inherits_from:_LocationIndexer"
      ],
      "_iLocIndexer": [
        "inherits_from:_LocationIndexer"
      ],
      "_ScalarAccessIndexer": [
        "inherits_from:NDFrameIndexerBase"
      ],
      "_AtIndexer": [
        "inherits_from:_ScalarAccessIndexer"
      ],
      "_iAtIndexer": [
        "inherits_from:_ScalarAccessIndexer"
      ],
      "Resampler": [
        "inherits_from:PandasObject",
        "inherits_from:BaseGroupBy"
      ],
      "_GroupByMixin": [
        "inherits_from:PandasObject",
        "inherits_from:SelectionMixin"
      ],
      "DatetimeIndexResampler": [
        "inherits_from:Resampler"
      ],
      "DatetimeIndexResamplerGroupby": [
        "inherits_from:DatetimeIndexResampler",
        "inherits_from:_GroupByMixin"
      ],
      "PeriodIndexResampler": [
        "inherits_from:DatetimeIndexResampler"
      ],
      "PeriodIndexResamplerGroupby": [
        "inherits_from:PeriodIndexResampler",
        "inherits_from:_GroupByMixin"
      ],
      "TimedeltaIndexResampler": [
        "inherits_from:DatetimeIndexResampler"
      ],
      "TimedeltaIndexResamplerGroupby": [
        "inherits_from:TimedeltaIndexResampler",
        "inherits_from:_GroupByMixin"
      ],
      "TimeGrouper": [
        "inherits_from:Grouper"
      ],
      "Series": [
        "inherits_from:Serialisable",
        "inherits_from:NDFrame"
      ],
      "IntCastingNaNError": [
        "inherits_from:ValueError"
      ],
      "NullFrequencyError": [
        "inherits_from:ValueError"
      ],
      "PerformanceWarning": [
        "inherits_from:Warning"
      ],
      "UnsupportedFunctionCall": [
        "inherits_from:ValueError"
      ],
      "UnsortedIndexError": [
        "inherits_from:KeyError"
      ],
      "ParserError": [
        "inherits_from:ValueError"
      ],
      "DtypeWarning": [
        "inherits_from:Warning"
      ],
      "EmptyDataError": [
        "inherits_from:ValueError"
      ],
      "ParserWarning": [
        "inherits_from:Warning"
      ],
      "MergeError": [
        "inherits_from:ValueError"
      ],
      "AbstractMethodError": [
        "inherits_from:NotImplementedError"
      ],
      "NumbaUtilError": [
        "inherits_from:Exception"
      ],
      "DuplicateLabelError": [
        "inherits_from:ValueError"
      ],
      "InvalidIndexError": [
        "inherits_from:Exception"
      ],
      "DataError": [
        "inherits_from:Exception"
      ],
      "SpecificationError": [
        "inherits_from:Exception"
      ],
      "SettingWithCopyError": [
        "inherits_from:ValueError"
      ],
      "SettingWithCopyWarning": [
        "inherits_from:Warning"
      ],
      "ChainedAssignmentError": [
        "inherits_from:Warning"
      ],
      "NumExprClobberingError": [
        "inherits_from:NameError"
      ],
      "UndefinedVariableError": [
        "inherits_from:NameError"
      ],
      "IndexingError": [
        "inherits_from:Exception"
      ],
      "PyperclipException": [
        "inherits_from:RuntimeError"
      ],
      "PyperclipWindowsException": [
        "inherits_from:PyperclipException"
      ],
      "CSSWarning": [
        "inherits_from:UserWarning"
      ],
      "PossibleDataLossError": [
        "inherits_from:Exception"
      ],
      "ClosedFileError": [
        "inherits_from:Exception"
      ],
      "IncompatibilityWarning": [
        "inherits_from:Warning"
      ],
      "AttributeConflictWarning": [
        "inherits_from:Warning"
      ],
      "DatabaseError": [
        "inherits_from:OSError"
      ],
      "PossiblePrecisionLoss": [
        "inherits_from:Warning"
      ],
      "ValueLabelTypeMismatch": [
        "inherits_from:Warning"
      ],
      "InvalidColumnName": [
        "inherits_from:Warning"
      ],
      "CategoricalConversionWarning": [
        "inherits_from:Warning"
      ],
      "LossySetitemError": [
        "inherits_from:Exception"
      ],
      "NoBufferPresent": [
        "inherits_from:Exception"
      ],
      "InvalidComparison": [
        "inherits_from:Exception"
      ],
      "_BufferedWriter": [
        "inherits_from:BytesIO",
        "inherits_from:ABC"
      ],
      "_BytesTarFile": [
        "inherits_from:_BufferedWriter"
      ],
      "_BytesZipFile": [
        "inherits_from:_BufferedWriter"
      ],
      "_BeautifulSoupHtml5LibFrameParser": [
        "inherits_from:_HtmlFrameParser"
      ],
      "_LxmlFrameParser": [
        "inherits_from:_HtmlFrameParser",
        "inherits_from:_XMLFrameParser"
      ],
      "PyArrowImpl": [
        "inherits_from:BaseImpl"
      ],
      "FastParquetImpl": [
        "inherits_from:BaseImpl"
      ],
      "GenericIndexCol": [
        "inherits_from:IndexCol"
      ],
      "DataCol": [
        "inherits_from:IndexCol"
      ],
      "DataIndexableCol": [
        "inherits_from:DataCol"
      ],
      "GenericDataIndexableCol": [
        "inherits_from:DataIndexableCol"
      ],
      "GenericFixed": [
        "inherits_from:Fixed"
      ],
      "SeriesFixed": [
        "inherits_from:GenericFixed"
      ],
      "BlockManagerFixed": [
        "inherits_from:GenericFixed"
      ],
      "FrameFixed": [
        "inherits_from:BlockManagerFixed"
      ],
      "WORMTable": [
        "inherits_from:Table"
      ],
      "AppendableTable": [
        "inherits_from:Table"
      ],
      "AppendableFrameTable": [
        "inherits_from:AppendableTable"
      ],
      "AppendableSeriesTable": [
        "inherits_from:AppendableFrameTable"
      ],
      "AppendableMultiSeriesTable": [
        "inherits_from:AppendableSeriesTable"
      ],
      "GenericTable": [
        "inherits_from:AppendableFrameTable"
      ],
      "AppendableMultiFrameTable": [
        "inherits_from:AppendableFrameTable"
      ],
      "SQLTable": [
        "inherits_from:PandasObject"
      ],
      "PandasSQL": [
        "inherits_from:PandasObject",
        "inherits_from:ABC"
      ],
      "SQLAlchemyEngine": [
        "inherits_from:BaseEngine"
      ],
      "SQLDatabase": [
        "inherits_from:PandasSQL"
      ],
      "ADBCDatabase": [
        "inherits_from:PandasSQL"
      ],
      "SQLiteTable": [
        "inherits_from:SQLTable"
      ],
      "SQLiteDatabase": [
        "inherits_from:PandasSQL"
      ],
      "StataNonCatValueLabel": [
        "inherits_from:StataValueLabel"
      ],
      "StataReader": [
        "inherits_from:StataParser"
      ],
      "StataWriter": [
        "inherits_from:StataParser"
      ],
      "StataWriter117": [
        "inherits_from:StataWriter"
      ],
      "StataWriterUTF8": [
        "inherits_from:StataWriter117"
      ],
      "_EtreeFrameParser": [
        "inherits_from:_XMLFrameParser"
      ],
      "PlotAccessor": [
        "inherits_from:PandasObject"
      ],
      "_Options": [
        "inherits_from:dict"
      ],
      "MyList": [
        "inherits_from:list"
      ],
      "_TimedeltaFrequencyInferer": [
        "inherits_from:_FrequencyInferer"
      ],
      "HolidayCalendarMetaClass": [
        "inherits_from:type"
      ],
      "USFederalHolidayCalendar": [
        "inherits_from:AbstractHolidayCalendar"
      ],
      "DeprecatedOption": [
        "inherits_from:NamedTuple"
      ],
      "RegisteredOption": [
        "inherits_from:NamedTuple"
      ],
      "option_context": [
        "inherits_from:ContextDecorator"
      ],
      "SubclassedSeries": [
        "inherits_from:Series"
      ],
      "SubclassedDataFrame": [
        "inherits_from:DataFrame"
      ],
      "TestPDApi": [
        "inherits_from:Base"
      ],
      "TestApi": [
        "inherits_from:Base"
      ],
      "TestTesting": [
        "inherits_from:Base"
      ],
      "TestTypes": [
        "inherits_from:Base"
      ],
      "ComparisonOps": [
        "inherits_from:BaseOpsUtil"
      ],
      "DecimalDtype2": [
        "inherits_from:DecimalDtype"
      ],
      "DecimalArray2": [
        "inherits_from:DecimalArray"
      ],
      "TestDatetimeArray": [
        "inherits_from:SharedTests"
      ],
      "TestTimedeltaArray": [
        "inherits_from:SharedTests"
      ],
      "TestPeriodArray": [
        "inherits_from:SharedTests"
      ],
      "Delegate": [
        "inherits_from:PandasObject",
        "inherits_from:PandasDelegate"
      ],
      "T": [
        "inherits_from:NoNewAttributesMixin"
      ],
      "NotTZDtype": [
        "inherits_from:ExtensionDtype"
      ],
      "MyNumericDType": [
        "inherits_from:ExtensionDtype"
      ],
      "TestCategoricalDtype": [
        "inherits_from:Base"
      ],
      "TestDatetimeTZDtype": [
        "inherits_from:Base"
      ],
      "TestPeriodDtype": [
        "inherits_from:Base"
      ],
      "TestIntervalDtype": [
        "inherits_from:Base"
      ],
      "MyDataFrame": [
        "inherits_from:DataFrame"
      ],
      "DtypeList": [
        "inherits_from:list"
      ],
      "Numeric": [
        "inherits_from:Number"
      ],
      "OldArrowExtensionArray": [
        "inherits_from:ArrowExtensionArray"
      ],
      "DummyArray": [
        "inherits_from:ExtensionArray"
      ],
      "MyEA": [
        "inherits_from:ExtensionArray"
      ],
      "CustomDict": [
        "inherits_from:dict"
      ],
      "DatetimeSubclass": [
        "inherits_from:datetime"
      ],
      "TestDataFrameQueryNumExprPython": [
        "inherits_from:TestDataFrameQueryNumExprPandas"
      ],
      "TestDataFrameQueryPythonPandas": [
        "inherits_from:TestDataFrameQueryNumExprPandas"
      ],
      "TestDataFrameQueryPythonPython": [
        "inherits_from:TestDataFrameQueryNumExprPython"
      ],
      "MySubclassWithMetadata": [
        "inherits_from:DataFrame"
      ],
      "SimpleDataFrameSubClass": [
        "inherits_from:DataFrame"
      ],
      "SimpleSeriesSubClass": [
        "inherits_from:Series"
      ],
      "CustomSeries": [
        "inherits_from:Series"
      ],
      "CustomDataFrame": [
        "inherits_from:DataFrame"
      ],
      "A": [
        "inherits_from:OrderedDict",
        "inherits_from:DataFrame"
      ],
      "RaisingObjectException": [
        "inherits_from:Exception"
      ],
      "TestGroupVarFloat64": [
        "inherits_from:GroupVarTestMixin"
      ],
      "TestGroupVarFloat32": [
        "inherits_from:GroupVarTestMixin"
      ],
      "E": [
        "inherits_from:Enum"
      ],
      "CustomIndex": [
        "inherits_from:Index"
      ],
      "TestSetitemCoercion": [
        "inherits_from:CoercionBase"
      ],
      "TestInsertIndexCoercion": [
        "inherits_from:CoercionBase"
      ],
      "TestWhereCoercion": [
        "inherits_from:CoercionBase"
      ],
      "TestFillnaSeriesCoercion": [
        "inherits_from:CoercionBase"
      ],
      "TestReplaceSeriesCoercion": [
        "inherits_from:CoercionBase"
      ],
      "TestMemoryFS": [
        "inherits_from:MemoryFileSystem"
      ],
      "MockGCSFileSystem": [
        "inherits_from:AbstractFileSystem"
      ],
      "UnseekableStringIO": [
        "inherits_from:StringIO"
      ],
      "TestBasic": [
        "inherits_from:Base"
      ],
      "TestParquetPyArrow": [
        "inherits_from:Base"
      ],
      "TestParquetFastParquet": [
        "inherits_from:Base"
      ],
      "Temporary": [
        "inherits_from:Base"
      ],
      "DummyException": [
        "inherits_from:Exception"
      ],
      "MySeries": [
        "inherits_from:Series"
      ],
      "SubDatetime": [
        "inherits_from:datetime"
      ],
      "BadIndexer": [
        "inherits_from:BaseIndexer"
      ],
      "CustomIndexer": [
        "inherits_from:BaseIndexer"
      ],
      "SimpleIndexer": [
        "inherits_from:BaseIndexer"
      ],
      "TestCalendar": [
        "inherits_from:AbstractHolidayCalendar"
      ],
      "testCalendar": [
        "inherits_from:AbstractHolidayCalendar"
      ],
      "NoHolidaysCalendar": [
        "inherits_from:AbstractHolidayCalendar"
      ],
      "MLKCalendar": [
        "inherits_from:AbstractHolidayCalendar"
      ],
      "MemorialDay": [
        "inherits_from:AbstractHolidayCalendar"
      ],
      "TestHolidayCalendar": [
        "inherits_from:AbstractHolidayCalendar"
      ],
      "TestSetitemCastingEquivalents": [
        "inherits_from:SetitemCastingEquivalents"
      ],
      "TestSetitemTimedelta64IntoNumeric": [
        "inherits_from:SetitemCastingEquivalents"
      ],
      "TestSetitemDT64IntoInt": [
        "inherits_from:SetitemCastingEquivalents"
      ],
      "TestSetitemNAPeriodDtype": [
        "inherits_from:SetitemCastingEquivalents"
      ],
      "TestSetitemNADatetimeLikeDtype": [
        "inherits_from:SetitemCastingEquivalents"
      ],
      "TestSetitemMismatchedTZCastsToObject": [
        "inherits_from:SetitemCastingEquivalents"
      ],
      "TestSeriesNoneCoercion": [
        "inherits_from:SetitemCastingEquivalents"
      ],
      "TestSetitemFloatIntervalWithIntIntervalValues": [
        "inherits_from:SetitemCastingEquivalents"
      ],
      "TestSetitemRangeIntoIntegerSeries": [
        "inherits_from:SetitemCastingEquivalents"
      ],
      "TestSetitemFloatNDarrayIntoIntegerSeries": [
        "inherits_from:SetitemCastingEquivalents"
      ],
      "TestSetitemIntoIntegerSeriesNeedsUpcast": [
        "inherits_from:SetitemCastingEquivalents"
      ],
      "TestSmallIntegerSetitemUpcast": [
        "inherits_from:SetitemCastingEquivalents"
      ],
      "CoercionTest": [
        "inherits_from:SetitemCastingEquivalents"
      ],
      "TestCoercionInt8": [
        "inherits_from:CoercionTest"
      ],
      "TestCoercionObject": [
        "inherits_from:CoercionTest"
      ],
      "TestCoercionComplex": [
        "inherits_from:CoercionTest"
      ],
      "TestCoercionBool": [
        "inherits_from:CoercionTest"
      ],
      "TestCoercionInt64": [
        "inherits_from:CoercionTest"
      ],
      "TestCoercionFloat64": [
        "inherits_from:CoercionTest"
      ],
      "TestCoercionFloat32": [
        "inherits_from:CoercionTest"
      ],
      "TestCoercionDatetime64": [
        "inherits_from:CoercionTest"
      ],
      "TestCoercionDatetime64TZ": [
        "inherits_from:CoercionTest"
      ],
      "TestCoercionTimedelta64": [
        "inherits_from:CoercionTest"
      ],
      "TestPeriodIntervalCoercion": [
        "inherits_from:CoercionTest"
      ],
      "DictWithMissing": [
        "inherits_from:dict"
      ],
      "DictWithoutMissing": [
        "inherits_from:dict"
      ],
      "NonDictMappingWithMissing": [
        "inherits_from:non_dict_mapping_subclass"
      ],
      "SubclassedFrame": [
        "inherits_from:DataFrame"
      ],
      "MyCustomTimedelta": [
        "inherits_from:Timedelta"
      ],
      "NotADataFrame": [
        "inherits_from:DataFrame"
      ],
      "DummyClass": [
        "inherits_from:ExcelWriter"
      ],
      "CParser": [
        "inherits_from:BaseParser"
      ],
      "CParserHighMemory": [
        "inherits_from:CParser"
      ],
      "CParserLowMemory": [
        "inherits_from:CParser"
      ],
      "PythonParser": [
        "inherits_from:BaseParser",
        "inherits_from:ParserBase"
      ],
      "PyArrowParser": [
        "inherits_from:BaseParser"
      ],
      "NoNextBuffer": [
        "inherits_from:StringIO"
      ],
      "MyTextFileReader": [
        "inherits_from:TextFileReader"
      ],
      "MyCParserWrapper": [
        "inherits_from:CParserWrapper"
      ],
      "NoSeekTellBuffer": [
        "inherits_from:StringIO"
      ],
      "CustomStyler": [
        "inherits_from:Styler"
      ],
      "TestDropDuplicatesPeriodIndex": [
        "inherits_from:DropDuplicates"
      ],
      "TestDropDuplicatesDatetimeIndex": [
        "inherits_from:DropDuplicates"
      ],
      "TestDropDuplicatesTimedeltaIndex": [
        "inherits_from:DropDuplicates"
      ],
      "TestPeriodIndexEquals": [
        "inherits_from:EqualsTests"
      ],
      "TestDatetimeIndexEquals": [
        "inherits_from:EqualsTests"
      ],
      "TestTimedeltaIndexEquals": [
        "inherits_from:EqualsTests"
      ],
      "TestDatetimeIndexNA": [
        "inherits_from:NATests"
      ],
      "TestTimedeltaIndexNA": [
        "inherits_from:NATests"
      ],
      "TestPeriodIndexNA": [
        "inherits_from:NATests"
      ],
      "TestIntSubtype": [
        "inherits_from:AstypeTests"
      ],
      "TestFloatSubtype": [
        "inherits_from:AstypeTests"
      ],
      "TestDatetimelikeSubtype": [
        "inherits_from:AstypeTests"
      ],
      "TestFromArrays": [
        "inherits_from:ConstructorTests"
      ],
      "TestFromBreaks": [
        "inherits_from:ConstructorTests"
      ],
      "TestFromTuples": [
        "inherits_from:ConstructorTests"
      ],
      "TestClassConstructors": [
        "inherits_from:ConstructorTests"
      ],
      "mystring": [
        "inherits_from:str"
      ],
      "TestSeriesDot": [
        "inherits_from:DotSharedTests"
      ],
      "TestDataFrameDot": [
        "inherits_from:DotSharedTests"
      ],
      "DummyDtype": [
        "inherits_from:ExtensionDtype"
      ],
      "TestDataFrameSetAxis": [
        "inherits_from:SharedSetAxisTests"
      ],
      "TestSeriesSetAxis": [
        "inherits_from:SharedSetAxisTests"
      ],
      "Thing": [
        "inherits_from:set"
      ],
      "FloatAttrDtype": [
        "inherits_from:ExtensionDtype"
      ],
      "FloatAttrArray": [
        "inherits_from:ExtensionArray"
      ],
      "NDArrayBacked2DTests": [
        "inherits_from:Dim2CompatTests"
      ],
      "BaseArithmeticOpsTests": [
        "inherits_from:BaseOpsUtil"
      ],
      "BaseComparisonOpsTests": [
        "inherits_from:BaseOpsUtil"
      ],
      "BaseUnaryOpsTests": [
        "inherits_from:BaseOpsUtil"
      ],
      "BaseNoReduceTests": [
        "inherits_from:BaseReduceTests"
      ],
      "BaseNumericReduceTests": [
        "inherits_from:BaseReduceTests"
      ],
      "BaseBooleanReduceTests": [
        "inherits_from:BaseReduceTests"
      ],
      "ExtensionTests": [
        "inherits_from:BaseConstructorsTests",
        "inherits_from:BaseReshapingTests",
        "inherits_from:Dim2CompatTests",
        "inherits_from:BaseArithmeticOpsTests",
        "inherits_from:BaseIndexTests",
        "inherits_from:BaseReduceTests",
        "inherits_from:BaseMissingTests",
        "inherits_from:BaseParsingTests",
        "inherits_from:BaseCastingTests",
        "inherits_from:BaseUnaryOpsTests",
        "inherits_from:BaseSetitemTests",
        "inherits_from:BasePrintingTests",
        "inherits_from:BaseComparisonOpsTests",
        "inherits_from:BaseAccumulateTests",
        "inherits_from:BaseDtypeTests",
        "inherits_from:BaseMethodsTests",
        "inherits_from:BaseGetitemTests",
        "inherits_from:BaseGroupbyTests",
        "inherits_from:BaseInterfaceTests"
      ],
      "DateDtype": [
        "inherits_from:ExtensionDtype"
      ],
      "DateArray": [
        "inherits_from:ExtensionArray"
      ],
      "DecimalDtype": [
        "inherits_from:ExtensionDtype"
      ],
      "DecimalArray": [
        "inherits_from:ExtensionArray",
        "inherits_from:ExtensionScalarOpsMixin",
        "inherits_from:OpsMixin"
      ],
      "DecimalArrayWithoutFromSequence": [
        "inherits_from:DecimalArray"
      ],
      "DecimalArrayWithoutCoercion": [
        "inherits_from:DecimalArrayWithoutFromSequence"
      ],
      "JSONDtype": [
        "inherits_from:ExtensionDtype"
      ],
      "JSONArray": [
        "inherits_from:ExtensionArray"
      ],
      "ListDtype": [
        "inherits_from:ExtensionDtype"
      ],
      "ListArray": [
        "inherits_from:ExtensionArray"
      ],
      "TestComparisonOps": [
        "inherits_from:ComparisonOps",
        "inherits_from:NumericOps"
      ],
      "TestLogicalOps": [
        "inherits_from:BaseOpsUtil"
      ],
      "SubclassedCategorical": [
        "inherits_from:Categorical"
      ],
      "MyStringArray": [
        "inherits_from:BaseMaskedArray"
      ],
      "BoxPlot": [
        "inherits_from:LinePlot"
      ],
      "BP": [
        "inherits_from:NamedTuple"
      ],
      "TimeFormatter": [
        "inherits_from:Formatter"
      ],
      "TimeSeries_DateLocator": [
        "inherits_from:Locator"
      ],
      "TimeSeries_DateFormatter": [
        "inherits_from:Formatter"
      ],
      "TimeSeries_TimedeltaFormatter": [
        "inherits_from:Formatter"
      ],
      "MPLPlot": [
        "inherits_from:ABC"
      ],
      "PlanePlot": [
        "inherits_from:MPLPlot",
        "inherits_from:ABC"
      ],
      "ScatterPlot": [
        "inherits_from:PlanePlot"
      ],
      "HexBinPlot": [
        "inherits_from:PlanePlot"
      ],
      "LinePlot": [
        "inherits_from:MPLPlot"
      ],
      "AreaPlot": [
        "inherits_from:LinePlot"
      ],
      "BarPlot": [
        "inherits_from:MPLPlot"
      ],
      "BarhPlot": [
        "inherits_from:BarPlot"
      ],
      "PiePlot": [
        "inherits_from:MPLPlot"
      ],
      "HistPlot": [
        "inherits_from:LinePlot"
      ],
      "KdePlot": [
        "inherits_from:HistPlot"
      ],
      "PyperclipTimeoutException": [
        "inherits_from:PyperclipException"
      ],
      "ODSWriter": [
        "inherits_from:ExcelWriter"
      ],
      "OpenpyxlWriter": [
        "inherits_from:ExcelWriter"
      ],
      "XlsxWriter": [
        "inherits_from:ExcelWriter"
      ],
      "CssExcelCell": [
        "inherits_from:ExcelCell"
      ],
      "FloatArrayFormatter": [
        "inherits_from:_GenericArrayFormatter"
      ],
      "_IntArrayFormatter": [
        "inherits_from:_GenericArrayFormatter"
      ],
      "_Datetime64Formatter": [
        "inherits_from:_GenericArrayFormatter"
      ],
      "_ExtensionArrayFormatter": [
        "inherits_from:_GenericArrayFormatter"
      ],
      "_Datetime64TZFormatter": [
        "inherits_from:_Datetime64Formatter"
      ],
      "_Timedelta64Formatter": [
        "inherits_from:_GenericArrayFormatter"
      ],
      "NotebookFormatter": [
        "inherits_from:HTMLFormatter"
      ],
      "_BaseInfo": [
        "inherits_from:ABC"
      ],
      "DataFrameInfo": [
        "inherits_from:_BaseInfo"
      ],
      "SeriesInfo": [
        "inherits_from:_BaseInfo"
      ],
      "_DataFrameInfoPrinter": [
        "inherits_from:_InfoPrinterAbstract"
      ],
      "_SeriesInfoPrinter": [
        "inherits_from:_InfoPrinterAbstract"
      ],
      "_TableBuilderAbstract": [
        "inherits_from:ABC"
      ],
      "_DataFrameTableBuilder": [
        "inherits_from:_TableBuilderAbstract"
      ],
      "_DataFrameTableBuilderNonVerbose": [
        "inherits_from:_DataFrameTableBuilder"
      ],
      "_TableBuilderVerboseMixin": [
        "inherits_from:_TableBuilderAbstract"
      ],
      "_DataFrameTableBuilderVerbose": [
        "inherits_from:_DataFrameTableBuilder",
        "inherits_from:_TableBuilderVerboseMixin"
      ],
      "_SeriesTableBuilder": [
        "inherits_from:_TableBuilderAbstract"
      ],
      "_SeriesTableBuilderNonVerbose": [
        "inherits_from:_SeriesTableBuilder"
      ],
      "_SeriesTableBuilderVerbose": [
        "inherits_from:_SeriesTableBuilder",
        "inherits_from:_TableBuilderVerboseMixin"
      ],
      "_EastAsianTextAdjustment": [
        "inherits_from:_TextAdjustment"
      ],
      "TableSchemaFormatter": [
        "inherits_from:BaseFormatter"
      ],
      "Styler": [
        "inherits_from:StylerRenderer"
      ],
      "MyStyler": [
        "inherits_from:cls"
      ],
      "CSSDict": [
        "inherits_from:TypedDict"
      ],
      "EtreeXMLFormatter": [
        "inherits_from:_BaseXMLFormatter"
      ],
      "LxmlXMLFormatter": [
        "inherits_from:_BaseXMLFormatter"
      ],
      "Writer": [
        "inherits_from:ABC"
      ],
      "SeriesWriter": [
        "inherits_from:Writer"
      ],
      "FrameWriter": [
        "inherits_from:Writer"
      ],
      "JSONTableWriter": [
        "inherits_from:FrameWriter"
      ],
      "SeriesParser": [
        "inherits_from:Parser"
      ],
      "FrameParser": [
        "inherits_from:Parser"
      ],
      "ArrowParserWrapper": [
        "inherits_from:ParserBase"
      ],
      "BadLineHandleMethod": [
        "inherits_from:Enum"
      ],
      "CParserWrapper": [
        "inherits_from:ParserBase"
      ],
      "FixedWidthFieldParser": [
        "inherits_from:PythonParser"
      ],
      "_C_Parser_Defaults": [
        "inherits_from:TypedDict"
      ],
      "_Fwf_Defaults": [
        "inherits_from:TypedDict"
      ],
      "_DeprecationConfig": [
        "inherits_from:NamedTuple"
      ],
      "SAS7BDATReader": [
        "inherits_from:ReaderBase"
      ],
      "ReaderBase": [
        "inherits_from:ABC"
      ],
      "XportReader": [
        "inherits_from:ReaderBase"
      ],
      "ExtensionArraySupportsAnyAll": [
        "inherits_from:ExtensionArray"
      ],
      "ExtensionScalarOpsMixin": [
        "inherits_from:ExtensionOpsMixin"
      ],
      "BooleanDtype": [
        "inherits_from:BaseMaskedDtype"
      ],
      "BooleanArray": [
        "inherits_from:BaseMaskedArray"
      ],
      "Categorical": [
        "inherits_from:PandasObject",
        "inherits_from:NDArrayBackedExtensionArray",
        "inherits_from:ObjectStringArrayMixin"
      ],
      "CategoricalAccessor": [
        "inherits_from:PandasObject",
        "inherits_from:PandasDelegate",
        "inherits_from:NoNewAttributesMixin"
      ],
      "DatetimeLikeArrayMixin": [
        "inherits_from:NDArrayBackedExtensionArray",
        "inherits_from:OpsMixin"
      ],
      "DatelikeOps": [
        "inherits_from:DatetimeLikeArrayMixin"
      ],
      "TimelikeOps": [
        "inherits_from:DatetimeLikeArrayMixin"
      ],
      "FloatingDtype": [
        "inherits_from:NumericDtype"
      ],
      "FloatingArray": [
        "inherits_from:NumericArray"
      ],
      "Float32Dtype": [
        "inherits_from:FloatingDtype"
      ],
      "Float64Dtype": [
        "inherits_from:FloatingDtype"
      ],
      "IntegerDtype": [
        "inherits_from:NumericDtype"
      ],
      "IntegerArray": [
        "inherits_from:NumericArray"
      ],
      "Int8Dtype": [
        "inherits_from:IntegerDtype"
      ],
      "Int16Dtype": [
        "inherits_from:IntegerDtype"
      ],
      "Int32Dtype": [
        "inherits_from:IntegerDtype"
      ],
      "Int64Dtype": [
        "inherits_from:IntegerDtype"
      ],
      "UInt8Dtype": [
        "inherits_from:IntegerDtype"
      ],
      "UInt16Dtype": [
        "inherits_from:IntegerDtype"
      ],
      "UInt32Dtype": [
        "inherits_from:IntegerDtype"
      ],
      "UInt64Dtype": [
        "inherits_from:IntegerDtype"
      ],
      "IntervalArray": [
        "inherits_from:IntervalMixin",
        "inherits_from:ExtensionArray"
      ],
      "BaseMaskedArray": [
        "inherits_from:ExtensionArray",
        "inherits_from:OpsMixin"
      ],
      "NumericDtype": [
        "inherits_from:BaseMaskedDtype"
      ],
      "NumericArray": [
        "inherits_from:BaseMaskedArray"
      ],
      "NumpyExtensionArray": [
        "inherits_from:NDArrayBackedExtensionArray",
        "inherits_from:ObjectStringArrayMixin",
        "inherits_from:OpsMixin"
      ],
      "StringDtype": [
        "inherits_from:StorageExtensionDtype"
      ],
      "BaseStringArray": [
        "inherits_from:ExtensionArray"
      ],
      "StringArray": [
        "inherits_from:BaseStringArray",
        "inherits_from:NumpyExtensionArray"
      ],
      "ArrowStringArray": [
        "inherits_from:ArrowExtensionArray",
        "inherits_from:BaseStringArray",
        "inherits_from:ObjectStringArrayMixin"
      ],
      "ArrowStringArrayNumpySemantics": [
        "inherits_from:ArrowStringArray"
      ],
      "NDArrayBackedExtensionArray": [
        "inherits_from:NDArrayBacked",
        "inherits_from:ExtensionArray"
      ],
      "NumExprEngine": [
        "inherits_from:AbstractEngine"
      ],
      "PythonEngine": [
        "inherits_from:AbstractEngine"
      ],
      "PandasExprVisitor": [
        "inherits_from:BaseExprVisitor"
      ],
      "PythonExprVisitor": [
        "inherits_from:BaseExprVisitor"
      ],
      "Constant": [
        "inherits_from:Term"
      ],
      "BinOp": [
        "inherits_from:Op"
      ],
      "UnaryOp": [
        "inherits_from:Op"
      ],
      "MathCall": [
        "inherits_from:Op"
      ],
      "FilterBinOp": [
        "inherits_from:BinOp"
      ],
      "JointFilterBinOp": [
        "inherits_from:FilterBinOp"
      ],
      "ConditionBinOp": [
        "inherits_from:BinOp"
      ],
      "JointConditionBinOp": [
        "inherits_from:ConditionBinOp"
      ],
      "PyTablesExprVisitor": [
        "inherits_from:BaseExprVisitor"
      ],
      "StorageExtensionDtype": [
        "inherits_from:ExtensionDtype"
      ],
      "PandasExtensionDtype": [
        "inherits_from:ExtensionDtype"
      ],
      "CategoricalDtypeType": [
        "inherits_from:type"
      ],
      "CategoricalDtype": [
        "inherits_from:PandasExtensionDtype",
        "inherits_from:ExtensionDtype"
      ],
      "DatetimeTZDtype": [
        "inherits_from:PandasExtensionDtype"
      ],
      "PeriodDtype": [
        "inherits_from:PandasExtensionDtype",
        "inherits_from:PeriodDtypeBase"
      ],
      "IntervalDtype": [
        "inherits_from:PandasExtensionDtype"
      ],
      "NumpyEADtype": [
        "inherits_from:ExtensionDtype"
      ],
      "BaseMaskedDtype": [
        "inherits_from:ExtensionDtype"
      ],
      "SparseDtype": [
        "inherits_from:ExtensionDtype"
      ],
      "ArrowDtype": [
        "inherits_from:StorageExtensionDtype"
      ],
      "NamedAgg": [
        "inherits_from:NamedTuple"
      ],
      "GroupByPlot": [
        "inherits_from:PandasObject"
      ],
      "BaseGroupBy": [
        "inherits_from:PandasObject",
        "inherits_from:GroupByIndexingMixin"
      ],
      "BinGrouper": [
        "inherits_from:BaseGrouper"
      ],
      "SeriesSplitter": [
        "inherits_from:DataSplitter"
      ],
      "FrameSplitter": [
        "inherits_from:DataSplitter"
      ],
      "FixedWindowIndexer": [
        "inherits_from:BaseIndexer"
      ],
      "VariableWindowIndexer": [
        "inherits_from:BaseIndexer"
      ],
      "VariableOffsetWindowIndexer": [
        "inherits_from:BaseIndexer"
      ],
      "ExpandingIndexer": [
        "inherits_from:BaseIndexer"
      ],
      "FixedForwardWindowIndexer": [
        "inherits_from:BaseIndexer"
      ],
      "GroupbyIndexer": [
        "inherits_from:BaseIndexer"
      ],
      "ExponentialMovingWindowIndexer": [
        "inherits_from:BaseIndexer"
      ],
      "Properties": [
        "inherits_from:PandasObject",
        "inherits_from:PandasDelegate",
        "inherits_from:Serialisable",
        "inherits_from:NoNewAttributesMixin"
      ],
      "ArrowTemporalProperties": [
        "inherits_from:PandasObject",
        "inherits_from:PandasDelegate",
        "inherits_from:NoNewAttributesMixin"
      ],
      "DatetimeProperties": [
        "inherits_from:Properties"
      ],
      "TimedeltaProperties": [
        "inherits_from:Properties"
      ],
      "PeriodProperties": [
        "inherits_from:Properties"
      ],
      "CombinedDatetimelikeProperties": [
        "inherits_from:TimedeltaProperties",
        "inherits_from:DatetimeProperties",
        "inherits_from:PeriodProperties"
      ],
      "Index": [
        "inherits_from:PandasObject",
        "inherits_from:IndexOpsMixin",
        "inherits_from:Serialisable"
      ],
      "CategoricalIndex": [
        "inherits_from:NDArrayBackedExtensionIndex"
      ],
      "DatetimeIndexOpsMixin": [
        "inherits_from:NDArrayBackedExtensionIndex",
        "inherits_from:ABC"
      ],
      "DatetimeTimedeltaMixin": [
        "inherits_from:DatetimeIndexOpsMixin",
        "inherits_from:ABC"
      ],
      "DatetimeIndex": [
        "inherits_from:DatetimeTimedeltaMixin"
      ],
      "ExtensionIndex": [
        "inherits_from:Index"
      ],
      "NDArrayBackedExtensionIndex": [
        "inherits_from:ExtensionIndex"
      ],
      "FrozenList": [
        "inherits_from:PandasObject",
        "inherits_from:list"
      ],
      "IntervalIndex": [
        "inherits_from:ExtensionIndex"
      ],
      "MultiIndex": [
        "inherits_from:Index"
      ],
      "PeriodIndex": [
        "inherits_from:DatetimeIndexOpsMixin"
      ],
      "RangeIndex": [
        "inherits_from:Index"
      ],
      "TimedeltaIndex": [
        "inherits_from:DatetimeTimedeltaMixin"
      ],
      "PandasBuffer": [
        "inherits_from:Buffer"
      ],
      "PandasBufferPyarrow": [
        "inherits_from:Buffer"
      ],
      "PandasColumn": [
        "inherits_from:Column"
      ],
      "PandasDataFrameXchg": [
        "inherits_from:DataFrameXchg"
      ],
      "ColumnBuffers": [
        "inherits_from:TypedDict"
      ],
      "CategoricalDescription": [
        "inherits_from:TypedDict"
      ],
      "Buffer": [
        "inherits_from:ABC"
      ],
      "Column": [
        "inherits_from:ABC"
      ],
      "BaseArrayManager": [
        "inherits_from:DataManager"
      ],
      "ArrayManager": [
        "inherits_from:BaseArrayManager"
      ],
      "SingleArrayManager": [
        "inherits_from:BaseArrayManager",
        "inherits_from:SingleDataManager"
      ],
      "DataManager": [
        "inherits_from:PandasObject"
      ],
      "SingleDataManager": [
        "inherits_from:DataManager"
      ],
      "EABackedBlock": [
        "inherits_from:Block"
      ],
      "ExtensionBlock": [
        "inherits_from:EABackedBlock"
      ],
      "NumpyBlock": [
        "inherits_from:Block"
      ],
      "NumericBlock": [
        "inherits_from:NumpyBlock"
      ],
      "ObjectBlock": [
        "inherits_from:NumpyBlock"
      ],
      "NDArrayBackedExtensionBlock": [
        "inherits_from:EABackedBlock"
      ],
      "DatetimeLikeBlock": [
        "inherits_from:NDArrayBackedExtensionBlock"
      ],
      "DatetimeTZBlock": [
        "inherits_from:DatetimeLikeBlock"
      ],
      "BaseBlockManager": [
        "inherits_from:DataManager"
      ],
      "BlockManager": [
        "inherits_from:BaseBlockManager"
      ],
      "SingleBlockManager": [
        "inherits_from:BaseBlockManager",
        "inherits_from:SingleDataManager"
      ],
      "BlockPairInfo": [
        "inherits_from:NamedTuple"
      ],
      "NDFrameDescriberAbstract": [
        "inherits_from:ABC"
      ],
      "SeriesDescriber": [
        "inherits_from:NDFrameDescriberAbstract"
      ],
      "DataFrameDescriber": [
        "inherits_from:NDFrameDescriberAbstract"
      ],
      "SelectNSeries": [
        "inherits_from:SelectN"
      ],
      "SelectNFrame": [
        "inherits_from:SelectN"
      ],
      "_OrderedMerge": [
        "inherits_from:_MergeOperation"
      ],
      "_AsOfMerge": [
        "inherits_from:_OrderedMerge"
      ],
      "StringMethods": [
        "inherits_from:NoNewAttributesMixin"
      ],
      "ObjectStringArrayMixin": [
        "inherits_from:BaseStringArrayMethods"
      ],
      "YearMonthDayDict": [
        "inherits_from:TypedDict"
      ],
      "FulldatetimeDict": [
        "inherits_from:YearMonthDayDict"
      ],
      "ExponentialMovingWindow": [
        "inherits_from:BaseWindow"
      ],
      "ExponentialMovingWindowGroupby": [
        "inherits_from:ExponentialMovingWindow",
        "inherits_from:BaseWindowGroupby"
      ],
      "OnlineExponentialMovingWindow": [
        "inherits_from:ExponentialMovingWindow"
      ],
      "Expanding": [
        "inherits_from:RollingAndExpandingMixin"
      ],
      "ExpandingGroupby": [
        "inherits_from:BaseWindowGroupby",
        "inherits_from:Expanding"
      ],
      "BaseWindow": [
        "inherits_from:SelectionMixin"
      ],
      "BaseWindowGroupby": [
        "inherits_from:BaseWindow"
      ],
      "Window": [
        "inherits_from:BaseWindow"
      ],
      "RollingAndExpandingMixin": [
        "inherits_from:BaseWindow"
      ],
      "Rolling": [
        "inherits_from:RollingAndExpandingMixin"
      ],
      "RollingGroupby": [
        "inherits_from:BaseWindowGroupby",
        "inherits_from:Rolling"
      ],
      "ListAccessor": [
        "inherits_from:ArrowAccessor"
      ],
      "StructAccessor": [
        "inherits_from:ArrowAccessor"
      ],
      "ArrowExtensionArray": [
        "inherits_from:BaseStringArrayMethods",
        "inherits_from:ExtensionArraySupportsAnyAll",
        "inherits_from:ArrowStringArrayMixin",
        "inherits_from:OpsMixin"
      ],
      "SparseAccessor": [
        "inherits_from:PandasDelegate",
        "inherits_from:BaseAccessor"
      ],
      "SparseFrameAccessor": [
        "inherits_from:PandasDelegate",
        "inherits_from:BaseAccessor"
      ],
      "SparseArray": [
        "inherits_from:PandasObject",
        "inherits_from:ExtensionArray",
        "inherits_from:OpsMixin"
      ],
      "ellipsis": [
        "inherits_from:Enum"
      ],
      "Cell": [
        "inherits_from:StyleableObject"
      ],
      "MergedCell": [
        "inherits_from:StyleableObject"
      ],
      "TextBlock": [
        "inherits_from:Strict"
      ],
      "CellRichText": [
        "inherits_from:list"
      ],
      "PhoneticProperties": [
        "inherits_from:Serialisable"
      ],
      "PhoneticText": [
        "inherits_from:Serialisable"
      ],
      "InlineFont": [
        "inherits_from:Font"
      ],
      "RichText": [
        "inherits_from:Serialisable"
      ],
      "_AreaChartBase": [
        "inherits_from:ChartBase"
      ],
      "AreaChart": [
        "inherits_from:_AreaChartBase"
      ],
      "AreaChart3D": [
        "inherits_from:AreaChart"
      ],
      "ChartLines": [
        "inherits_from:Serialisable"
      ],
      "Scaling": [
        "inherits_from:Serialisable"
      ],
      "_BaseAxis": [
        "inherits_from:Serialisable"
      ],
      "DisplayUnitsLabel": [
        "inherits_from:Serialisable"
      ],
      "DisplayUnitsLabelList": [
        "inherits_from:Serialisable"
      ],
      "NumericAxis": [
        "inherits_from:_BaseAxis"
      ],
      "TextAxis": [
        "inherits_from:_BaseAxis"
      ],
      "DateAxis": [
        "inherits_from:TextAxis"
      ],
      "SeriesAxis": [
        "inherits_from:_BaseAxis"
      ],
      "_BarChartBase": [
        "inherits_from:ChartBase"
      ],
      "BarChart": [
        "inherits_from:_BarChartBase"
      ],
      "BarChart3D": [
        "inherits_from:_3DBase",
        "inherits_from:_BarChartBase"
      ],
      "BubbleChart": [
        "inherits_from:ChartBase"
      ],
      "ChartContainer": [
        "inherits_from:Serialisable"
      ],
      "Protection": [
        "inherits_from:Serialisable"
      ],
      "ExternalData": [
        "inherits_from:Serialisable"
      ],
      "ChartSpace": [
        "inherits_from:Serialisable"
      ],
      "NumFmt": [
        "inherits_from:Serialisable"
      ],
      "NumberValueDescriptor": [
        "inherits_from:NestedText"
      ],
      "NumVal": [
        "inherits_from:Serialisable"
      ],
      "NumData": [
        "inherits_from:Serialisable"
      ],
      "NumRef": [
        "inherits_from:Serialisable"
      ],
      "StrVal": [
        "inherits_from:Serialisable"
      ],
      "StrData": [
        "inherits_from:Serialisable"
      ],
      "StrRef": [
        "inherits_from:Serialisable"
      ],
      "NumDataSource": [
        "inherits_from:Serialisable"
      ],
      "Level": [
        "inherits_from:Serialisable"
      ],
      "MultiLevelStrData": [
        "inherits_from:Serialisable"
      ],
      "MultiLevelStrRef": [
        "inherits_from:Serialisable"
      ],
      "AxDataSource": [
        "inherits_from:Serialisable"
      ],
      "NestedGapAmount": [
        "inherits_from:NestedMinMax"
      ],
      "NestedOverlap": [
        "inherits_from:NestedMinMax"
      ],
      "NumberFormatDescriptor": [
        "inherits_from:Typed",
        "inherits_from:String"
      ],
      "ErrorBars": [
        "inherits_from:Serialisable"
      ],
      "_DataLabelBase": [
        "inherits_from:Serialisable"
      ],
      "DataLabel": [
        "inherits_from:_DataLabelBase"
      ],
      "DataLabelList": [
        "inherits_from:_DataLabelBase"
      ],
      "ManualLayout": [
        "inherits_from:Serialisable"
      ],
      "Layout": [
        "inherits_from:Serialisable"
      ],
      "LegendEntry": [
        "inherits_from:Serialisable"
      ],
      "Legend": [
        "inherits_from:Serialisable"
      ],
      "_LineChartBase": [
        "inherits_from:ChartBase"
      ],
      "LineChart": [
        "inherits_from:_LineChartBase"
      ],
      "LineChart3D": [
        "inherits_from:_LineChartBase"
      ],
      "DataPoint": [
        "inherits_from:Serialisable"
      ],
      "PictureOptions": [
        "inherits_from:Serialisable"
      ],
      "_PieChartBase": [
        "inherits_from:ChartBase"
      ],
      "PieChart": [
        "inherits_from:_PieChartBase"
      ],
      "PieChart3D": [
        "inherits_from:_PieChartBase"
      ],
      "DoughnutChart": [
        "inherits_from:_PieChartBase"
      ],
      "CustomSplit": [
        "inherits_from:Serialisable"
      ],
      "ProjectedPieChart": [
        "inherits_from:_PieChartBase"
      ],
      "PivotSource": [
        "inherits_from:Serialisable"
      ],
      "PivotFormat": [
        "inherits_from:Serialisable"
      ],
      "DataTable": [
        "inherits_from:Serialisable"
      ],
      "PlotArea": [
        "inherits_from:Serialisable"
      ],
      "PageMargins": [
        "inherits_from:Serialisable"
      ],
      "PrintSettings": [
        "inherits_from:Serialisable"
      ],
      "RadarChart": [
        "inherits_from:ChartBase"
      ],
      "Reference": [
        "inherits_from:Strict",
        "inherits_from:Serialisable"
      ],
      "ScatterChart": [
        "inherits_from:ChartBase"
      ],
      "SeriesLabel": [
        "inherits_from:Serialisable"
      ],
      "XYSeries": [
        "inherits_from:Series"
      ],
      "GraphicalProperties": [
        "inherits_from:Serialisable"
      ],
      "StockChart": [
        "inherits_from:ChartBase"
      ],
      "BandFormat": [
        "inherits_from:Serialisable"
      ],
      "BandFormatList": [
        "inherits_from:Serialisable"
      ],
      "_SurfaceChartBase": [
        "inherits_from:ChartBase"
      ],
      "SurfaceChart3D": [
        "inherits_from:_3DBase",
        "inherits_from:_SurfaceChartBase"
      ],
      "SurfaceChart": [
        "inherits_from:SurfaceChart3D"
      ],
      "Title": [
        "inherits_from:Serialisable"
      ],
      "TitleDescriptor": [
        "inherits_from:Typed"
      ],
      "TrendlineLabel": [
        "inherits_from:Serialisable"
      ],
      "Trendline": [
        "inherits_from:Serialisable"
      ],
      "UpDownBars": [
        "inherits_from:Serialisable"
      ],
      "View3D": [
        "inherits_from:Serialisable"
      ],
      "Surface": [
        "inherits_from:Serialisable"
      ],
      "_3DBase": [
        "inherits_from:Serialisable"
      ],
      "AxId": [
        "inherits_from:Serialisable"
      ],
      "ChartBase": [
        "inherits_from:Serialisable"
      ],
      "Chartsheet": [
        "inherits_from:_WorkbookChild",
        "inherits_from:Serialisable"
      ],
      "CustomChartsheetView": [
        "inherits_from:Serialisable"
      ],
      "CustomChartsheetViews": [
        "inherits_from:Serialisable"
      ],
      "ChartsheetProperties": [
        "inherits_from:Serialisable"
      ],
      "ChartsheetProtection": [
        "inherits_from:Serialisable",
        "inherits_from:_Protected"
      ],
      "WebPublishItem": [
        "inherits_from:Serialisable"
      ],
      "WebPublishItems": [
        "inherits_from:Serialisable"
      ],
      "SheetBackgroundPicture": [
        "inherits_from:Serialisable"
      ],
      "DrawingHF": [
        "inherits_from:Serialisable"
      ],
      "ChartsheetView": [
        "inherits_from:Serialisable"
      ],
      "ChartsheetViewList": [
        "inherits_from:Serialisable"
      ],
      "AuthorList": [
        "inherits_from:Serialisable"
      ],
      "CommentRecord": [
        "inherits_from:Serialisable"
      ],
      "CommentSheet": [
        "inherits_from:Serialisable"
      ],
      "Singleton": [
        "inherits_from:type"
      ],
      "Cached": [
        "inherits_from:type"
      ],
      "Typed": [
        "inherits_from:Descriptor"
      ],
      "Convertible": [
        "inherits_from:Typed"
      ],
      "Max": [
        "inherits_from:Convertible"
      ],
      "Min": [
        "inherits_from:Convertible"
      ],
      "MinMax": [
        "inherits_from:Max",
        "inherits_from:Min"
      ],
      "Set": [
        "inherits_from:Descriptor"
      ],
      "NoneSet": [
        "inherits_from:Set"
      ],
      "Integer": [
        "inherits_from:Convertible"
      ],
      "Float": [
        "inherits_from:Convertible"
      ],
      "Bool": [
        "inherits_from:Convertible"
      ],
      "String": [
        "inherits_from:Typed"
      ],
      "ASCII": [
        "inherits_from:Typed"
      ],
      "Length": [
        "inherits_from:Descriptor"
      ],
      "Default": [
        "inherits_from:Typed"
      ],
      "Alias": [
        "inherits_from:Descriptor"
      ],
      "MatchPattern": [
        "inherits_from:Descriptor"
      ],
      "ElementList": [
        "inherits_from:list"
      ],
      "HexBinary": [
        "inherits_from:MatchPattern"
      ],
      "UniversalMeasure": [
        "inherits_from:MatchPattern"
      ],
      "TextPoint": [
        "inherits_from:MinMax"
      ],
      "Percentage": [
        "inherits_from:MinMax"
      ],
      "ExtensionList": [
        "inherits_from:Serialisable"
      ],
      "Relation": [
        "inherits_from:String"
      ],
      "Base64Binary": [
        "inherits_from:MatchPattern"
      ],
      "Guid": [
        "inherits_from:MatchPattern"
      ],
      "CellRange": [
        "inherits_from:MatchPattern",
        "inherits_from:Serialisable"
      ],
      "Nested": [
        "inherits_from:Descriptor"
      ],
      "NestedValue": [
        "inherits_from:Nested",
        "inherits_from:Convertible"
      ],
      "NestedText": [
        "inherits_from:NestedValue"
      ],
      "NestedFloat": [
        "inherits_from:Float",
        "inherits_from:NestedValue"
      ],
      "NestedInteger": [
        "inherits_from:Integer",
        "inherits_from:NestedValue"
      ],
      "NestedString": [
        "inherits_from:NestedValue",
        "inherits_from:String"
      ],
      "NestedBool": [
        "inherits_from:NestedValue",
        "inherits_from:Bool"
      ],
      "NestedNoneSet": [
        "inherits_from:NoneSet",
        "inherits_from:Nested"
      ],
      "NestedSet": [
        "inherits_from:Nested",
        "inherits_from:Set"
      ],
      "NestedMinMax": [
        "inherits_from:MinMax",
        "inherits_from:Nested"
      ],
      "EmptyTag": [
        "inherits_from:Bool",
        "inherits_from:Nested"
      ],
      "Sequence": [
        "inherits_from:Descriptor"
      ],
      "UniqueSequence": [
        "inherits_from:Sequence"
      ],
      "ValueSequence": [
        "inherits_from:Sequence"
      ],
      "NestedSequence": [
        "inherits_from:Sequence"
      ],
      "MultiSequence": [
        "inherits_from:Sequence"
      ],
      "MultiSequencePart": [
        "inherits_from:Alias"
      ],
      "AutoSlotProperties": [
        "inherits_from:type"
      ],
      "MetaStrict": [
        "inherits_from:type"
      ],
      "MetaSerialisable": [
        "inherits_from:type"
      ],
      "Transform": [
        "inherits_from:Serialisable"
      ],
      "SystemColor": [
        "inherits_from:Serialisable"
      ],
      "HSLColor": [
        "inherits_from:Serialisable"
      ],
      "RGBPercent": [
        "inherits_from:Serialisable"
      ],
      "SchemeColor": [
        "inherits_from:Serialisable"
      ],
      "ColorChoice": [
        "inherits_from:Serialisable"
      ],
      "ColorMapping": [
        "inherits_from:Serialisable"
      ],
      "ColorChoiceDescriptor": [
        "inherits_from:Typed"
      ],
      "Connection": [
        "inherits_from:Serialisable"
      ],
      "ConnectorLocking": [
        "inherits_from:Serialisable"
      ],
      "NonVisualConnectorProperties": [
        "inherits_from:Serialisable"
      ],
      "ConnectorNonVisual": [
        "inherits_from:Serialisable"
      ],
      "ConnectorShape": [
        "inherits_from:Serialisable"
      ],
      "ShapeMeta": [
        "inherits_from:Serialisable"
      ],
      "Shape": [
        "inherits_from:Serialisable"
      ],
      "TintEffect": [
        "inherits_from:Serialisable"
      ],
      "LuminanceEffect": [
        "inherits_from:Serialisable"
      ],
      "HSLEffect": [
        "inherits_from:Serialisable"
      ],
      "GrayscaleEffect": [
        "inherits_from:Serialisable"
      ],
      "FillOverlayEffect": [
        "inherits_from:Serialisable"
      ],
      "DuotoneEffect": [
        "inherits_from:Serialisable"
      ],
      "ColorReplaceEffect": [
        "inherits_from:Serialisable"
      ],
      "ColorChangeEffect": [
        "inherits_from:Serialisable"
      ],
      "BlurEffect": [
        "inherits_from:Serialisable"
      ],
      "BiLevelEffect": [
        "inherits_from:Serialisable"
      ],
      "AlphaReplaceEffect": [
        "inherits_from:Serialisable"
      ],
      "AlphaModulateFixedEffect": [
        "inherits_from:Serialisable"
      ],
      "EffectContainer": [
        "inherits_from:Serialisable"
      ],
      "AlphaModulateEffect": [
        "inherits_from:Serialisable"
      ],
      "AlphaInverseEffect": [
        "inherits_from:Serialisable"
      ],
      "AlphaFloorEffect": [
        "inherits_from:Serialisable"
      ],
      "AlphaCeilingEffect": [
        "inherits_from:Serialisable"
      ],
      "AlphaBiLevelEffect": [
        "inherits_from:Serialisable"
      ],
      "GlowEffect": [
        "inherits_from:ColorChoice"
      ],
      "InnerShadowEffect": [
        "inherits_from:ColorChoice"
      ],
      "OuterShadow": [
        "inherits_from:ColorChoice"
      ],
      "PresetShadowEffect": [
        "inherits_from:ColorChoice"
      ],
      "ReflectionEffect": [
        "inherits_from:Serialisable"
      ],
      "SoftEdgesEffect": [
        "inherits_from:Serialisable"
      ],
      "EffectList": [
        "inherits_from:Serialisable"
      ],
      "PatternFillProperties": [
        "inherits_from:Serialisable"
      ],
      "RelativeRect": [
        "inherits_from:Serialisable"
      ],
      "StretchInfoProperties": [
        "inherits_from:Serialisable"
      ],
      "GradientStop": [
        "inherits_from:Serialisable"
      ],
      "LinearShadeProperties": [
        "inherits_from:Serialisable"
      ],
      "PathShadeProperties": [
        "inherits_from:Serialisable"
      ],
      "GradientFillProperties": [
        "inherits_from:Serialisable"
      ],
      "SolidColorFillProperties": [
        "inherits_from:Serialisable"
      ],
      "Blip": [
        "inherits_from:Serialisable"
      ],
      "TileInfoProperties": [
        "inherits_from:Serialisable"
      ],
      "BlipFillProperties": [
        "inherits_from:Serialisable"
      ],
      "Point2D": [
        "inherits_from:Serialisable"
      ],
      "PositiveSize2D": [
        "inherits_from:Serialisable"
      ],
      "Transform2D": [
        "inherits_from:Serialisable"
      ],
      "GroupTransform2D": [
        "inherits_from:Serialisable"
      ],
      "SphereCoords": [
        "inherits_from:Serialisable"
      ],
      "Camera": [
        "inherits_from:Serialisable"
      ],
      "LightRig": [
        "inherits_from:Serialisable"
      ],
      "Vector3D": [
        "inherits_from:Serialisable"
      ],
      "Point3D": [
        "inherits_from:Serialisable"
      ],
      "Backdrop": [
        "inherits_from:Serialisable"
      ],
      "Scene3D": [
        "inherits_from:Serialisable"
      ],
      "Bevel": [
        "inherits_from:Serialisable"
      ],
      "Shape3D": [
        "inherits_from:Serialisable"
      ],
      "Path2D": [
        "inherits_from:Serialisable"
      ],
      "Path2DList": [
        "inherits_from:Serialisable"
      ],
      "GeomRect": [
        "inherits_from:Serialisable"
      ],
      "AdjPoint2D": [
        "inherits_from:Serialisable"
      ],
      "ConnectionSite": [
        "inherits_from:Serialisable"
      ],
      "ConnectionSiteList": [
        "inherits_from:Serialisable"
      ],
      "AdjustHandleList": [
        "inherits_from:Serialisable"
      ],
      "GeomGuide": [
        "inherits_from:Serialisable"
      ],
      "GeomGuideList": [
        "inherits_from:Serialisable"
      ],
      "CustomGeometry2D": [
        "inherits_from:Serialisable"
      ],
      "PresetGeometry2D": [
        "inherits_from:Serialisable"
      ],
      "FontReference": [
        "inherits_from:Serialisable"
      ],
      "StyleMatrixReference": [
        "inherits_from:Serialisable"
      ],
      "ShapeStyle": [
        "inherits_from:Serialisable"
      ],
      "GraphicFrameLocking": [
        "inherits_from:Serialisable"
      ],
      "NonVisualGraphicFrameProperties": [
        "inherits_from:Serialisable"
      ],
      "NonVisualGraphicFrame": [
        "inherits_from:Serialisable"
      ],
      "GraphicData": [
        "inherits_from:Serialisable"
      ],
      "GraphicObject": [
        "inherits_from:Serialisable"
      ],
      "GraphicFrame": [
        "inherits_from:Serialisable"
      ],
      "GroupShape": [
        "inherits_from:Serialisable"
      ],
      "LineEndProperties": [
        "inherits_from:Serialisable"
      ],
      "DashStop": [
        "inherits_from:Serialisable"
      ],
      "DashStopList": [
        "inherits_from:Serialisable"
      ],
      "LineProperties": [
        "inherits_from:Serialisable"
      ],
      "PictureLocking": [
        "inherits_from:Serialisable"
      ],
      "NonVisualPictureProperties": [
        "inherits_from:Serialisable"
      ],
      "PictureNonVisual": [
        "inherits_from:Serialisable"
      ],
      "PictureFrame": [
        "inherits_from:Serialisable"
      ],
      "GroupShapeProperties": [
        "inherits_from:Serialisable"
      ],
      "GroupLocking": [
        "inherits_from:Serialisable"
      ],
      "NonVisualGroupDrawingShapeProps": [
        "inherits_from:Serialisable"
      ],
      "NonVisualDrawingShapeProps": [
        "inherits_from:Serialisable"
      ],
      "NonVisualDrawingProps": [
        "inherits_from:Serialisable"
      ],
      "NonVisualGroupShape": [
        "inherits_from:Serialisable"
      ],
      "ChartRelation": [
        "inherits_from:Serialisable"
      ],
      "AnchorClientData": [
        "inherits_from:Serialisable"
      ],
      "AnchorMarker": [
        "inherits_from:Serialisable"
      ],
      "_AnchorBase": [
        "inherits_from:Serialisable"
      ],
      "AbsoluteAnchor": [
        "inherits_from:_AnchorBase"
      ],
      "OneCellAnchor": [
        "inherits_from:_AnchorBase"
      ],
      "TwoCellAnchor": [
        "inherits_from:_AnchorBase"
      ],
      "SpreadsheetDrawing": [
        "inherits_from:Serialisable"
      ],
      "EmbeddedWAVAudioFile": [
        "inherits_from:Serialisable"
      ],
      "Hyperlink": [
        "inherits_from:Serialisable"
      ],
      "Font": [
        "inherits_from:Serialisable"
      ],
      "CharacterProperties": [
        "inherits_from:Serialisable"
      ],
      "TabStop": [
        "inherits_from:Serialisable"
      ],
      "TabStopList": [
        "inherits_from:Serialisable"
      ],
      "Spacing": [
        "inherits_from:Serialisable"
      ],
      "AutonumberBullet": [
        "inherits_from:Serialisable"
      ],
      "ParagraphProperties": [
        "inherits_from:Serialisable"
      ],
      "ListStyle": [
        "inherits_from:Serialisable"
      ],
      "RegularTextRun": [
        "inherits_from:Serialisable"
      ],
      "LineBreak": [
        "inherits_from:Serialisable"
      ],
      "TextField": [
        "inherits_from:Serialisable"
      ],
      "Paragraph": [
        "inherits_from:Serialisable"
      ],
      "PresetTextShape": [
        "inherits_from:Serialisable"
      ],
      "TextNormalAutofit": [
        "inherits_from:Serialisable"
      ],
      "RichTextProperties": [
        "inherits_from:Serialisable"
      ],
      "XDRPoint2D": [
        "inherits_from:Point2D"
      ],
      "XDRPositiveSize2D": [
        "inherits_from:PositiveSize2D"
      ],
      "XDRTransform2D": [
        "inherits_from:Transform2D"
      ],
      "ConditionalFormatting": [
        "inherits_from:Serialisable"
      ],
      "ValueDescriptor": [
        "inherits_from:Float"
      ],
      "FormatObject": [
        "inherits_from:Serialisable"
      ],
      "RuleType": [
        "inherits_from:Serialisable"
      ],
      "IconSet": [
        "inherits_from:RuleType"
      ],
      "DataBar": [
        "inherits_from:RuleType"
      ],
      "ColorScale": [
        "inherits_from:RuleType"
      ],
      "TokenizerError": [
        "inherits_from:Exception"
      ],
      "TranslatorError": [
        "inherits_from:Exception"
      ],
      "NestedDateTime": [
        "inherits_from:NestedText",
        "inherits_from:DateTime"
      ],
      "QualifiedDateTime": [
        "inherits_from:NestedDateTime"
      ],
      "DocumentProperties": [
        "inherits_from:Serialisable"
      ],
      "NestedBoolText": [
        "inherits_from:NestedText",
        "inherits_from:Bool"
      ],
      "_CustomDocumentProperty": [
        "uses:core.NestedDateTime",
        "inherits_from:Serialisable"
      ],
      "_CustomDocumentPropertyList": [
        "uses:core.NestedDateTime",
        "inherits_from:Serialisable"
      ],
      "_TypedProperty": [
        "uses:core.NestedDateTime",
        "inherits_from:Strict"
      ],
      "IntProperty": [
        "inherits_from:_TypedProperty"
      ],
      "FloatProperty": [
        "inherits_from:_TypedProperty"
      ],
      "StringProperty": [
        "inherits_from:_TypedProperty"
      ],
      "DateTimeProperty": [
        "inherits_from:_TypedProperty"
      ],
      "BoolProperty": [
        "inherits_from:_TypedProperty"
      ],
      "LinkProperty": [
        "inherits_from:_TypedProperty"
      ],
      "CustomPropertyList": [
        "uses:core.NestedDateTime",
        "inherits_from:Strict"
      ],
      "DigSigBlob": [
        "inherits_from:Serialisable"
      ],
      "VectorLpstr": [
        "inherits_from:Serialisable"
      ],
      "VectorVariant": [
        "inherits_from:Serialisable"
      ],
      "ExtendedProperties": [
        "inherits_from:Serialisable"
      ],
      "ISerialisableFile": [
        "inherits_from:ABC"
      ],
      "FileExtension": [
        "inherits_from:Serialisable"
      ],
      "Override": [
        "inherits_from:Serialisable"
      ],
      "Relationship": [
        "inherits_from:Serialisable"
      ],
      "RelationshipList": [
        "inherits_from:ElementList"
      ],
      "FileRecoveryProperties": [
        "inherits_from:Serialisable"
      ],
      "ChildSheet": [
        "inherits_from:Serialisable"
      ],
      "PivotCache": [
        "inherits_from:Serialisable"
      ],
      "WorkbookPackage": [
        "inherits_from:Serialisable"
      ],
      "MeasureDimensionMap": [
        "inherits_from:Serialisable"
      ],
      "MeasureGroup": [
        "inherits_from:Serialisable"
      ],
      "PivotDimension": [
        "inherits_from:Serialisable"
      ],
      "CalculatedMember": [
        "inherits_from:Serialisable"
      ],
      "CalculatedItem": [
        "inherits_from:Serialisable"
      ],
      "ServerFormat": [
        "inherits_from:Serialisable"
      ],
      "Query": [
        "inherits_from:Serialisable"
      ],
      "OLAPSet": [
        "inherits_from:Serialisable"
      ],
      "PCDSDTCEntries": [
        "inherits_from:Serialisable"
      ],
      "TupleCache": [
        "inherits_from:Serialisable"
      ],
      "OLAPKPI": [
        "inherits_from:Serialisable"
      ],
      "GroupMember": [
        "inherits_from:Serialisable"
      ],
      "LevelGroup": [
        "inherits_from:Serialisable"
      ],
      "GroupLevel": [
        "inherits_from:Serialisable"
      ],
      "FieldUsage": [
        "inherits_from:Serialisable"
      ],
      "CacheHierarchy": [
        "inherits_from:Serialisable"
      ],
      "GroupItems": [
        "inherits_from:Serialisable"
      ],
      "RangePr": [
        "inherits_from:Serialisable"
      ],
      "FieldGroup": [
        "inherits_from:Serialisable"
      ],
      "SharedItems": [
        "inherits_from:Serialisable"
      ],
      "CacheField": [
        "inherits_from:Serialisable"
      ],
      "RangeSet": [
        "inherits_from:Serialisable"
      ],
      "PageItem": [
        "inherits_from:Serialisable"
      ],
      "Consolidation": [
        "inherits_from:Serialisable"
      ],
      "WorksheetSource": [
        "inherits_from:Serialisable"
      ],
      "CacheSource": [
        "inherits_from:Serialisable"
      ],
      "CacheDefinition": [
        "inherits_from:Serialisable"
      ],
      "TupleList": [
        "inherits_from:Serialisable"
      ],
      "Missing": [
        "inherits_from:Serialisable"
      ],
      "Number": [
        "inherits_from:Serialisable"
      ],
      "Boolean": [
        "inherits_from:Serialisable"
      ],
      "DateTimeField": [
        "inherits_from:Serialisable"
      ],
      "Record": [
        "inherits_from:Serialisable"
      ],
      "RecordList": [
        "inherits_from:Serialisable"
      ],
      "HierarchyUsage": [
        "inherits_from:Serialisable"
      ],
      "ColHierarchiesUsage": [
        "inherits_from:Serialisable"
      ],
      "RowHierarchiesUsage": [
        "inherits_from:Serialisable"
      ],
      "PivotFilter": [
        "inherits_from:Serialisable"
      ],
      "PivotFilters": [
        "inherits_from:Serialisable"
      ],
      "PivotTableStyle": [
        "inherits_from:Serialisable"
      ],
      "MemberList": [
        "inherits_from:Serialisable"
      ],
      "MemberProperty": [
        "inherits_from:Serialisable"
      ],
      "PivotHierarchy": [
        "inherits_from:Serialisable"
      ],
      "PivotArea": [
        "inherits_from:Serialisable"
      ],
      "ChartFormat": [
        "inherits_from:Serialisable"
      ],
      "ConditionalFormat": [
        "inherits_from:Serialisable"
      ],
      "ConditionalFormatList": [
        "inherits_from:Serialisable"
      ],
      "Format": [
        "inherits_from:Serialisable"
      ],
      "DataField": [
        "inherits_from:Serialisable"
      ],
      "PageField": [
        "inherits_from:Serialisable"
      ],
      "RowColItem": [
        "inherits_from:Serialisable"
      ],
      "RowColField": [
        "inherits_from:Serialisable"
      ],
      "AutoSortScope": [
        "inherits_from:Serialisable"
      ],
      "FieldItem": [
        "inherits_from:Serialisable"
      ],
      "PivotField": [
        "inherits_from:Serialisable"
      ],
      "Location": [
        "inherits_from:Serialisable"
      ],
      "TableDefinition": [
        "inherits_from:Serialisable"
      ],
      "Alignment": [
        "inherits_from:Serialisable"
      ],
      "Side": [
        "inherits_from:Serialisable"
      ],
      "Border": [
        "inherits_from:Serialisable"
      ],
      "StyleArray": [
        "inherits_from:array"
      ],
      "CellStyle": [
        "inherits_from:Serialisable"
      ],
      "CellStyleList": [
        "inherits_from:Serialisable"
      ],
      "RGB": [
        "inherits_from:Typed"
      ],
      "ColorDescriptor": [
        "inherits_from:Typed"
      ],
      "RgbColor": [
        "inherits_from:Serialisable"
      ],
      "ColorList": [
        "inherits_from:Serialisable"
      ],
      "DifferentialStyle": [
        "inherits_from:Serialisable"
      ],
      "DifferentialStyleList": [
        "inherits_from:Serialisable"
      ],
      "Fill": [
        "inherits_from:Serialisable"
      ],
      "PatternFill": [
        "inherits_from:Fill"
      ],
      "Stop": [
        "inherits_from:Serialisable"
      ],
      "StopList": [
        "inherits_from:Sequence"
      ],
      "GradientFill": [
        "inherits_from:Fill"
      ],
      "NamedStyle": [
        "inherits_from:Serialisable"
      ],
      "NamedStyleList": [
        "inherits_from:list"
      ],
      "_NamedCellStyle": [
        "inherits_from:Serialisable"
      ],
      "_NamedCellStyleList": [
        "inherits_from:Serialisable"
      ],
      "NumberFormat": [
        "inherits_from:Serialisable"
      ],
      "NumberFormatList": [
        "inherits_from:Serialisable"
      ],
      "Stylesheet": [
        "inherits_from:Serialisable"
      ],
      "TableStyleElement": [
        "inherits_from:Serialisable"
      ],
      "TableStyle": [
        "inherits_from:Serialisable"
      ],
      "TableStyleList": [
        "inherits_from:Serialisable"
      ],
      "BoundDictionary": [
        "inherits_from:defaultdict"
      ],
      "CellCoordinatesException": [
        "inherits_from:Exception"
      ],
      "IllegalCharacterError": [
        "inherits_from:Exception"
      ],
      "NamedRangeException": [
        "inherits_from:Exception"
      ],
      "SheetTitleException": [
        "inherits_from:Exception"
      ],
      "InvalidFileException": [
        "inherits_from:Exception"
      ],
      "ReadOnlyWorkbookException": [
        "inherits_from:Exception"
      ],
      "WorkbookAlreadySaved": [
        "inherits_from:Exception"
      ],
      "IndexedList": [
        "inherits_from:list"
      ],
      "DefinedName": [
        "inherits_from:Serialisable"
      ],
      "DefinedNameDict": [
        "inherits_from:dict"
      ],
      "DefinedNameList": [
        "inherits_from:Serialisable"
      ],
      "ExternalReference": [
        "inherits_from:Serialisable"
      ],
      "FunctionGroup": [
        "inherits_from:Serialisable"
      ],
      "FunctionGroupList": [
        "inherits_from:Serialisable"
      ],
      "WorkbookProperties": [
        "inherits_from:Serialisable"
      ],
      "CalcProperties": [
        "inherits_from:Serialisable"
      ],
      "FileVersion": [
        "inherits_from:Serialisable"
      ],
      "WorkbookProtection": [
        "inherits_from:Serialisable"
      ],
      "FileSharing": [
        "inherits_from:Serialisable"
      ],
      "SmartTag": [
        "inherits_from:Serialisable"
      ],
      "SmartTagList": [
        "inherits_from:Serialisable"
      ],
      "SmartTagProperties": [
        "inherits_from:Serialisable"
      ],
      "BookView": [
        "inherits_from:Serialisable"
      ],
      "CustomWorkbookView": [
        "inherits_from:Serialisable"
      ],
      "WebPublishObject": [
        "inherits_from:Serialisable"
      ],
      "WebPublishObjectList": [
        "inherits_from:Serialisable"
      ],
      "WebPublishing": [
        "inherits_from:Serialisable"
      ],
      "MultiCellRange": [
        "inherits_from:Strict"
      ],
      "CellWatch": [
        "inherits_from:Serialisable"
      ],
      "CellWatches": [
        "inherits_from:Serialisable"
      ],
      "ControlProperty": [
        "inherits_from:Serialisable"
      ],
      "Control": [
        "inherits_from:Serialisable"
      ],
      "Controls": [
        "inherits_from:Serialisable"
      ],
      "CustomProperty": [
        "inherits_from:Serialisable"
      ],
      "CustomProperties": [
        "inherits_from:Serialisable"
      ],
      "DataValidation": [
        "inherits_from:Serialisable"
      ],
      "DataValidationList": [
        "inherits_from:Serialisable"
      ],
      "Dimension": [
        "inherits_from:Strict",
        "inherits_from:StyleableObject"
      ],
      "RowDimension": [
        "inherits_from:Dimension"
      ],
      "ColumnDimension": [
        "inherits_from:Dimension"
      ],
      "DimensionHolder": [
        "inherits_from:BoundDictionary"
      ],
      "SheetFormatProperties": [
        "inherits_from:Serialisable"
      ],
      "SheetDimension": [
        "inherits_from:Serialisable"
      ],
      "Drawing": [
        "inherits_from:Serialisable"
      ],
      "IgnoredError": [
        "inherits_from:Serialisable"
      ],
      "IgnoredErrors": [
        "inherits_from:Serialisable"
      ],
      "SortCondition": [
        "inherits_from:Serialisable"
      ],
      "SortState": [
        "inherits_from:Serialisable"
      ],
      "IconFilter": [
        "inherits_from:Serialisable"
      ],
      "ColorFilter": [
        "inherits_from:Serialisable"
      ],
      "DynamicFilter": [
        "inherits_from:Serialisable"
      ],
      "CustomFilter": [
        "inherits_from:Serialisable"
      ],
      "BlankFilter": [
        "inherits_from:CustomFilter"
      ],
      "NumberFilter": [
        "inherits_from:CustomFilter"
      ],
      "StringFilter": [
        "inherits_from:CustomFilter"
      ],
      "CustomFilters": [
        "inherits_from:Serialisable"
      ],
      "Top10": [
        "inherits_from:Serialisable"
      ],
      "DateGroupItem": [
        "inherits_from:Serialisable"
      ],
      "Filters": [
        "inherits_from:Serialisable"
      ],
      "FilterColumn": [
        "inherits_from:Serialisable"
      ],
      "AutoFilter": [
        "inherits_from:Serialisable"
      ],
      "_HeaderFooterPart": [
        "inherits_from:Strict"
      ],
      "HeaderFooterItem": [
        "inherits_from:Strict"
      ],
      "HeaderFooter": [
        "inherits_from:Serialisable"
      ],
      "HyperlinkList": [
        "inherits_from:Serialisable"
      ],
      "MergeCell": [
        "inherits_from:CellRange"
      ],
      "MergeCells": [
        "inherits_from:Serialisable"
      ],
      "MergedCellRange": [
        "inherits_from:CellRange"
      ],
      "ObjectAnchor": [
        "inherits_from:Serialisable"
      ],
      "ObjectPr": [
        "inherits_from:Serialisable"
      ],
      "OleObject": [
        "inherits_from:Serialisable"
      ],
      "OleObjects": [
        "inherits_from:Serialisable"
      ],
      "PrintPageSetup": [
        "inherits_from:Serialisable"
      ],
      "PrintOptions": [
        "inherits_from:Serialisable"
      ],
      "RowBreak": [
        "inherits_from:Serialisable"
      ],
      "ColBreak": [
        "inherits_from:RowBreak"
      ],
      "ColRange": [
        "inherits_from:Strict"
      ],
      "RowRange": [
        "inherits_from:Strict"
      ],
      "PrintTitles": [
        "inherits_from:Strict"
      ],
      "PrintArea": [
        "inherits_from:MultiCellRange"
      ],
      "Outline": [
        "inherits_from:Serialisable"
      ],
      "PageSetupProperties": [
        "inherits_from:Serialisable"
      ],
      "WorksheetProperties": [
        "inherits_from:Serialisable"
      ],
      "SheetProtection": [
        "inherits_from:Serialisable",
        "inherits_from:_Protected"
      ],
      "Related": [
        "inherits_from:Serialisable"
      ],
      "InputCells": [
        "inherits_from:Serialisable"
      ],
      "Scenario": [
        "inherits_from:Serialisable"
      ],
      "ScenarioList": [
        "inherits_from:Serialisable"
      ],
      "CellSmartTagPr": [
        "inherits_from:Serialisable"
      ],
      "CellSmartTag": [
        "inherits_from:Serialisable"
      ],
      "CellSmartTags": [
        "inherits_from:Serialisable"
      ],
      "SmartTags": [
        "inherits_from:Serialisable"
      ],
      "TableStyleInfo": [
        "inherits_from:Serialisable"
      ],
      "XMLColumnProps": [
        "inherits_from:Serialisable"
      ],
      "TableFormula": [
        "inherits_from:Serialisable"
      ],
      "TableColumn": [
        "inherits_from:Serialisable"
      ],
      "TableNameDescriptor": [
        "inherits_from:String"
      ],
      "TablePartList": [
        "inherits_from:Serialisable"
      ],
      "TableList": [
        "inherits_from:dict"
      ],
      "Pane": [
        "inherits_from:Serialisable"
      ],
      "Selection": [
        "inherits_from:Serialisable"
      ],
      "SheetView": [
        "inherits_from:Serialisable"
      ],
      "SheetViewList": [
        "inherits_from:Serialisable"
      ],
      "Worksheet": [
        "inherits_from:_WorkbookChild"
      ],
      "WriteOnlyWorksheet": [
        "inherits_from:_WorkbookChild"
      ],
      "ExternalCell": [
        "inherits_from:Serialisable"
      ],
      "ExternalRow": [
        "inherits_from:Serialisable"
      ],
      "ExternalSheetData": [
        "inherits_from:Serialisable"
      ],
      "ExternalSheetDataSet": [
        "inherits_from:Serialisable"
      ],
      "ExternalSheetNames": [
        "inherits_from:Serialisable"
      ],
      "ExternalDefinedName": [
        "inherits_from:Serialisable"
      ],
      "ExternalBook": [
        "inherits_from:Serialisable"
      ],
      "ExternalLink": [
        "inherits_from:Serialisable"
      ],
      "F2PYError": [
        "inherits_from:Exception"
      ],
      "Language": [
        "inherits_from:Enum"
      ],
      "RelOp": [
        "inherits_from:Enum"
      ],
      "ArithOp": [
        "inherits_from:Enum"
      ],
      "OpError": [
        "inherits_from:Exception"
      ],
      "Precedence": [
        "inherits_from:Enum"
      ],
      "ExprWarning": [
        "inherits_from:UserWarning"
      ],
      "UniqueAllResult": [
        "inherits_from:NamedTuple"
      ],
      "UniqueCountsResult": [
        "inherits_from:NamedTuple"
      ],
      "UniqueInverseResult": [
        "inherits_from:NamedTuple"
      ],
      "Repository": [
        "inherits_from:DataSource"
      ],
      "MGridClass": [
        "inherits_from:nd_grid"
      ],
      "OGridClass": [
        "inherits_from:nd_grid"
      ],
      "RClass": [
        "inherits_from:AxisConcatenator"
      ],
      "CClass": [
        "inherits_from:AxisConcatenator"
      ],
      "ConverterError": [
        "inherits_from:Exception"
      ],
      "ConverterLockError": [
        "inherits_from:ConverterError"
      ],
      "ConversionWarning": [
        "inherits_from:UserWarning"
      ],
      "NpzFile": [
        "inherits_from:Mapping"
      ],
      "EigResult": [
        "inherits_from:NamedTuple"
      ],
      "EighResult": [
        "inherits_from:NamedTuple"
      ],
      "QRResult": [
        "inherits_from:NamedTuple"
      ],
      "SlogdetResult": [
        "inherits_from:NamedTuple"
      ],
      "SVDResult": [
        "inherits_from:NamedTuple"
      ],
      "LinAlgError": [
        "inherits_from:ValueError"
      ],
      "MaskedArrayFutureWarning": [
        "inherits_from:FutureWarning"
      ],
      "MAError": [
        "inherits_from:Exception"
      ],
      "MaskError": [
        "inherits_from:MAError"
      ],
      "_MaskedUnaryOperation": [
        "inherits_from:_MaskedUFunc"
      ],
      "_MaskedBinaryOperation": [
        "inherits_from:_MaskedUFunc"
      ],
      "_DomainedBinaryOperation": [
        "inherits_from:_MaskedUFunc"
      ],
      "MaskedArray": [
        "inherits_from:ndarray"
      ],
      "mvoid": [
        "inherits_from:MaskedArray"
      ],
      "MaskedConstant": [
        "inherits_from:MaskedArray"
      ],
      "_extrema_operation": [
        "inherits_from:_MaskedUFunc"
      ],
      "_fromnxfunction": [
        "uses:core.count",
        "uses:core.sort",
        "uses:core.filled",
        "uses:core.getmask",
        "uses:core.asarray",
        "uses:core.zeros",
        "uses:core.array",
        "uses:core.get_masked_subclass",
        "uses:core.MAError",
        "uses:core.getdata",
        "uses:core.concatenate",
        "uses:core.masked",
        "uses:core.dot",
        "uses:core.getmaskarray",
        "uses:core.nomask",
        "uses:core.add",
        "uses:core.ones",
        "uses:core.MaskedArray",
        "uses:core.mask_or",
        "uses:core.masked_array",
        "uses:core.make_mask_descr"
      ],
      "_fromnxfunction_single": [
        "uses:core.count",
        "uses:core.sort",
        "uses:core.filled",
        "uses:core.getmask",
        "uses:core.asarray",
        "uses:core.zeros",
        "uses:core.array",
        "uses:core.get_masked_subclass",
        "uses:core.MAError",
        "uses:core.getdata",
        "uses:core.concatenate",
        "uses:core.masked",
        "uses:core.dot",
        "inherits_from:_fromnxfunction",
        "uses:core.getmaskarray",
        "uses:core.nomask",
        "uses:core.add",
        "uses:core.ones",
        "uses:core.MaskedArray",
        "uses:core.mask_or",
        "uses:core.masked_array",
        "uses:core.make_mask_descr"
      ],
      "_fromnxfunction_seq": [
        "uses:core.count",
        "uses:core.sort",
        "uses:core.filled",
        "uses:core.getmask",
        "uses:core.asarray",
        "uses:core.zeros",
        "uses:core.array",
        "uses:core.get_masked_subclass",
        "uses:core.MAError",
        "uses:core.getdata",
        "uses:core.concatenate",
        "uses:core.masked",
        "uses:core.dot",
        "inherits_from:_fromnxfunction",
        "uses:core.getmaskarray",
        "uses:core.nomask",
        "uses:core.add",
        "uses:core.ones",
        "uses:core.MaskedArray",
        "uses:core.mask_or",
        "uses:core.masked_array",
        "uses:core.make_mask_descr"
      ],
      "_fromnxfunction_args": [
        "uses:core.count",
        "uses:core.sort",
        "uses:core.filled",
        "uses:core.getmask",
        "uses:core.asarray",
        "uses:core.zeros",
        "uses:core.array",
        "uses:core.get_masked_subclass",
        "uses:core.MAError",
        "uses:core.getdata",
        "uses:core.concatenate",
        "uses:core.masked",
        "uses:core.dot",
        "inherits_from:_fromnxfunction",
        "uses:core.getmaskarray",
        "uses:core.nomask",
        "uses:core.add",
        "uses:core.ones",
        "uses:core.MaskedArray",
        "uses:core.mask_or",
        "uses:core.masked_array",
        "uses:core.make_mask_descr"
      ],
      "_fromnxfunction_allargs": [
        "uses:core.count",
        "uses:core.sort",
        "uses:core.filled",
        "uses:core.getmask",
        "uses:core.asarray",
        "uses:core.zeros",
        "uses:core.array",
        "uses:core.get_masked_subclass",
        "uses:core.MAError",
        "uses:core.getdata",
        "uses:core.concatenate",
        "uses:core.masked",
        "uses:core.dot",
        "inherits_from:_fromnxfunction",
        "uses:core.getmaskarray",
        "uses:core.nomask",
        "uses:core.add",
        "uses:core.ones",
        "uses:core.MaskedArray",
        "uses:core.mask_or",
        "uses:core.masked_array",
        "uses:core.make_mask_descr"
      ],
      "MAxisConcatenator": [
        "inherits_from:AxisConcatenator",
        "uses:core.count",
        "uses:core.sort",
        "uses:core.filled",
        "uses:core.getmask",
        "uses:core.asarray",
        "uses:core.zeros",
        "uses:core.array",
        "uses:core.get_masked_subclass",
        "uses:core.MAError",
        "uses:core.getdata",
        "uses:core.concatenate",
        "uses:core.masked",
        "uses:core.dot",
        "uses:core.getmaskarray",
        "uses:core.nomask",
        "uses:core.add",
        "uses:core.ones",
        "uses:core.MaskedArray",
        "uses:core.mask_or",
        "uses:core.masked_array",
        "uses:core.make_mask_descr"
      ],
      "mr_class": [
        "inherits_from:MAxisConcatenator",
        "uses:core.count",
        "uses:core.sort",
        "uses:core.filled",
        "uses:core.getmask",
        "uses:core.asarray",
        "uses:core.zeros",
        "uses:core.array",
        "uses:core.get_masked_subclass",
        "uses:core.MAError",
        "uses:core.getdata",
        "uses:core.concatenate",
        "uses:core.masked",
        "uses:core.dot",
        "uses:core.getmaskarray",
        "uses:core.nomask",
        "uses:core.add",
        "uses:core.ones",
        "uses:core.MaskedArray",
        "uses:core.mask_or",
        "uses:core.masked_array",
        "uses:core.make_mask_descr"
      ],
      "Chebyshev": [
        "inherits_from:ABCPolyBase"
      ],
      "Hermite": [
        "inherits_from:ABCPolyBase"
      ],
      "HermiteE": [
        "inherits_from:ABCPolyBase"
      ],
      "Laguerre": [
        "inherits_from:ABCPolyBase"
      ],
      "Legendre": [
        "inherits_from:ABCPolyBase"
      ],
      "Polynomial": [
        "inherits_from:ABCPolyBase"
      ],
      "Struct": [
        "inherits_from:Structure"
      ],
      "_NumpyPlugin": [
        "inherits_from:Plugin"
      ],
      "DatetimeFormat": [
        "inherits_from:_TimelikeFormat"
      ],
      "TimedeltaFormat": [
        "inherits_from:_TimelikeFormat"
      ],
      "chararray": [
        "inherits_from:ndarray"
      ],
      "memmap": [
        "inherits_from:ndarray"
      ],
      "_PreprocessDTypeError": [
        "inherits_from:Exception"
      ],
      "recarray": [
        "inherits_from:ndarray"
      ],
      "UFuncTypeError": [
        "inherits_from:TypeError"
      ],
      "_UFuncNoLoopError": [
        "inherits_from:UFuncTypeError"
      ],
      "_UFuncBinaryResolutionError": [
        "inherits_from:_UFuncNoLoopError"
      ],
      "_UFuncCastingError": [
        "inherits_from:UFuncTypeError"
      ],
      "_UFuncInputCastingError": [
        "inherits_from:_UFuncCastingError"
      ],
      "_UFuncOutputCastingError": [
        "inherits_from:_UFuncCastingError"
      ],
      "_ArrayMemoryError": [
        "inherits_from:MemoryError"
      ],
      "_SupportsArrayFunc": [
        "inherits_from:Protocol"
      ],
      "_Buffer": [
        "inherits_from:Protocol"
      ],
      "_DTypeDictBase": [
        "inherits_from:TypedDict"
      ],
      "_DTypeDict": [
        "inherits_from:_DTypeDictBase"
      ],
      "_256Bit": [
        "inherits_from:NBitBase"
      ],
      "_128Bit": [
        "inherits_from:_256Bit"
      ],
      "_96Bit": [
        "inherits_from:_128Bit"
      ],
      "_80Bit": [
        "inherits_from:_96Bit"
      ],
      "_64Bit": [
        "inherits_from:_80Bit"
      ],
      "_32Bit": [
        "inherits_from:_64Bit"
      ],
      "_16Bit": [
        "inherits_from:_32Bit"
      ],
      "_8Bit": [
        "inherits_from:_16Bit"
      ],
      "ArrayDunder": [
        "inherits_from:_SequenceLike"
      ],
      "mylist": [
        "inherits_from:list"
      ],
      "TestByteorderConverter": [
        "inherits_from:StringConverterTestCase"
      ],
      "TestSortkindConverter": [
        "inherits_from:StringConverterTestCase"
      ],
      "TestSelectkindConverter": [
        "inherits_from:StringConverterTestCase"
      ],
      "TestSearchsideConverter": [
        "inherits_from:StringConverterTestCase"
      ],
      "TestOrderConverter": [
        "inherits_from:StringConverterTestCase"
      ],
      "TestClipmodeConverter": [
        "inherits_from:StringConverterTestCase"
      ],
      "TestCastingConverter": [
        "inherits_from:StringConverterTestCase"
      ],
      "Test_X86_Features": [
        "inherits_from:AbstractTest"
      ],
      "Test_POWER_Features": [
        "inherits_from:AbstractTest"
      ],
      "Test_ZARCH_Features": [
        "inherits_from:AbstractTest"
      ],
      "Test_ARM_Features": [
        "inherits_from:AbstractTest"
      ],
      "TestComparisonsMixed1": [
        "inherits_from:TestComparisons"
      ],
      "TestComparisonsMixed2": [
        "inherits_from:TestComparisons"
      ],
      "_VisibleDeprecationTestCase": [
        "inherits_from:_DeprecationTestCase"
      ],
      "TestDTypeAttributeIsDTypeDeprecation": [
        "inherits_from:_DeprecationTestCase"
      ],
      "TestNonNumericConjugate": [
        "inherits_from:_DeprecationTestCase"
      ],
      "TestDatetimeEvent": [
        "inherits_from:_DeprecationTestCase"
      ],
      "TestBincount": [
        "inherits_from:_DeprecationTestCase"
      ],
      "TestGeneratorSum": [
        "inherits_from:_DeprecationTestCase"
      ],
      "TestFromstring": [
        "inherits_from:_DeprecationTestCase"
      ],
      "TestFromStringAndFileInvalidData": [
        "inherits_from:_DeprecationTestCase"
      ],
      "TestToString": [
        "inherits_from:_DeprecationTestCase"
      ],
      "TestDTypeCoercion": [
        "inherits_from:_DeprecationTestCase"
      ],
      "BuiltInRoundComplexDType": [
        "inherits_from:_DeprecationTestCase"
      ],
      "TestIncorrectAdvancedIndexWithEmptyResult": [
        "inherits_from:_DeprecationTestCase"
      ],
      "TestNonExactMatchDeprecation": [
        "inherits_from:_DeprecationTestCase"
      ],
      "TestMatrixInOuter": [
        "inherits_from:_DeprecationTestCase"
      ],
      "FlatteningConcatenateUnsafeCast": [
        "inherits_from:_DeprecationTestCase"
      ],
      "TestDeprecatedUnpickleObjectScalar": [
        "inherits_from:_DeprecationTestCase"
      ],
      "TestSingleElementSignature": [
        "inherits_from:_DeprecationTestCase"
      ],
      "TestCtypesGetter": [
        "inherits_from:_DeprecationTestCase"
      ],
      "TestPartitionBoolIndex": [
        "inherits_from:_DeprecationTestCase"
      ],
      "TestMachAr": [
        "inherits_from:_DeprecationTestCase"
      ],
      "TestQuantileInterpolationDeprecation": [
        "inherits_from:_DeprecationTestCase"
      ],
      "TestArrayFinalizeNone": [
        "inherits_from:_DeprecationTestCase"
      ],
      "TestLoadtxtParseIntsViaFloat": [
        "inherits_from:_DeprecationTestCase"
      ],
      "TestScalarConversion": [
        "inherits_from:_DeprecationTestCase"
      ],
      "TestPyIntConversion": [
        "inherits_from:_DeprecationTestCase"
      ],
      "TestDeprecatedFinfo": [
        "inherits_from:_DeprecationTestCase"
      ],
      "TestMathAlias": [
        "inherits_from:_DeprecationTestCase"
      ],
      "TestLibImports": [
        "inherits_from:_DeprecationTestCase"
      ],
      "TestDeprecatedDTypeAliases": [
        "inherits_from:_DeprecationTestCase"
      ],
      "TestDeprecatedArrayWrap": [
        "inherits_from:_DeprecationTestCase"
      ],
      "TestDeprecatedDTypeParenthesizedRepeatCount": [
        "inherits_from:_DeprecationTestCase"
      ],
      "TestDeprecatedSaveFixImports": [
        "inherits_from:_DeprecationTestCase"
      ],
      "TestAddNewdocUFunc": [
        "inherits_from:_DeprecationTestCase"
      ],
      "Test2": [
        "inherits_from:Test1"
      ],
      "CustomException": [
        "inherits_from:Exception"
      ],
      "PhysicalQuantity": [
        "inherits_from:float"
      ],
      "PhysicalQuantity2": [
        "inherits_from:ndarray"
      ],
      "TupleSubclass": [
        "inherits_from:tuple"
      ],
      "TestCommaDecimalPointLocale": [
        "inherits_from:CommaDecimalPointLocale"
      ],
      "MemmapSubClass": [
        "inherits_from:memmap"
      ],
      "TestMatmul": [
        "inherits_from:MatmulCommon"
      ],
      "TestMatmulOperator": [
        "inherits_from:MatmulCommon"
      ],
      "MyAlwaysEqualOld": [
        "inherits_from:MyAlwaysEqual"
      ],
      "MyAlwaysEqualNew": [
        "inherits_from:MyAlwaysEqual"
      ],
      "Coerced": [
        "inherits_from:Exception"
      ],
      "NIterError": [
        "inherits_from:Exception"
      ],
      "TestCreateZerosPlain": [
        "inherits_from:CreateZeros"
      ],
      "TestCreateZerosNested": [
        "inherits_from:CreateZeros"
      ],
      "TestCreateValuesPlainSingle": [
        "inherits_from:CreateValues"
      ],
      "TestCreateValuesPlainMultiple": [
        "inherits_from:CreateValues"
      ],
      "TestCreateValuesNestedSingle": [
        "inherits_from:CreateValues"
      ],
      "TestCreateValuesNestedMultiple": [
        "inherits_from:CreateValues"
      ],
      "TestReadValuesPlainSingle": [
        "inherits_from:ReadValuesPlain"
      ],
      "TestReadValuesPlainMultiple": [
        "inherits_from:ReadValuesPlain"
      ],
      "TestReadValuesNestedSingle": [
        "inherits_from:ReadValuesNested"
      ],
      "TestReadValuesNestedMultiple": [
        "inherits_from:ReadValuesNested"
      ],
      "B": [
        "inherits_from:A"
      ],
      "C": [
        "inherits_from:B",
        "inherits_from:A"
      ],
      "D": [
        "inherits_from:C",
        "inherits_from:B"
      ],
      "B0": [
        "inherits_from:A"
      ],
      "C0": [
        "inherits_from:B0"
      ],
      "B1": [
        "inherits_from:HasNew"
      ],
      "MyStr": [
        "inherits_from:str"
      ],
      "MyBytes": [
        "inherits_from:bytes"
      ],
      "myf_simple1": [
        "inherits_from:sctype"
      ],
      "myf_simple2": [
        "inherits_from:sctype"
      ],
      "_SIMD_BOOL": [
        "inherits_from:_Test_Utility"
      ],
      "_SIMD_INT": [
        "inherits_from:_Test_Utility"
      ],
      "_SIMD_FP32": [
        "inherits_from:_Test_Utility"
      ],
      "_SIMD_FP64": [
        "inherits_from:_Test_Utility"
      ],
      "_SIMD_FP": [
        "inherits_from:_Test_Utility"
      ],
      "_SIMD_ALL": [
        "inherits_from:_Test_Utility"
      ],
      "TestLogAddExp2": [
        "inherits_from:_FilterInvalids"
      ],
      "TestLogAddExp": [
        "inherits_from:_FilterInvalids"
      ],
      "TestMaximum": [
        "inherits_from:_FilterInvalids"
      ],
      "TestMinimum": [
        "inherits_from:_FilterInvalids"
      ],
      "TestFmax": [
        "inherits_from:_FilterInvalids"
      ],
      "TestFmin": [
        "inherits_from:_FilterInvalids"
      ],
      "ASub": [
        "inherits_from:A"
      ],
      "CSub": [
        "inherits_from:C"
      ],
      "OverriddenArrayNew": [
        "inherits_from:OverriddenArrayOld"
      ],
      "TestCreateZeros_1": [
        "inherits_from:CreateZeros"
      ],
      "TestCreateZeros_2": [
        "inherits_from:CreateZeros"
      ],
      "TestCreateZeros_1009": [
        "inherits_from:CreateZeros"
      ],
      "TestCreateValues_1_UCS2": [
        "inherits_from:CreateValues"
      ],
      "TestCreateValues_1_UCS4": [
        "inherits_from:CreateValues"
      ],
      "TestCreateValues_2_UCS2": [
        "inherits_from:CreateValues"
      ],
      "TestCreateValues_2_UCS4": [
        "inherits_from:CreateValues"
      ],
      "TestCreateValues_1009_UCS2": [
        "inherits_from:CreateValues"
      ],
      "TestCreateValues_1009_UCS4": [
        "inherits_from:CreateValues"
      ],
      "TestAssignValues_1_UCS2": [
        "inherits_from:AssignValues"
      ],
      "TestAssignValues_1_UCS4": [
        "inherits_from:AssignValues"
      ],
      "TestAssignValues_2_UCS2": [
        "inherits_from:AssignValues"
      ],
      "TestAssignValues_2_UCS4": [
        "inherits_from:AssignValues"
      ],
      "TestAssignValues_1009_UCS2": [
        "inherits_from:AssignValues"
      ],
      "TestAssignValues_1009_UCS4": [
        "inherits_from:AssignValues"
      ],
      "TestByteorder_1_UCS2": [
        "inherits_from:ByteorderValues"
      ],
      "TestByteorder_1_UCS4": [
        "inherits_from:ByteorderValues"
      ],
      "TestByteorder_2_UCS2": [
        "inherits_from:ByteorderValues"
      ],
      "TestByteorder_2_UCS4": [
        "inherits_from:ByteorderValues"
      ],
      "TestByteorder_1009_UCS2": [
        "inherits_from:ByteorderValues"
      ],
      "TestByteorder_1009_UCS4": [
        "inherits_from:ByteorderValues"
      ],
      "TypeTup": [
        "inherits_from:NamedTuple"
      ],
      "XYGrid": [
        "inherits_from:NamedTuple"
      ],
      "TestArrayEqual": [
        "inherits_from:_GenericTest"
      ],
      "TestEqual": [
        "inherits_from:TestArrayEqual"
      ],
      "TestArrayAlmostEqual": [
        "inherits_from:_GenericTest"
      ],
      "TestAlmostEqual": [
        "inherits_from:_GenericTest"
      ],
      "my_cacw": [
        "inherits_from:clear_and_catch_warnings"
      ],
      "KnownFailureException": [
        "inherits_from:Exception"
      ],
      "IgnoreException": [
        "inherits_from:Exception"
      ],
      "TestPhilox": [
        "inherits_from:RNG",
        "inherits_from:Base"
      ],
      "TestPCG64": [
        "inherits_from:RNG",
        "inherits_from:Base"
      ],
      "TestPCG64DXSM": [
        "inherits_from:RNG",
        "inherits_from:Base"
      ],
      "TestMT19937": [
        "inherits_from:RNG",
        "inherits_from:Base"
      ],
      "TestSFC64": [
        "inherits_from:RNG",
        "inherits_from:Base"
      ],
      "TestDefaultRNG": [
        "inherits_from:RNG"
      ],
      "MMatrix": [
        "inherits_from:MaskedArray"
      ],
      "MatrixTestCase": [
        "inherits_from:LinalgTestCase"
      ],
      "TestSolveMatrix": [
        "inherits_from:MatrixTestCase",
        "inherits_from:SolveCases"
      ],
      "TestInvMatrix": [
        "inherits_from:MatrixTestCase",
        "inherits_from:InvCases"
      ],
      "TestEigvalsMatrix": [
        "inherits_from:MatrixTestCase",
        "inherits_from:EigvalsCases"
      ],
      "TestEigMatrix": [
        "inherits_from:EigCases",
        "inherits_from:MatrixTestCase"
      ],
      "TestSVDMatrix": [
        "inherits_from:MatrixTestCase",
        "inherits_from:SVDCases"
      ],
      "TestCondMatrix": [
        "inherits_from:MatrixTestCase",
        "inherits_from:CondCases"
      ],
      "TestPinvMatrix": [
        "inherits_from:MatrixTestCase",
        "inherits_from:PinvCases"
      ],
      "TestDetMatrix": [
        "inherits_from:MatrixTestCase",
        "inherits_from:DetCases"
      ],
      "TestLstsqMatrix": [
        "inherits_from:MatrixTestCase",
        "inherits_from:LstsqCases"
      ],
      "_TestNorm2DMatrix": [
        "inherits_from:_TestNorm2D"
      ],
      "TestNormDoubleMatrix": [
        "inherits_from:_TestNorm2DMatrix",
        "inherits_from:_TestNormDoubleBase"
      ],
      "TestNormSingleMatrix": [
        "inherits_from:_TestNorm2DMatrix",
        "inherits_from:_TestNormSingleBase"
      ],
      "TestNormInt64Matrix": [
        "inherits_from:_TestNorm2DMatrix",
        "inherits_from:_TestNormInt64Base"
      ],
      "TestQRMatrix": [
        "inherits_from:_TestQR"
      ],
      "M": [
        "inherits_from:MaskedArray"
      ],
      "SubMaskedArray": [
        "inherits_from:MaskedArray"
      ],
      "MSubArray": [
        "inherits_from:MaskedArray",
        "inherits_from:SubArray"
      ],
      "ComplicatedSubArray": [
        "inherits_from:SubArray"
      ],
      "WrappedArray": [
        "inherits_from:NDArrayOperatorsMixin"
      ],
      "LinalgSquareTestCase": [
        "inherits_from:LinalgTestCase"
      ],
      "LinalgNonsquareTestCase": [
        "inherits_from:LinalgTestCase"
      ],
      "HermitianTestCase": [
        "inherits_from:LinalgTestCase"
      ],
      "LinalgGeneralizedSquareTestCase": [
        "inherits_from:LinalgTestCase"
      ],
      "LinalgGeneralizedNonsquareTestCase": [
        "inherits_from:LinalgTestCase"
      ],
      "HermitianGeneralizedTestCase": [
        "inherits_from:LinalgTestCase"
      ],
      "SolveCases": [
        "inherits_from:LinalgGeneralizedSquareTestCase",
        "inherits_from:LinalgSquareTestCase"
      ],
      "TestSolve": [
        "inherits_from:SolveCases"
      ],
      "InvCases": [
        "inherits_from:LinalgGeneralizedSquareTestCase",
        "inherits_from:LinalgSquareTestCase"
      ],
      "TestInv": [
        "inherits_from:InvCases"
      ],
      "EigvalsCases": [
        "inherits_from:LinalgGeneralizedSquareTestCase",
        "inherits_from:LinalgSquareTestCase"
      ],
      "TestEigvals": [
        "inherits_from:EigvalsCases"
      ],
      "EigCases": [
        "inherits_from:LinalgGeneralizedSquareTestCase",
        "inherits_from:LinalgSquareTestCase"
      ],
      "TestEig": [
        "inherits_from:EigCases"
      ],
      "SVDCases": [
        "inherits_from:LinalgGeneralizedSquareTestCase",
        "inherits_from:LinalgSquareTestCase"
      ],
      "TestSVD": [
        "inherits_from:SVDBaseTests",
        "inherits_from:SVDCases"
      ],
      "SVDHermitianCases": [
        "inherits_from:HermitianTestCase",
        "inherits_from:HermitianGeneralizedTestCase"
      ],
      "TestSVDHermitian": [
        "inherits_from:SVDBaseTests",
        "inherits_from:SVDHermitianCases"
      ],
      "CondCases": [
        "inherits_from:LinalgGeneralizedSquareTestCase",
        "inherits_from:LinalgSquareTestCase"
      ],
      "TestCond": [
        "inherits_from:CondCases"
      ],
      "PinvCases": [
        "inherits_from:LinalgGeneralizedSquareTestCase",
        "inherits_from:LinalgNonsquareTestCase",
        "inherits_from:LinalgSquareTestCase",
        "inherits_from:LinalgGeneralizedNonsquareTestCase"
      ],
      "TestPinv": [
        "inherits_from:PinvCases"
      ],
      "PinvHermitianCases": [
        "inherits_from:HermitianTestCase",
        "inherits_from:HermitianGeneralizedTestCase"
      ],
      "TestPinvHermitian": [
        "inherits_from:PinvHermitianCases"
      ],
      "DetCases": [
        "inherits_from:LinalgGeneralizedSquareTestCase",
        "inherits_from:LinalgSquareTestCase"
      ],
      "TestDet": [
        "inherits_from:DetCases"
      ],
      "LstsqCases": [
        "inherits_from:LinalgNonsquareTestCase",
        "inherits_from:LinalgSquareTestCase"
      ],
      "TestLstsq": [
        "inherits_from:LstsqCases"
      ],
      "TestEigvalshCases": [
        "inherits_from:HermitianTestCase",
        "inherits_from:HermitianGeneralizedTestCase"
      ],
      "TestEighCases": [
        "inherits_from:HermitianTestCase",
        "inherits_from:HermitianGeneralizedTestCase"
      ],
      "_TestNormGeneral": [
        "inherits_from:_TestNormBase"
      ],
      "_TestNorm2D": [
        "inherits_from:_TestNormBase"
      ],
      "_TestNorm": [
        "inherits_from:_TestNorm2D",
        "inherits_from:_TestNormGeneral"
      ],
      "_TestNormDoubleBase": [
        "inherits_from:_TestNormBase"
      ],
      "_TestNormSingleBase": [
        "inherits_from:_TestNormBase"
      ],
      "_TestNormInt64Base": [
        "inherits_from:_TestNormBase"
      ],
      "TestNormDouble": [
        "inherits_from:_TestNorm",
        "inherits_from:_TestNormDoubleBase"
      ],
      "TestNormSingle": [
        "inherits_from:_TestNorm",
        "inherits_from:_TestNormSingleBase"
      ],
      "TestNormInt64": [
        "inherits_from:_TestNorm",
        "inherits_from:_TestNormInt64Base"
      ],
      "BytesIOSRandomSize": [
        "inherits_from:BytesIO"
      ],
      "TextIO": [
        "inherits_from:BytesIO"
      ],
      "TestSaveLoad": [
        "inherits_from:RoundtripTest"
      ],
      "TestSavezLoad": [
        "inherits_from:RoundtripTest"
      ],
      "TestLoadTxt": [
        "inherits_from:LoadTxtBase"
      ],
      "TestFromTxt": [
        "inherits_from:LoadTxtBase"
      ],
      "CustomWriter": [
        "inherits_from:list"
      ],
      "SubArrayLike": [
        "inherits_from:ArrayLike"
      ],
      "TestNanFunctions_SumProd": [
        "inherits_from:SharedNanFunctionsTestsMixin"
      ],
      "TestNanFunctions_CumSumProd": [
        "inherits_from:SharedNanFunctionsTestsMixin"
      ],
      "TestNanFunctions_MeanVarStd": [
        "inherits_from:SharedNanFunctionsTestsMixin"
      ],
      "SimpleSubClass": [
        "inherits_from:VerySimpleSubClass"
      ],
      "MyArray": [
        "inherits_from:list"
      ],
      "TestF2cmapOption": [
        "inherits_from:TestAssumedShapeSumExample"
      ],
      "TestF77CallbackPythonTLS": [
        "inherits_from:TestF77Callback"
      ],
      "TestFReturnCharacter": [
        "inherits_from:TestReturnCharacter"
      ],
      "TestFReturnComplex": [
        "inherits_from:TestReturnComplex"
      ],
      "TestFReturnInteger": [
        "inherits_from:TestReturnInteger"
      ],
      "TestFReturnLogical": [
        "inherits_from:TestReturnLogical"
      ],
      "TestCReturnReal": [
        "inherits_from:TestReturnReal"
      ],
      "TestFReturnReal": [
        "inherits_from:TestReturnReal"
      ],
      "SimplifiedMesonBackend": [
        "inherits_from:MesonBackend"
      ],
      "DistutilsBackend": [
        "inherits_from:Backend"
      ],
      "MesonBackend": [
        "inherits_from:Backend"
      ],
      "DefaultJSONProvider": [
        "inherits_from:JSONProvider"
      ],
      "TagDict": [
        "inherits_from:JSONTag"
      ],
      "PassDict": [
        "inherits_from:JSONTag"
      ],
      "TagTuple": [
        "inherits_from:JSONTag"
      ],
      "PassList": [
        "inherits_from:JSONTag"
      ],
      "TagBytes": [
        "inherits_from:JSONTag"
      ],
      "TagMarkup": [
        "inherits_from:JSONTag"
      ],
      "TagUUID": [
        "inherits_from:JSONTag"
      ],
      "TagDateTime": [
        "inherits_from:JSONTag"
      ],
      "App": [
        "inherits_from:Scaffold"
      ],
      "isoparser": [
        "inherits_from:object"
      ],
      "_timelex": [
        "inherits_from:object"
      ],
      "_resultbase": [
        "inherits_from:object"
      ],
      "parserinfo": [
        "inherits_from:object"
      ],
      "_ymd": [
        "inherits_from:list"
      ],
      "parser": [
        "inherits_from:object"
      ],
      "_tzparser": [
        "inherits_from:object"
      ],
      "UnknownTimezoneWarning": [
        "inherits_from:RuntimeWarning"
      ],
      "_result": [
        "inherits_from:_resultbase"
      ],
      "_attr": [
        "inherits_from:_resultbase"
      ],
      "private_class": [
        "inherits_from:c"
      ],
      "tzlocal": [
        "inherits_from:_tzinfo"
      ],
      "_ttinfo": [
        "inherits_from:object"
      ],
      "_tzfile": [
        "inherits_from:object"
      ],
      "tzfile": [
        "inherits_from:_tzfile",
        "inherits_from:_tzinfo"
      ],
      "tzrange": [
        "inherits_from:tzrangebase"
      ],
      "tzstr": [
        "inherits_from:tzrange"
      ],
      "_tzicalvtzcomp": [
        "inherits_from:object"
      ],
      "_tzicalvtz": [
        "inherits_from:_tzinfo"
      ],
      "tzical": [
        "inherits_from:object"
      ],
      "GettzFunc": [
        "inherits_from:object"
      ],
      "_nullcontext": [
        "inherits_from:object"
      ],
      "tzres": [
        "inherits_from:object"
      ],
      "tzwinbase": [
        "inherits_from:tzrangebase"
      ],
      "tzwin": [
        "inherits_from:tzwinbase"
      ],
      "tzwinlocal": [
        "inherits_from:tzwinbase"
      ],
      "_tzinfo": [
        "inherits_from:tzinfo"
      ],
      "tzrangebase": [
        "inherits_from:_tzinfo"
      ],
      "_DatetimeWithFold": [
        "inherits_from:datetime"
      ],
      "_TzSingleton": [
        "inherits_from:type"
      ],
      "_TzFactory": [
        "inherits_from:type"
      ],
      "_TzOffsetFactory": [
        "inherits_from:_TzFactory"
      ],
      "_TzStrFactory": [
        "inherits_from:_TzFactory"
      ],
      "DeprecatedTzFormatWarning": [
        "inherits_from:Warning"
      ],
      "ZoneInfoFile": [
        "inherits_from:object"
      ],
      "StreamWrapperTest": [
        "inherits_from:TestCase",
        "uses:utils.osname"
      ],
      "AnsiToWin32Test": [
        "inherits_from:TestCase",
        "uses:utils.osname"
      ],
      "AnsiTest": [
        "inherits_from:TestCase"
      ],
      "InitTest": [
        "inherits_from:TestCase",
        "uses:utils.osname",
        "uses:utils.replace_by"
      ],
      "JustFixWindowsConsoleTest": [
        "inherits_from:TestCase",
        "uses:utils.osname",
        "uses:utils.replace_by"
      ],
      "IsattyTest": [
        "uses:utils.replace_by",
        "uses:utils.pycharm",
        "inherits_from:TestCase",
        "uses:utils.StreamTTY",
        "uses:utils.replace_original_by",
        "uses:utils.StreamNonTTY"
      ],
      "StreamTTY": [
        "inherits_from:StringIO"
      ],
      "StreamNonTTY": [
        "inherits_from:StringIO"
      ],
      "WinTermTest": [
        "inherits_from:TestCase"
      ],
      "Modality": [
        "inherits_from:Enum"
      ],
      "BodyRegion": [
        "inherits_from:Enum"
      ],
      "BodyPart": [
        "inherits_from:Enum"
      ],
      "IntentCategory": [
        "inherits_from:Enum"
      ],
      "ProcedureStatus": [
        "inherits_from:Enum"
      ],
      "BundleValidator": [
        "uses:core.models.clinical_intent.ClinicalIntent"
      ],
      "LineItemValidator": [
        "uses:utils.helpers.clean_cpt_code",
        "uses:utils.helpers.string_similarity"
      ],
      "ModifierValidator": [
        "uses:utils.helpers.clean_cpt_code"
      ],
      "RateValidator": [
        "uses:utils.helpers.safe_int",
        "uses:utils.helpers.clean_tin"
      ],
      "UnitsValidator": [
        "uses:utils.helpers.safe_int",
        "uses:utils.helpers.clean_cpt_code"
      ]
    },
    "dependencies": {
      "internal": [
        "core.*",
        "core.ACL_ORIGIN",
        "core.Argument",
        "core.BaseCommand",
        "core.Command",
        "core.CommandCollection",
        "core.Context",
        "core.FLASK_CORS_EVALUATED",
        "core.Group",
        "core.IDNABidiError",
        "core.IDNAError",
        "core.InvalidCodepoint",
        "core.InvalidCodepointContext",
        "core.MAError",
        "core.MaskedArray",
        "core.MultiCommand",
        "core.NestedDateTime",
        "core.Option",
        "core.Parameter",
        "core.ParameterSource",
        "core.add",
        "core.alabel",
        "core.array",
        "core.asarray",
        "core.check_bidi",
        "core.check_hyphen_ok",
        "core.check_initial_combiner",
        "core.check_label",
        "core.check_nfc",
        "core.concatenate",
        "core.contents",
        "core.count",
        "core.decode",
        "core.dot",
        "core.encode",
        "core.filled",
        "core.get_cors_options",
        "core.get_masked_subclass",
        "core.get_regexp_pattern",
        "core.getdata",
        "core.getmask",
        "core.getmaskarray",
        "core.make_mask_descr",
        "core.mask_or",
        "core.masked",
        "core.masked_array",
        "core.models.clinical_intent.ClinicalIntent",
        "core.models.validation.ValidationResult",
        "core.models.validation.ValidationSession",
        "core.nomask",
        "core.ones",
        "core.parse_resources",
        "core.services.database.DatabaseService",
        "core.services.hcfa.HCFAService",
        "core.services.normalizer.normalize_hcfa_format",
        "core.services.ota_service.OTAService",
        "core.services.rate_service.RateService",
        "core.services.reporter.ValidationReporter",
        "core.set_cors_headers",
        "core.sort",
        "core.try_match",
        "core.ulabel",
        "core.uts46_remap",
        "core.valid_contextj",
        "core.valid_contexto",
        "core.valid_label_length",
        "core.valid_string_length",
        "core.validators.bundle_validator.BundleValidator",
        "core.validators.intent_validator.ClinicalIntentValidator",
        "core.validators.line_items.LineItemValidator",
        "core.validators.modifier_validator.ModifierValidator",
        "core.validators.rate_validator.RateValidator",
        "core.validators.units_validator.UnitsValidator",
        "core.where",
        "core.zeros",
        "utils.Cycler",
        "utils.DEFAULT_CA_BUNDLE_PATH",
        "utils.DEFAULT_PORTS",
        "utils.Joiner",
        "utils.LRUCache",
        "utils.LazyFile",
        "utils.Namespace",
        "utils.PacifyFlushWrapper",
        "utils.StreamNonTTY",
        "utils.StreamTTY",
        "utils._PassArg",
        "utils._detect_program_name",
        "utils._expand_args",
        "utils.cached_property",
        "utils.canonicalize_name",
        "utils.canonicalize_version",
        "utils.check_header_validity",
        "utils.clear_caches",
        "utils.code_mapper.CodeMapper",
        "utils.concat",
        "utils.consume",
        "utils.default_headers",
        "utils.echo",
        "utils.environ_property",
        "utils.extract_zipped_paths",
        "utils.format_filename",
        "utils.generate_lorem_ipsum",
        "utils.get_app_dir",
        "utils.get_auth_from_url",
        "utils.get_binary_stream",
        "utils.get_content_length",
        "utils.get_content_type",
        "utils.get_current_url",
        "utils.get_encoding_from_headers",
        "utils.get_environ_proxies",
        "utils.get_host",
        "utils.get_netrc_auth",
        "utils.get_text_stream",
        "utils.guess_filename",
        "utils.guess_json_utf",
        "utils.header_property",
        "utils.helpers.clean_cpt_code",
        "utils.helpers.clean_tin",
        "utils.helpers.format_timestamp",
        "utils.helpers.safe_int",
        "utils.helpers.string_similarity",
        "utils.htmlsafe_json_dumps",
        "utils.import_string",
        "utils.internal_code",
        "utils.internalcode",
        "utils.is_undefined",
        "utils.iter_slices",
        "utils.make_default_short_help",
        "utils.make_str",
        "utils.missing",
        "utils.object_type_repr",
        "utils.open_file",
        "utils.osname",
        "utils.parse_dict_header",
        "utils.parse_header_links",
        "utils.pass_context",
        "utils.pass_environment",
        "utils.pass_eval_context",
        "utils.pformat",
        "utils.prepend_scheme_if_needed",
        "utils.pycharm",
        "utils.redirect",
        "utils.replace_by",
        "utils.replace_original_by",
        "utils.requote_uri",
        "utils.resolve_proxies",
        "utils.rewind_body",
        "utils.safecall",
        "utils.select_autoescape",
        "utils.select_proxy",
        "utils.send_file",
        "utils.should_bypass_proxies",
        "utils.stream_decode_response_unicode",
        "utils.super_len",
        "utils.to_key_val_list",
        "utils.url_quote",
        "utils.urldefragauth",
        "utils.urlize"
      ],
      "external": [
        "AppKit",
        "ConfigParser",
        "Cython",
        "Cython.Build.cythonize",
        "Cython.Compiler.Version.version",
        "Foundation",
        "HTMLParser.HTMLParser",
        "IPython.core.completer.provisionalcompleter",
        "IPython.core.formatters.BaseFormatter",
        "IPython.core.interactiveshell.InteractiveShell",
        "IPython.core.magic.Magics",
        "IPython.core.magic.line_magic",
        "IPython.core.magic.magics_class",
        "IPython.core.magic_arguments.argument",
        "IPython.core.magic_arguments.magic_arguments",
        "IPython.core.magic_arguments.parse_argstring",
        "IPython.display.display",
        "IPython.get_ipython",
        "Levenshtein.*",
        "None.Descriptor",
        "None.DistlibException",
        "None.Flask",
        "None.HTTPSConnectionPool",
        "None.Integer",
        "None.MatchPattern",
        "None.MetaSerialisable",
        "None.MinMax",
        "None.Sequence",
        "None.String",
        "None._128Bit",
        "None._256Bit",
        "None._80Bit",
        "None._96Bit",
        "None.__version__",
        "None._add_newdocs",
        "None._add_newdocs_scalars",
        "None._appengine_environ",
        "None._arraypad_impl",
        "None._arraysetops_impl",
        "None._arrayterator_impl",
        "None._asarray",
        "None._bounded_integers",
        "None._common",
        "None._compat",
        "None._core",
        "None._distributor_init",
        "None._distributor_init_local",
        "None._distutils",
        "None._dtype",
        "None._dtype_ctypes",
        "None._function_base_impl",
        "None._helper",
        "None._histograms_impl",
        "None._index_tricks_impl",
        "None._internal",
        "None._linalg",
        "None._machar",
        "None._manylinux",
        "None._methods",
        "None._multiarray_umath",
        "None._musllinux",
        "None._nanfunctions_impl",
        "None._npyio_impl",
        "None._pickle",
        "None._pocketfft",
        "None._pocketfft_umath",
        "None._polynomial_impl",
        "None._private",
        "None._shape_base_impl",
        "None._stride_tricks_impl",
        "None._sysconfig",
        "None._twodim_base_impl",
        "None._type_check_impl",
        "None._ufunc_config",
        "None._ufunclike_impl",
        "None._utils_impl",
        "None._version",
        "None.array_utils",
        "None.arrayprint",
        "None.auxfuncs",
        "None.box",
        "None.capi_maps",
        "None.cb_rules",
        "None.certs",
        "None.cfuncs",
        "None.cli",
        "None.common_rules",
        "None.core",
        "None.crackfortran",
        "None.datastructures",
        "None.defaults",
        "None.defmatrix",
        "None.diagnose",
        "None.einsumfunc",
        "None.errors",
        "None.exceptions",
        "None.extras",
        "None.f2py2e",
        "None.f90mod_rules",
        "None.filesize",
        "None.format",
        "None.formatting",
        "None.fromnumeric",
        "None.func2subr",
        "None.function_base",
        "None.fuzz",
        "None.get_console",
        "None.getlimits",
        "None.helper",
        "None.http",
        "None.idnadata",
        "None.importlib",
        "None.incremental_tree",
        "None.introspect",
        "None.json",
        "None.lib",
        "None.licenses",
        "None.linalg",
        "None.matrixlib",
        "None.mixins",
        "None.multiarray",
        "None.nodes",
        "None.npyio",
        "None.numeric",
        "None.numerictypes",
        "None.overrides",
        "None.packages",
        "None.pkg_resources",
        "None.polyutils",
        "None.pretty",
        "None.py3k",
        "None.relativedelta",
        "None.requirements",
        "None.resources",
        "None.rules",
        "None.scimath",
        "None.sessions",
        "None.shape_base",
        "None.specifiers",
        "None.stride_tricks",
        "None.symbolic",
        "None.termui",
        "None.themes",
        "None.types",
        "None.typing",
        "None.tz",
        "None.ufunc",
        "None.umath",
        "None.use_rules",
        "None.util",
        "None.utils",
        "None.version",
        "None.win32",
        "OpenSSL",
        "OpenSSL.SSL",
        "OpenSSL.crypto",
        "OpenSSL.crypto.X509",
        "PIL.Image",
        "PIL.ImageDraw",
        "PIL.ImageFont",
        "PyInstaller.compat.is_conda",
        "PyInstaller.compat.is_pure_conda",
        "PyInstaller.utils.hooks.collect_dynamic_libs",
        "PyInstaller.utils.hooks.conda_support",
        "PyInstaller.utils.hooks.is_module_satisfies",
        "PyQt4",
        "PyQt4.QtGui.QApplication",
        "PyQt5",
        "PyQt5.QtWidgets.QApplication",
        "Queue",
        "StringIO",
        "StringIO.StringIO",
        "StringMatcher.StringMatcher",
        "UserDict.DictMixin",
        "_3d._3DBase",
        "__builtin__",
        "__future__.absolute_import",
        "__future__.annotations",
        "__future__.unicode_literals",
        "__main__",
        "__main__.__requires__",
        "__main__.make_test_card",
        "__pypy__.builders.BytesBuilder",
        "__pypy__.newlist_hint",
        "__version__.__author__",
        "__version__.__author_email__",
        "__version__.__build__",
        "__version__.__cake__",
        "__version__.__copyright__",
        "__version__.__description__",
        "__version__.__license__",
        "__version__.__title__",
        "__version__.__url__",
        "__version__.__version__",
        "_abcoll.ItemsView",
        "_abcoll.KeysView",
        "_abcoll.ValuesView",
        "_aix_support.aix_platform",
        "_api.SSLContext",
        "_api.extract_from_ssl",
        "_api.inject_into_ssl",
        "_array_api_info.__array_namespace_info__",
        "_array_like.ArrayLike",
        "_array_like.NDArray",
        "_array_like._ArrayLike",
        "_array_like._ArrayLikeAnyString_co",
        "_array_like._ArrayLikeBool_co",
        "_array_like._ArrayLikeBytes_co",
        "_array_like._ArrayLikeComplex128_co",
        "_array_like._ArrayLikeComplex_co",
        "_array_like._ArrayLikeDT64_co",
        "_array_like._ArrayLikeFloat64_co",
        "_array_like._ArrayLikeFloat_co",
        "_array_like._ArrayLikeInt",
        "_array_like._ArrayLikeInt_co",
        "_array_like._ArrayLikeNumber_co",
        "_array_like._ArrayLikeObject_co",
        "_array_like._ArrayLikeStr_co",
        "_array_like._ArrayLikeString_co",
        "_array_like._ArrayLikeTD64_co",
        "_array_like._ArrayLikeUInt_co",
        "_array_like._ArrayLikeUnknown",
        "_array_like._ArrayLikeVoid_co",
        "_array_like._FiniteNestedSequence",
        "_array_like._SupportsArray",
        "_array_like._SupportsArrayFunc",
        "_array_like._UnknownType",
        "_array_utils_impl.__all__",
        "_array_utils_impl.__doc__",
        "_array_utils_impl.byte_bounds",
        "_array_utils_impl.normalize_axis_index",
        "_array_utils_impl.normalize_axis_tuple",
        "_arrayterator_impl.Arrayterator",
        "_asarray.*",
        "_backend.Backend",
        "_cell_widths.CELL_WIDTHS",
        "_char_codes._BoolCodes",
        "_char_codes._ByteCodes",
        "_char_codes._BytesCodes",
        "_char_codes._CDoubleCodes",
        "_char_codes._CLongDoubleCodes",
        "_char_codes._CSingleCodes",
        "_char_codes._CharacterCodes",
        "_char_codes._Complex128Codes",
        "_char_codes._Complex64Codes",
        "_char_codes._ComplexFloatingCodes",
        "_char_codes._DT64Codes",
        "_char_codes._DoubleCodes",
        "_char_codes._FlexibleCodes",
        "_char_codes._Float16Codes",
        "_char_codes._Float32Codes",
        "_char_codes._Float64Codes",
        "_char_codes._FloatingCodes",
        "_char_codes._GenericCodes",
        "_char_codes._HalfCodes",
        "_char_codes._InexactCodes",
        "_char_codes._Int16Codes",
        "_char_codes._Int32Codes",
        "_char_codes._Int64Codes",
        "_char_codes._Int8Codes",
        "_char_codes._IntCCodes",
        "_char_codes._IntCodes",
        "_char_codes._IntPCodes",
        "_char_codes._IntegerCodes",
        "_char_codes._LongCodes",
        "_char_codes._LongDoubleCodes",
        "_char_codes._LongLongCodes",
        "_char_codes._NumberCodes",
        "_char_codes._ObjectCodes",
        "_char_codes._ShortCodes",
        "_char_codes._SignedIntegerCodes",
        "_char_codes._SingleCodes",
        "_char_codes._StrCodes",
        "_char_codes._StringCodes",
        "_char_codes._TD64Codes",
        "_char_codes._UByteCodes",
        "_char_codes._UInt16Codes",
        "_char_codes._UInt32Codes",
        "_char_codes._UInt64Codes",
        "_char_codes._UInt8Codes",
        "_char_codes._UIntCCodes",
        "_char_codes._UIntCodes",
        "_char_codes._UIntPCodes",
        "_char_codes._ULongCodes",
        "_char_codes._ULongLongCodes",
        "_char_codes._UShortCodes",
        "_char_codes._UnsignedIntegerCodes",
        "_char_codes._VoidCodes",
        "_chart.ChartBase",
        "_cmsgpack.Packer",
        "_cmsgpack.Unpacker",
        "_cmsgpack.unpackb",
        "_collections.HTTPHeaderDict",
        "_collections.RecentlyUsedContainer",
        "_common._tzinfo",
        "_common._validate_fromutc_inputs",
        "_common.enfold",
        "_common.tzname_in_python2",
        "_common.tzrangebase",
        "_common.weekday",
        "_compat.BadMetadata",
        "_compat.BasePath",
        "_compat.CYGWIN",
        "_compat.WIN",
        "_compat._NonClosingTextIOWrapper",
        "_compat._default_text_stderr",
        "_compat._default_text_stdout",
        "_compat._find_binary_reader",
        "_compat._find_binary_writer",
        "_compat._get_argv_encoding",
        "_compat.auto_wrap_for_ansi",
        "_compat.binary_streams",
        "_compat.get_best_encoding",
        "_compat.get_dist_canonical_name",
        "_compat.get_info_location",
        "_compat.get_text_stderr",
        "_compat.isatty",
        "_compat.open_stream",
        "_compat.parse_name_and_version_from_info_directory",
        "_compat.should_strip_ansi",
        "_compat.strip_ansi",
        "_compat.term_len",
        "_compat.text_streams",
        "_convertions.asbytes",
        "_convertions.asunicode",
        "_core.False_",
        "_core.ScalarType",
        "_core.True_",
        "_core.abs",
        "_core.absolute",
        "_core.acos",
        "_core.acosh",
        "_core.add",
        "_core.all",
        "_core.allclose",
        "_core.amax",
        "_core.amin",
        "_core.any",
        "_core.arange",
        "_core.arccos",
        "_core.arccosh",
        "_core.arcsin",
        "_core.arcsinh",
        "_core.arctan",
        "_core.arctan2",
        "_core.arctanh",
        "_core.argmax",
        "_core.argmin",
        "_core.argpartition",
        "_core.argsort",
        "_core.argwhere",
        "_core.around",
        "_core.array",
        "_core.array2string",
        "_core.array_equal",
        "_core.array_equiv",
        "_core.array_repr",
        "_core.array_str",
        "_core.asanyarray",
        "_core.asarray",
        "_core.ascontiguousarray",
        "_core.asfortranarray",
        "_core.asin",
        "_core.asinh",
        "_core.astype",
        "_core.atan",
        "_core.atan2",
        "_core.atanh",
        "_core.atleast_1d",
        "_core.atleast_2d",
        "_core.atleast_3d",
        "_core.base_repr",
        "_core.binary_repr",
        "_core.bitwise_and",
        "_core.bitwise_count",
        "_core.bitwise_invert",
        "_core.bitwise_left_shift",
        "_core.bitwise_not",
        "_core.bitwise_or",
        "_core.bitwise_right_shift",
        "_core.bitwise_xor",
        "_core.block",
        "_core.bool",
        "_core.bool_",
        "_core.broadcast",
        "_core.busday_count",
        "_core.busday_offset",
        "_core.busdaycalendar",
        "_core.byte",
        "_core.bytes_",
        "_core.can_cast",
        "_core.cbrt",
        "_core.cdouble",
        "_core.ceil",
        "_core.character",
        "_core.choose",
        "_core.clip",
        "_core.clongdouble",
        "_core.complex128",
        "_core.complex64",
        "_core.complexfloating",
        "_core.compress",
        "_core.concat",
        "_core.concatenate",
        "_core.conj",
        "_core.conjugate",
        "_core.convolve",
        "_core.copysign",
        "_core.copyto",
        "_core.correlate",
        "_core.cos",
        "_core.cosh",
        "_core.count_nonzero",
        "_core.cross",
        "_core.csingle",
        "_core.cumprod",
        "_core.cumsum",
        "_core.cumulative_prod",
        "_core.cumulative_sum",
        "_core.datetime64",
        "_core.datetime_as_string",
        "_core.datetime_data",
        "_core.deg2rad",
        "_core.degrees",
        "_core.diagonal",
        "_core.divide",
        "_core.divmod",
        "_core.dot",
        "_core.double",
        "_core.dtype",
        "_core.e",
        "_core.einsum",
        "_core.einsum_path",
        "_core.empty",
        "_core.empty_like",
        "_core.equal",
        "_core.errstate",
        "_core.euler_gamma",
        "_core.exp",
        "_core.exp2",
        "_core.expm1",
        "_core.fabs",
        "_core.finfo",
        "_core.flatiter",
        "_core.flatnonzero",
        "_core.flexible",
        "_core.float16",
        "_core.float32",
        "_core.float64",
        "_core.float_power",
        "_core.floating",
        "_core.floor",
        "_core.floor_divide",
        "_core.fmax",
        "_core.fmin",
        "_core.fmod",
        "_core.format_float_positional",
        "_core.format_float_scientific",
        "_core.frexp",
        "_core.from_dlpack",
        "_core.frombuffer",
        "_core.fromfile",
        "_core.fromfunction",
        "_core.fromiter",
        "_core.frompyfunc",
        "_core.fromstring",
        "_core.full",
        "_core.full_like",
        "_core.gcd",
        "_core.generic",
        "_core.geomspace",
        "_core.get_printoptions",
        "_core.getbufsize",
        "_core.geterr",
        "_core.geterrcall",
        "_core.greater",
        "_core.greater_equal",
        "_core.half",
        "_core.heaviside",
        "_core.hstack",
        "_core.hypot",
        "_core.identity",
        "_core.iinfo",
        "_core.indices",
        "_core.inexact",
        "_core.inf",
        "_core.inner",
        "_core.int16",
        "_core.int32",
        "_core.int64",
        "_core.int8",
        "_core.int_",
        "_core.intc",
        "_core.integer",
        "_core.intp",
        "_core.invert",
        "_core.is_busday",
        "_core.isclose",
        "_core.isdtype",
        "_core.isfinite",
        "_core.isfortran",
        "_core.isinf",
        "_core.isnan",
        "_core.isnat",
        "_core.isscalar",
        "_core.issubdtype",
        "_core.lcm",
        "_core.ldexp",
        "_core.left_shift",
        "_core.less",
        "_core.less_equal",
        "_core.lexsort",
        "_core.linspace",
        "_core.little_endian",
        "_core.log",
        "_core.log10",
        "_core.log1p",
        "_core.log2",
        "_core.logaddexp",
        "_core.logaddexp2",
        "_core.logical_and",
        "_core.logical_not",
        "_core.logical_or",
        "_core.logical_xor",
        "_core.logspace",
        "_core.long",
        "_core.longdouble",
        "_core.longlong",
        "_core.matmul",
        "_core.matrix_transpose",
        "_core.matvec",
        "_core.max",
        "_core.maximum",
        "_core.may_share_memory",
        "_core.mean",
        "_core.memmap",
        "_core.min",
        "_core.min_scalar_type",
        "_core.minimum",
        "_core.mod",
        "_core.modf",
        "_core.moveaxis",
        "_core.multiply",
        "_core.nan",
        "_core.ndarray",
        "_core.ndim",
        "_core.nditer",
        "_core.negative",
        "_core.nested_iters",
        "_core.newaxis",
        "_core.nextafter",
        "_core.nonzero",
        "_core.not_equal",
        "_core.number",
        "_core.object_",
        "_core.ones",
        "_core.ones_like",
        "_core.outer",
        "_core.partition",
        "_core.permute_dims",
        "_core.pi",
        "_core.positive",
        "_core.pow",
        "_core.power",
        "_core.printoptions",
        "_core.prod",
        "_core.promote_types",
        "_core.ptp",
        "_core.put",
        "_core.putmask",
        "_core.rad2deg",
        "_core.radians",
        "_core.ravel",
        "_core.recarray",
        "_core.reciprocal",
        "_core.record",
        "_core.remainder",
        "_core.repeat",
        "_core.require",
        "_core.reshape",
        "_core.resize",
        "_core.result_type",
        "_core.right_shift",
        "_core.rint",
        "_core.roll",
        "_core.rollaxis",
        "_core.round",
        "_core.sctypeDict",
        "_core.searchsorted",
        "_core.set_printoptions",
        "_core.setbufsize",
        "_core.seterr",
        "_core.seterrcall",
        "_core.shape",
        "_core.shares_memory",
        "_core.short",
        "_core.sign",
        "_core.signbit",
        "_core.signedinteger",
        "_core.sin",
        "_core.single",
        "_core.sinh",
        "_core.size",
        "_core.sort",
        "_core.spacing",
        "_core.sqrt",
        "_core.square",
        "_core.squeeze",
        "_core.stack",
        "_core.std",
        "_core.str_",
        "_core.subtract",
        "_core.sum",
        "_core.swapaxes",
        "_core.take",
        "_core.tan",
        "_core.tanh",
        "_core.tensordot",
        "_core.timedelta64",
        "_core.trace",
        "_core.transpose",
        "_core.true_divide",
        "_core.trunc",
        "_core.typecodes",
        "_core.ubyte",
        "_core.ufunc",
        "_core.uint",
        "_core.uint16",
        "_core.uint32",
        "_core.uint64",
        "_core.uint8",
        "_core.uintc",
        "_core.uintp",
        "_core.ulong",
        "_core.ulonglong",
        "_core.unsignedinteger",
        "_core.unstack",
        "_core.ushort",
        "_core.var",
        "_core.vdot",
        "_core.vecdot",
        "_core.vecmat",
        "_core.void",
        "_core.vstack",
        "_core.where",
        "_core.zeros",
        "_core.zeros_like",
        "_csv.Error",
        "_ctypes",
        "_datasource.DataSource",
        "_dists.Distribution",
        "_distutils.DistutilsBackend",
        "_dtype._kind_name",
        "_dtype_like.DTypeLike",
        "_dtype_like._DTypeLike",
        "_dtype_like._DTypeLikeBool",
        "_dtype_like._DTypeLikeBytes",
        "_dtype_like._DTypeLikeComplex",
        "_dtype_like._DTypeLikeComplex_co",
        "_dtype_like._DTypeLikeDT64",
        "_dtype_like._DTypeLikeFloat",
        "_dtype_like._DTypeLikeInt",
        "_dtype_like._DTypeLikeObject",
        "_dtype_like._DTypeLikeStr",
        "_dtype_like._DTypeLikeTD64",
        "_dtype_like._DTypeLikeUInt",
        "_dtype_like._DTypeLikeVoid",
        "_dtype_like._SupportsDType",
        "_dtype_like._VoidDTypeLike",
        "_dummy_thread.get_ident",
        "_elffile.EIClass",
        "_elffile.EIData",
        "_elffile.ELFFile",
        "_elffile.EMachine",
        "_emoji_codes.EMOJI",
        "_emoji_replace._emoji_replace",
        "_envs.Environment",
        "_expired_attrs_2_0.__expired_attributes__",
        "_export_format.CONSOLE_HTML_FORMAT",
        "_export_format.CONSOLE_SVG_FORMAT",
        "_extension.load_ipython_extension",
        "_factories._TzOffsetFactory",
        "_factories._TzSingleton",
        "_factories._TzStrFactory",
        "_fileno.get_fileno",
        "_frozen_importlib",
        "_frozen_importlib_external",
        "_generator.Generator",
        "_generator.default_rng",
        "_globals._CopyMode",
        "_globals._NoValue",
        "_helper.*",
        "_identifier.pattern",
        "_imp",
        "_impl.BackendUnavailable",
        "_impl.BuildBackendHookCaller",
        "_impl.HookMissing",
        "_impl.SubprocessRunner",
        "_impl.UnsupportedOperation",
        "_impl.default_subprocess_runner",
        "_impl.quiet_subprocess_runner",
        "_in_process._in_proc_script_path",
        "_internal._DictAccessorProperty",
        "_internal._TAccessorValue",
        "_internal._dt_as_utc",
        "_internal._get_environ",
        "_internal._log",
        "_internal._missing",
        "_internal._plain_int",
        "_internal._wsgi_decoding_dance",
        "_internal._wsgi_encoding_dance",
        "_internal_utils.HEADER_VALIDATORS",
        "_internal_utils._HEADER_VALIDATORS_BYTE",
        "_internal_utils._HEADER_VALIDATORS_STR",
        "_internal_utils.to_native_string",
        "_internal_utils.unicode_is_ascii",
        "_iotools.ConversionWarning",
        "_iotools.ConverterError",
        "_iotools.ConverterLockError",
        "_iotools.LineSplitter",
        "_iotools.NameValidator",
        "_iotools.StringConverter",
        "_iotools._decode_line",
        "_iotools._is_string_like",
        "_iotools.easy_dtype",
        "_iotools.flatten_dtype",
        "_iotools.has_nested_fields",
        "_isocbind.iso_c2py_map",
        "_isocbind.iso_c_binding_map",
        "_isocbind.isoc_c2pycode_map",
        "_isocbind.isoc_kindmap",
        "_json._CompactJSON",
        "_json.msg_to_json",
        "_linalg.*",
        "_log_render.FormatTimeCallable",
        "_log_render.LogRender",
        "_loop.loop_first",
        "_loop.loop_first_last",
        "_loop.loop_last",
        "_machar.MachAr",
        "_macos._configure_context",
        "_macos._verify_peercerts_impl",
        "_manylinux",
        "_meson.MesonBackend",
        "_mt19937.MT19937",
        "_multiarray_umath.*",
        "_multiarray_umath._ARRAY_API",
        "_multiarray_umath._UFUNC_API",
        "_multiarray_umath._add_newdoc_ufunc",
        "_multiarray_umath._array_converter",
        "_multiarray_umath._center",
        "_multiarray_umath._expandtabs",
        "_multiarray_umath._expandtabs_length",
        "_multiarray_umath._extobj_contextvar",
        "_multiarray_umath._flagdict",
        "_multiarray_umath._get_extobj_dict",
        "_multiarray_umath._get_madvise_hugepage",
        "_multiarray_umath._get_ndarray_c_version",
        "_multiarray_umath._ljust",
        "_multiarray_umath._lstrip_chars",
        "_multiarray_umath._lstrip_whitespace",
        "_multiarray_umath._make_extobj",
        "_multiarray_umath._monotonicity",
        "_multiarray_umath._ones_like",
        "_multiarray_umath._partition",
        "_multiarray_umath._partition_index",
        "_multiarray_umath._place",
        "_multiarray_umath._reconstruct",
        "_multiarray_umath._replace",
        "_multiarray_umath._rjust",
        "_multiarray_umath._rpartition",
        "_multiarray_umath._rpartition_index",
        "_multiarray_umath._rstrip_chars",
        "_multiarray_umath._rstrip_whitespace",
        "_multiarray_umath._set_madvise_hugepage",
        "_multiarray_umath._strip_chars",
        "_multiarray_umath._strip_whitespace",
        "_multiarray_umath._vec_string",
        "_multiarray_umath._zfill",
        "_multiarray_umath.from_dlpack",
        "_native._escape_inner",
        "_nbit._NBitByte",
        "_nbit._NBitDouble",
        "_nbit._NBitHalf",
        "_nbit._NBitInt",
        "_nbit._NBitIntC",
        "_nbit._NBitIntP",
        "_nbit._NBitLong",
        "_nbit._NBitLongDouble",
        "_nbit._NBitLongLong",
        "_nbit._NBitShort",
        "_nbit._NBitSingle",
        "_nbit_base.NBitBase",
        "_nbit_base._128Bit",
        "_nbit_base._16Bit",
        "_nbit_base._256Bit",
        "_nbit_base._32Bit",
        "_nbit_base._64Bit",
        "_nbit_base._80Bit",
        "_nbit_base._8Bit",
        "_nbit_base._96Bit",
        "_nested_sequence._NestedSequence",
        "_npyio_impl.DataSource",
        "_npyio_impl.NpzFile",
        "_npyio_impl.__doc__",
        "_openssl._configure_context",
        "_openssl._verify_peercerts_impl",
        "_osx_support",
        "_palettes.EIGHT_BIT_PALETTE",
        "_palettes.STANDARD_PALETTE",
        "_palettes.WINDOWS_PALETTE",
        "_parser.DEFAULTPARSER",
        "_parser.DEFAULTTZPARSER",
        "_parser.MarkerAtom",
        "_parser.MarkerList",
        "_parser.Op",
        "_parser.ParserError",
        "_parser.TOMLDecodeError",
        "_parser.UnknownTimezoneWarning",
        "_parser.Value",
        "_parser.Variable",
        "_parser.__doc__",
        "_parser._parsetz",
        "_parser._resultbase",
        "_parser._timelex",
        "_parser._tzparser",
        "_parser.load",
        "_parser.loads",
        "_parser.parse",
        "_parser.parse_marker",
        "_parser.parse_requirement",
        "_parser.parser",
        "_parser.parserinfo",
        "_pcg64.PCG64",
        "_pcg64.PCG64DXSM",
        "_philox.Philox",
        "_pick.pick_bool",
        "_pocketfft.*",
        "_polybase.ABCPolyBase",
        "_private.extbuild",
        "_private.utils.*",
        "_private.utils._assert_valid_refcount",
        "_private.utils._gen_alignment_data",
        "_pytest.mark.structures.ParameterSet",
        "_ratio.ratio_distribute",
        "_ratio.ratio_reduce",
        "_ratio.ratio_resolve",
        "_re.RE_DATETIME",
        "_re.RE_LOCALTIME",
        "_re.RE_NUMBER",
        "_re.match_to_datetime",
        "_re.match_to_localtime",
        "_re.match_to_number",
        "_reader.WorkSheetParser",
        "_reloader.run_with_reloader",
        "_scalars._BoolLike_co",
        "_scalars._CharLike_co",
        "_scalars._ComplexLike_co",
        "_scalars._FloatLike_co",
        "_scalars._IntLike_co",
        "_scalars._NumberLike_co",
        "_scalars._ScalarLike_co",
        "_scalars._TD64Like_co",
        "_scalars._UIntLike_co",
        "_scalars._VoidLike_co",
        "_scimath_impl.__all__",
        "_scimath_impl.__doc__",
        "_scimath_impl.arccos",
        "_scimath_impl.arcsin",
        "_scimath_impl.arctanh",
        "_scimath_impl.log",
        "_scimath_impl.log10",
        "_scimath_impl.log2",
        "_scimath_impl.logn",
        "_scimath_impl.power",
        "_scimath_impl.sqrt",
        "_securetransport.bindings.CoreFoundation",
        "_securetransport.bindings.Security",
        "_securetransport.bindings.SecurityConst",
        "_securetransport.low_level._assert_no_error",
        "_securetransport.low_level._build_tls_unknown_ca_alert",
        "_securetransport.low_level._cert_array_from_pem",
        "_securetransport.low_level._create_cfstring_array",
        "_securetransport.low_level._load_client_cert_chain",
        "_securetransport.low_level._temporary_keychain",
        "_sfc64.SFC64",
        "_shape._Shape",
        "_shape._ShapeLike",
        "_socket",
        "_speedups._escape_inner",
        "_spinners.SPINNERS",
        "_ssl",
        "_ssl_constants._original_SSLContext",
        "_ssl_constants._original_super_SSLContext",
        "_ssl_constants._set_ssl_context_verify_mode",
        "_ssl_constants._truststore_SSLContext_dunder_class",
        "_ssl_constants._truststore_SSLContext_super_class",
        "_stride_tricks_impl.__doc__",
        "_stride_tricks_impl.as_strided",
        "_stride_tricks_impl.sliding_window_view",
        "_string.formatter_field_name_split",
        "_string_helpers.LOWER_TABLE",
        "_string_helpers.UPPER_TABLE",
        "_string_helpers.english_capitalize",
        "_string_helpers.english_lower",
        "_string_helpers.english_upper",
        "_structures.Infinity",
        "_structures.InfinityType",
        "_structures.NegativeInfinity",
        "_structures.NegativeInfinityType",
        "_termui_impl.Editor",
        "_termui_impl.ProgressBar",
        "_termui_impl.getchar",
        "_termui_impl.open_url",
        "_termui_impl.pager",
        "_termui_impl.raw_terminal",
        "_testbuffer",
        "_textwrap.TextWrapper",
        "_thread.get_ident",
        "_timer.timer",
        "_tokenizer.DEFAULT_RULES",
        "_tokenizer.ParserSyntaxError",
        "_tokenizer.Tokenizer",
        "_type_aliases.allTypes",
        "_type_aliases.sctypeDict",
        "_type_aliases.sctypes",
        "_types.Key",
        "_types.ParseFloat",
        "_types.Pos",
        "_typeshed.BytesPath",
        "_typeshed.SizedBuffer",
        "_typeshed.StrOrBytesPath",
        "_typeshed.StrPath",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIApplication",
        "_typeshed.wsgi.WSGIEnvironment",
        "_ufunc._GUFunc_Nin2_Nout1",
        "_ufunc._UFunc_Nin1_Nout1",
        "_ufunc._UFunc_Nin1_Nout2",
        "_ufunc._UFunc_Nin2_Nout1",
        "_ufunc._UFunc_Nin2_Nout2",
        "_ufunc_config.*",
        "_ufunc_config.errstate",
        "_ufunclike_impl.isneginf",
        "_ufunclike_impl.isposinf",
        "_user_array_impl.__doc__",
        "_user_array_impl.container",
        "_utilities.Symbol",
        "_utilities.make_id",
        "_utilities.make_ref",
        "_utils._inspect",
        "_utils._inspect.formatargspec",
        "_utils._inspect.getargspec",
        "_utils._raise_warning",
        "_utils.set_module",
        "_version.NumpyVersion",
        "_version.__version__",
        "_version.version",
        "_winconsole._get_windows_console_stream",
        "_windows.WindowsConsoleFeatures",
        "_windows._configure_context",
        "_windows._verify_peercerts_impl",
        "_windows.get_windows_console_features",
        "_winreg",
        "_wrap.divide_line",
        "_writer.WorksheetWriter",
        "abc",
        "abc.ABC",
        "abc.ABCMeta",
        "abc.RichRenderable",
        "abc.abstractmethod",
        "abc.abstractproperty",
        "accept.Accept",
        "accept.CharsetAccept",
        "accept.LanguageAccept",
        "accept.MIMEAccept",
        "adapters.HTTPAdapter",
        "adbc_driver_manager",
        "adbc_driver_postgresql.dbapi",
        "adbc_driver_sqlite.dbapi",
        "align.Align",
        "align.AlignMethod",
        "align.VerticalAlignMethod",
        "alignment.Alignment",
        "android.mActivity",
        "ansi.AnsiBack",
        "ansi.AnsiDecoder",
        "ansi.AnsiFore",
        "ansi.AnsiStyle",
        "ansi.BEL",
        "ansi.Back",
        "ansi.Cursor",
        "ansi.Fore",
        "ansi.Style",
        "ansitowin32.AnsiToWin32",
        "ansitowin32.StreamWrapper",
        "api.PlatformDirsABC",
        "api.delete",
        "api.get",
        "api.head",
        "api.options",
        "api.patch",
        "api.post",
        "api.put",
        "api.request",
        "app.App",
        "app.Flask",
        "area_chart.AreaChart",
        "area_chart.AreaChart3D",
        "argparse",
        "argparse.ArgumentParser",
        "argparse.Namespace",
        "array",
        "array.array",
        "array_interface_testing",
        "arrayprint.*",
        "arrayprint._get_legacy_print_mode",
        "asgiref.sync.async_to_sync",
        "ast",
        "ast.literal_eval",
        "ast.parse",
        "async_utils.async_variant",
        "async_utils.auto_aiter",
        "async_utils.auto_await",
        "async_utils.auto_to_list",
        "asyncio",
        "atexit",
        "attr",
        "auth.Authorization",
        "auth.HTTPBasicAuth",
        "auth.WWWAuthenticate",
        "auth._basic_auth_str",
        "author.AuthorList",
        "auxfuncs.*",
        "auxfuncs.applyrules",
        "auxfuncs.debugcapi",
        "auxfuncs.dictappend",
        "auxfuncs.errmess",
        "auxfuncs.gentitle",
        "auxfuncs.getargs",
        "auxfuncs.getargs2",
        "auxfuncs.getfortranname",
        "auxfuncs.getuseblocks",
        "auxfuncs.hasbody",
        "auxfuncs.hascallstatement",
        "auxfuncs.hascommon",
        "auxfuncs.hasexternals",
        "auxfuncs.hasinitvalue",
        "auxfuncs.hasnote",
        "auxfuncs.hasresultnote",
        "auxfuncs.isarray",
        "auxfuncs.isarrayofstrings",
        "auxfuncs.isattr_value",
        "auxfuncs.ischaracter",
        "auxfuncs.ischaracter_or_characterarray",
        "auxfuncs.ischaracterarray",
        "auxfuncs.iscomplex",
        "auxfuncs.iscomplexarray",
        "auxfuncs.iscomplexfunction",
        "auxfuncs.iscomplexfunction_warn",
        "auxfuncs.isdummyroutine",
        "auxfuncs.isexternal",
        "auxfuncs.isfunction",
        "auxfuncs.isfunction_wrap",
        "auxfuncs.isint1",
        "auxfuncs.isint1array",
        "auxfuncs.isintent_aux",
        "auxfuncs.isintent_c",
        "auxfuncs.isintent_callback",
        "auxfuncs.isintent_copy",
        "auxfuncs.isintent_hide",
        "auxfuncs.isintent_in",
        "auxfuncs.isintent_inout",
        "auxfuncs.isintent_nothide",
        "auxfuncs.isintent_out",
        "auxfuncs.isintent_overwrite",
        "auxfuncs.islogical",
        "auxfuncs.islogicalfunction",
        "auxfuncs.islong_complex",
        "auxfuncs.islong_double",
        "auxfuncs.islong_doublefunction",
        "auxfuncs.islong_long",
        "auxfuncs.islong_longfunction",
        "auxfuncs.ismoduleroutine",
        "auxfuncs.isoptional",
        "auxfuncs.isrequired",
        "auxfuncs.isscalar",
        "auxfuncs.issigned_long_longarray",
        "auxfuncs.isstring",
        "auxfuncs.isstringarray",
        "auxfuncs.isstringfunction",
        "auxfuncs.issubroutine",
        "auxfuncs.issubroutine_wrap",
        "auxfuncs.isthreadsafe",
        "auxfuncs.isunsigned",
        "auxfuncs.isunsigned_char",
        "auxfuncs.isunsigned_chararray",
        "auxfuncs.isunsigned_long_long",
        "auxfuncs.isunsigned_long_longarray",
        "auxfuncs.isunsigned_short",
        "auxfuncs.isunsigned_shortarray",
        "auxfuncs.l_and",
        "auxfuncs.l_not",
        "auxfuncs.l_or",
        "auxfuncs.outmess",
        "auxfuncs.replace",
        "auxfuncs.requiresf90wrapper",
        "auxfuncs.show",
        "auxfuncs.stripcomma",
        "auxfuncs.throw_error",
        "axis.ChartLines",
        "axis.DateAxis",
        "axis.NumericAxis",
        "axis.SeriesAxis",
        "axis.TextAxis",
        "axis._BaseAxis",
        "bar_chart.BarChart",
        "bar_chart.BarChart3D",
        "base.*",
        "base.ANY",
        "base.Alias",
        "base.BaseDistribution",
        "base.BaseEntryPoint",
        "base.BaseEnvironment",
        "base.Bool",
        "base.Candidate",
        "base.CandidateLookup",
        "base.Constraint",
        "base.Convertible",
        "base.Descriptor",
        "base.FilesystemWheel",
        "base.Float",
        "base.InfoPath",
        "base.Integer",
        "base.MemoryWheel",
        "base.MinMax",
        "base.NamedSignal",
        "base.Namespace",
        "base.NoneSet",
        "base.Requirement",
        "base.Set",
        "base.Signal",
        "base.String",
        "base.USER_CACHE_DIR",
        "base.Wheel",
        "base._convert",
        "base.change_root",
        "base.default_namespace",
        "base.format_name",
        "base.get_major_minor_version",
        "base.get_src_prefix",
        "base.is_osx_framework",
        "base.signal",
        "base.site_packages",
        "base.user_site",
        "base64",
        "base64.b64decode",
        "base64.b64encode",
        "base64.urlsafe_b64encode",
        "bccache.BytecodeCache",
        "bccache.FileSystemBytecodeCache",
        "bccache.MemcachedBytecodeCache",
        "binascii",
        "binascii.hexlify",
        "binascii.unhexlify",
        "bindings.CFConst",
        "bindings.CoreFoundation",
        "bindings.Security",
        "bisect",
        "bisect.bisect_left",
        "bisect.bisect_right",
        "bit_generator.BitGenerator",
        "bit_generator.SeedSequence",
        "blinker.Namespace",
        "blueprints.Blueprint",
        "borders.Border",
        "borders.Side",
        "boto3",
        "botocore",
        "botocore.exceptions.ClientError",
        "botocore.exceptions.NoCredentialsError",
        "botocore.response.StreamingBody",
        "box.Box",
        "box.DOUBLE",
        "box.ROUNDED",
        "bs4.BeautifulSoup",
        "bubble_chart.BubbleChart",
        "builtins",
        "builtins.bool",
        "builtins.bytes",
        "builtins.complex",
        "builtins.float",
        "builtins.int",
        "builtins.object",
        "builtins.str",
        "builtins.styles",
        "bz2",
        "cProfile.Profile",
        "cache_control.RequestCacheControl",
        "cache_control.ResponseCacheControl",
        "calendar",
        "calendar.monthrange",
        "candidates.AlreadyInstalledCandidate",
        "candidates.BaseCandidate",
        "candidates.EditableCandidate",
        "candidates.ExtrasCandidate",
        "candidates.LinkCandidate",
        "candidates.REQUIRES_PYTHON_IDENTIFIER",
        "candidates.RequiresPythonCandidate",
        "candidates.as_base_candidate",
        "capi_maps.c2capi_map",
        "capi_maps.getctype",
        "cell.Cell",
        "cell.MergedCell",
        "cell.WriteOnlyCell",
        "cell.absolute_coordinate",
        "cell.cols_from_range",
        "cell.column_index_from_string",
        "cell.coordinate_to_tuple",
        "cell.get_column_interval",
        "cell.get_column_letter",
        "cell.quote_sheetname",
        "cell.range_boundaries",
        "cell.range_to_tuple",
        "cell.rows_from_range",
        "cell_range.CellRange",
        "cell_range.MultiCellRange",
        "cell_style.CellStyle",
        "cell_style.CellStyleList",
        "cell_style.StyleArray",
        "cells._is_single_cell_widths",
        "cells.cached_cell_len",
        "cells.cell_len",
        "cells.chop_cells",
        "cells.get_character_cell_size",
        "cells.set_cell_size",
        "cffi",
        "cffi.FFI",
        "cfuncs.errmess",
        "cgi.escape",
        "charset_normalizer",
        "chartsheet.Chartsheet",
        "chartspace.ChartContainer",
        "chartspace.ChartSpace",
        "chartspace.PlotArea",
        "chebyshev.Chebyshev",
        "checks",
        "checks.inc2_cfloat_struct",
        "child._WorkbookChild",
        "cli.AppGroup",
        "cli.ScriptInfo",
        "cli.cli",
        "cli.main",
        "click",
        "click.core.ParameterSource",
        "click.shell_completion.CompletionItem",
        "click.testing.CliRunner",
        "cmath",
        "code",
        "code_generators.genapi.fullapi_hash",
        "code_generators.numpy_api.full_api",
        "codecs",
        "codecs.BOM_UTF8",
        "codecs.lookup",
        "collections",
        "collections.ChainMap",
        "collections.Counter",
        "collections.Mapping",
        "collections.MutableMapping",
        "collections.OrderedDict",
        "collections.Sequence",
        "collections.UserDict",
        "collections.UserList",
        "collections.abc",
        "collections.abc.Buffer",
        "collections.abc.Callable",
        "collections.abc.Collection",
        "collections.abc.Generator",
        "collections.abc.Hashable",
        "collections.abc.Iterable",
        "collections.abc.Iterator",
        "collections.abc.Mapping",
        "collections.abc.MutableMapping",
        "collections.abc.Sequence",
        "collections.abc.Sized",
        "collections.defaultdict",
        "collections.deque",
        "collections.namedtuple",
        "color.Color",
        "color.ColorParseError",
        "color.ColorSystem",
        "color.blend_rgb",
        "color_triplet.ColorTriplet",
        "colorama",
        "colorama.initialise",
        "colors.BLACK",
        "colors.Color",
        "colors.ColorChoice",
        "colors.ColorChoiceDescriptor",
        "colors.ColorDescriptor",
        "colors.ColorList",
        "colors.HSLColor",
        "colors.PRESET_COLORS",
        "colors.RGBPercent",
        "colors.SchemeColor",
        "colors.SystemColor",
        "colorsys",
        "colorsys.rgb_to_hls",
        "columns.Columns",
        "comments.Comment",
        "compat.BaseConfigurator",
        "compat.Callable",
        "compat.CertificateError",
        "compat.Container",
        "compat.HTTPBasicAuthHandler",
        "compat.HTTPError",
        "compat.HTTPHandler",
        "compat.HTTPPasswordMgr",
        "compat.HTTPRedirectHandler",
        "compat.HTTPSHandler",
        "compat.JSONDecodeError",
        "compat.Mapping",
        "compat.Morsel",
        "compat.MutableMapping",
        "compat.Request",
        "compat.StringIO",
        "compat.URLError",
        "compat.WINDOWS",
        "compat.ZipFile",
        "compat.basestring",
        "compat.build_opener",
        "compat.builtin_str",
        "compat.bytes",
        "compat.cache_from_source",
        "compat.chardet",
        "compat.collections_abc",
        "compat.configparser",
        "compat.cookielib",
        "compat.detect_encoding",
        "compat.filter",
        "compat.fsdecode",
        "compat.getproxies",
        "compat.getproxies_environment",
        "compat.httplib",
        "compat.integer_types",
        "compat.json",
        "compat.match_hostname",
        "compat.parse_http_list",
        "compat.pathname2url",
        "compat.proxy_bypass",
        "compat.proxy_bypass_environment",
        "compat.queue",
        "compat.quote",
        "compat.raw_input",
        "compat.shutil",
        "compat.str",
        "compat.string_types",
        "compat.sysconfig",
        "compat.text_type",
        "compat.unescape",
        "compat.unquote",
        "compat.url2pathname",
        "compat.urlencode",
        "compat.urljoin",
        "compat.urlopen",
        "compat.urlparse",
        "compat.urlsplit",
        "compat.urlunparse",
        "compat.valid_ident",
        "compat.xmlrpclib",
        "compileall",
        "compiler.CodeGenerator",
        "compiler.Frame",
        "compiler.generate",
        "compiler.has_safe_repr",
        "concurrent.futures",
        "concurrent.futures.ThreadPoolExecutor",
        "config.Config",
        "config.ConfigAttribute",
        "config.settings",
        "config.settings.settings",
        "configparser",
        "configparser.ConfigParser",
        "connection.BaseSSLError",
        "connection.BrokenPipeError",
        "connection.DummyConnection",
        "connection.HTTPConnection",
        "connection.HTTPException",
        "connection.HTTPSConnection",
        "connection.VerifiedHTTPSConnection",
        "connection.is_connection_dropped",
        "connection.port_by_scheme",
        "connectionpool.HTTPConnectionPool",
        "connectionpool.HTTPSConnectionPool",
        "connectionpool.connection_from_url",
        "connectionpool.port_by_scheme",
        "connector.Shape",
        "console.Console",
        "console.ConsoleOptions",
        "console.ConsoleRenderable",
        "console.Group",
        "console.HighlighterType",
        "console.JustifyMethod",
        "console.OverflowMethod",
        "console.RenderHook",
        "console.RenderResult",
        "console.RenderableType",
        "console.group",
        "constants.LOREM_IPSUM_WORDS",
        "constrain.Constrain",
        "containers.Lines",
        "containers.Renderables",
        "contextlib",
        "contextlib.ContextDecorator",
        "contextlib.ExitStack",
        "contextlib.closing",
        "contextlib.contextmanager",
        "contextlib.nullcontext",
        "contextlib.suppress",
        "contextlib2.ExitStack",
        "contextvars",
        "contextvars.ContextVar",
        "contrib._appengine_environ",
        "control.Control",
        "control.escape_control_codes",
        "control.strip_control_codes",
        "converters.AnyConverter",
        "converters.BaseConverter",
        "converters.DEFAULT_CONVERTERS",
        "converters.FloatConverter",
        "converters.IntegerConverter",
        "converters.PathConverter",
        "converters.UUIDConverter",
        "converters.UnicodeConverter",
        "converters.ValidationError",
        "cookies.RequestsCookieJar",
        "cookies._copy_cookie_jar",
        "cookies.cookiejar_from_dict",
        "cookies.extract_cookies_to_jar",
        "cookies.get_cookie_header",
        "cookies.merge_cookies",
        "copy",
        "copy.copy",
        "copy.deepcopy",
        "copyreg",
        "crackfortran.markoutercomma",
        "crackfortran.rmbadname",
        "crackfortran.undo_rmbadname",
        "crackfortran.undo_rmbadname1",
        "cryptography",
        "cryptography.__version__",
        "cryptography.hazmat.backends.default_backend",
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.primitives.asymmetric.rsa",
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKeyWithSerialization",
        "cryptography.hazmat.primitives.hashes",
        "cryptography.hazmat.primitives.serialization",
        "cryptography.x509",
        "cryptography.x509.Certificate",
        "cryptography.x509.UnsupportedExtension",
        "cryptography.x509.extensions.Extensions",
        "cryptography.x509.oid.NameOID",
        "csp.ContentSecurityPolicy",
        "csv",
        "csv.QUOTE_NONE",
        "csv.QUOTE_NONNUMERIC",
        "ctags",
        "ctx.AppContext",
        "ctx.RequestContext",
        "ctx._AppCtxGlobals",
        "ctx.after_this_request",
        "ctx.copy_current_request_context",
        "ctx.has_app_context",
        "ctx.has_request_context",
        "ctypes",
        "ctypes.CDLL",
        "ctypes.CFUNCTYPE",
        "ctypes.LibraryLoader",
        "ctypes.POINTER",
        "ctypes.Structure",
        "ctypes.WINFUNCTYPE",
        "ctypes.WinDLL",
        "ctypes.WinError",
        "ctypes.byref",
        "ctypes.c_bool",
        "ctypes.c_byte",
        "ctypes.c_char",
        "ctypes.c_char_p",
        "ctypes.c_double",
        "ctypes.c_float",
        "ctypes.c_int",
        "ctypes.c_int16",
        "ctypes.c_int32",
        "ctypes.c_long",
        "ctypes.c_longlong",
        "ctypes.c_size_t",
        "ctypes.c_ssize_t",
        "ctypes.c_uint32",
        "ctypes.c_ulong",
        "ctypes.c_void_p",
        "ctypes.c_wchar",
        "ctypes.c_wchar_p",
        "ctypes.cast",
        "ctypes.create_unicode_buffer",
        "ctypes.get_errno",
        "ctypes.pointer",
        "ctypes.py_object",
        "ctypes.pythonapi",
        "ctypes.sizeof",
        "ctypes.util.find_library",
        "ctypes.windll",
        "ctypes.wintypes",
        "ctypes.wintypes.BOOL",
        "ctypes.wintypes.DWORD",
        "ctypes.wintypes.HANDLE",
        "ctypes.wintypes.HGLOBAL",
        "ctypes.wintypes.HINSTANCE",
        "ctypes.wintypes.HMENU",
        "ctypes.wintypes.HWND",
        "ctypes.wintypes.INT",
        "ctypes.wintypes.LONG",
        "ctypes.wintypes.LPCSTR",
        "ctypes.wintypes.LPCVOID",
        "ctypes.wintypes.LPCWSTR",
        "ctypes.wintypes.LPFILETIME",
        "ctypes.wintypes.LPSTR",
        "ctypes.wintypes.LPVOID",
        "ctypes.wintypes.LPWSTR",
        "ctypes.wintypes.UINT",
        "custom.CustomChartsheetViews",
        "cycler",
        "cython",
        "dask.array",
        "data_source.AxDataSource",
        "data_source.NumDataSource",
        "data_source.NumFmt",
        "data_source.NumRef",
        "data_source.StrRef",
        "database.Distribution",
        "database.DistributionPath",
        "database.InstalledDistribution",
        "database.make_dist",
        "dataclasses",
        "dataclasses.asdict",
        "dataclasses.dataclass",
        "dataclasses.field",
        "dataclasses.fields",
        "dataclasses.is_dataclass",
        "dataclasses.make_dataclass",
        "dataclasses.replace",
        "datastructures.Accept",
        "datastructures.Authorization",
        "datastructures.CallbackDict",
        "datastructures.CharsetAccept",
        "datastructures.CombinedMultiDict",
        "datastructures.ContentRange",
        "datastructures.ContentSecurityPolicy",
        "datastructures.ETags",
        "datastructures.EnvironHeaders",
        "datastructures.FileMultiDict",
        "datastructures.FileStorage",
        "datastructures.HeaderSet",
        "datastructures.Headers",
        "datastructures.IfRange",
        "datastructures.ImmutableDict",
        "datastructures.ImmutableList",
        "datastructures.ImmutableMultiDict",
        "datastructures.LanguageAccept",
        "datastructures.MIMEAccept",
        "datastructures.MultiDict",
        "datastructures.Range",
        "datastructures.RequestCacheControl",
        "datastructures.ResponseCacheControl",
        "datastructures.WWWAuthenticate",
        "datastructures.cache_control._CacheControl",
        "datastructures.iter_multi_items",
        "datavalidation.DataValidationList",
        "datetime",
        "datetime.date",
        "datetime.datetime",
        "datetime.time",
        "datetime.timedelta",
        "datetime.timezone",
        "datetime.tzinfo",
        "dateutil",
        "dateutil.easter",
        "dateutil.parser",
        "dateutil.parser._parser",
        "dateutil.parser.parse",
        "dateutil.relativedelta",
        "dateutil.relativedelta.FR",
        "dateutil.relativedelta.MO",
        "dateutil.relativedelta.SA",
        "dateutil.relativedelta.SU",
        "dateutil.relativedelta.TH",
        "dateutil.relativedelta.TU",
        "dateutil.relativedelta.WE",
        "dateutil.relativedelta.relativedelta",
        "dateutil.rrule",
        "dateutil.tz",
        "dateutil.tz.gettz",
        "dateutil.tz.tz.tzlocal",
        "dateutil.tz.tz.tzoffset",
        "dateutil.tz.tzfile",
        "dateutil.tz.tzlocal",
        "dateutil.tz.tzoffset",
        "dateutil.tz.tzutc",
        "dateutil.zoneinfo.METADATA_FN",
        "dateutil.zoneinfo.ZONEFILENAME",
        "dateutil.zoneinfo.get_zonefile_instance",
        "debug.DebuggedApplication",
        "debug.rewrite_traceback_stack",
        "debug.tbtools.DebugTraceback",
        "debughelpers.FormDataRoutingRedirect",
        "debughelpers.attach_enctype_error_multidict",
        "debughelpers.explain_template_loading_attempts",
        "decimal",
        "decimal.Decimal",
        "decimal.InvalidOperation",
        "decorator.cross_origin",
        "decorators.HelpOption",
        "decorators.argument",
        "decorators.command",
        "decorators.confirmation_option",
        "decorators.group",
        "decorators.help_option",
        "decorators.make_pass_decorator",
        "decorators.option",
        "decorators.pass_context",
        "decorators.pass_obj",
        "decorators.password_option",
        "decorators.version_option",
        "default_styles.DEFAULT_STYLES",
        "defaults.BLOCK_END_STRING",
        "defaults.BLOCK_START_STRING",
        "defaults.COMMENT_END_STRING",
        "defaults.COMMENT_START_STRING",
        "defaults.DEFAULT_FILTERS",
        "defaults.DEFAULT_NAMESPACE",
        "defaults.DEFAULT_POLICIES",
        "defaults.DEFAULT_TESTS",
        "defaults.KEEP_TRAILING_NEWLINE",
        "defaults.LINE_COMMENT_PREFIX",
        "defaults.LINE_STATEMENT_PREFIX",
        "defaults.LSTRIP_BLOCKS",
        "defaults.NEWLINE_SEQUENCE",
        "defaults.TRIM_BLOCKS",
        "defaults.VARIABLE_END_STRING",
        "defaults.VARIABLE_START_STRING",
        "defined_name.DefinedName",
        "defined_name.DefinedNameDict",
        "defmatrix.*",
        "defusedxml",
        "defusedxml.ElementTree.fromstring",
        "defusedxml.ElementTree.iterparse",
        "descriptors.NestedGapAmount",
        "descriptors.NestedOverlap",
        "descriptors.NumberFormatDescriptor",
        "differential.DifferentialStyle",
        "difflib",
        "difflib.SequenceMatcher",
        "difflib.get_close_matches",
        "dimensions.ColumnDimension",
        "dimensions.DimensionHolder",
        "dimensions.RowDimension",
        "dimensions.SheetDimension",
        "dimensions.SheetFormatProperties",
        "distro.LinuxDistribution",
        "distro.NORMALIZED_DISTRO_ID",
        "distro.NORMALIZED_LSB_ID",
        "distro.NORMALIZED_OS_ID",
        "distro.__version__",
        "distro.build_number",
        "distro.codename",
        "distro.distro_release_attr",
        "distro.distro_release_info",
        "distro.id",
        "distro.info",
        "distro.like",
        "distro.linux_distribution",
        "distro.lsb_release_attr",
        "distro.lsb_release_info",
        "distro.main",
        "distro.major_version",
        "distro.minor_version",
        "distro.name",
        "distro.os_release_attr",
        "distro.os_release_info",
        "distro.uname_attr",
        "distro.uname_info",
        "distro.version",
        "distro.version_parts",
        "distutils.cmd.Command",
        "distutils.command.install.INSTALL_SCHEMES",
        "distutils.command.install.SCHEME_KEYS",
        "distutils.command.install.install",
        "distutils.core.setup",
        "distutils.dist.Distribution",
        "distutils.sysconfig",
        "distutils.sysconfig.get_python_lib",
        "doctest",
        "docutils.nodes",
        "docutils.parsers.rst.Directive",
        "docutils.statemachine.ViewList",
        "docx2pdf.convert",
        "dotenv",
        "dotenv.load_dotenv",
        "drawing.Drawing",
        "drawings.find_images",
        "dummy_thread.get_ident",
        "dummy_threading",
        "dummy_threading.Thread",
        "effect.AlphaBiLevelEffect",
        "effect.AlphaCeilingEffect",
        "effect.AlphaFloorEffect",
        "effect.AlphaInverseEffect",
        "effect.AlphaModulateEffect",
        "effect.AlphaModulateFixedEffect",
        "effect.AlphaReplaceEffect",
        "effect.BiLevelEffect",
        "effect.BlurEffect",
        "effect.ColorChangeEffect",
        "effect.ColorReplaceEffect",
        "effect.DuotoneEffect",
        "effect.EffectContainer",
        "effect.EffectList",
        "effect.FillOverlayEffect",
        "effect.GrayscaleEffect",
        "effect.HSLEffect",
        "effect.LuminanceEffect",
        "effect.TintEffect",
        "einsumfunc.*",
        "email",
        "email.errors.MultipartInvariantViolationDefect",
        "email.errors.StartBoundaryNotFoundDefect",
        "email.feedparser",
        "email.header",
        "email.header.Header",
        "email.header.decode_header",
        "email.header.make_header",
        "email.message",
        "email.message.Message",
        "email.message_from_file",
        "email.parser",
        "email.parser.Parser",
        "email.policy",
        "email.utils",
        "email.utils.formatdate",
        "email.utils.parsedate",
        "email.utils.parsedate_tz",
        "emoji.EmojiVariant",
        "encoding._base64_alphabet",
        "encoding.base64_decode",
        "encoding.base64_encode",
        "encoding.bytes_to_int",
        "encoding.int_to_bytes",
        "encoding.want_bytes",
        "encodings.idna",
        "enum",
        "enum.Enum",
        "enum.IntEnum",
        "enum.auto",
        "environment.Environment",
        "environment.Template",
        "environment.get_spontaneous_environment",
        "errno",
        "error_bar.*",
        "error_bar.ErrorBars",
        "errors.MarkupError",
        "et_xmlfile.xmlfile",
        "etag.ETags",
        "exc.BadData",
        "exc.BadHeader",
        "exc.BadPayload",
        "exc.BadSignature",
        "exc.BadTimeSignature",
        "exc.SignatureExpired",
        "exceptions.*",
        "exceptions.Abort",
        "exceptions.AxisError",
        "exceptions.BadArgumentUsage",
        "exceptions.BadGateway",
        "exceptions.BadHost",
        "exceptions.BadOptionUsage",
        "exceptions.BadParameter",
        "exceptions.BadRequest",
        "exceptions.BadRequestKeyError",
        "exceptions.BodyNotHttplibCompatible",
        "exceptions.BufferFull",
        "exceptions.BuildError",
        "exceptions.CellCoordinatesException",
        "exceptions.ChunkedEncodingError",
        "exceptions.ClickException",
        "exceptions.ClientDisconnected",
        "exceptions.ClosedPoolError",
        "exceptions.ConnectTimeout",
        "exceptions.ConnectTimeoutError",
        "exceptions.ConnectionError",
        "exceptions.ContentDecodingError",
        "exceptions.DTypePromotionError",
        "exceptions.DecodeError",
        "exceptions.DependencyWarning",
        "exceptions.EmptyPoolError",
        "exceptions.Exit",
        "exceptions.ExtraData",
        "exceptions.FileError",
        "exceptions.FileModeWarning",
        "exceptions.FilterArgumentError",
        "exceptions.FormatError",
        "exceptions.HTTPError",
        "exceptions.HTTPException",
        "exceptions.HTTPWarning",
        "exceptions.HeaderParsingError",
        "exceptions.HostChangedError",
        "exceptions.IncompleteRead",
        "exceptions.InsecurePlatformWarning",
        "exceptions.InsecureRequestWarning",
        "exceptions.InternalServerError",
        "exceptions.InvalidChunkLength",
        "exceptions.InvalidHeader",
        "exceptions.InvalidJSONError",
        "exceptions.InvalidProxyURL",
        "exceptions.InvalidSchema",
        "exceptions.InvalidURL",
        "exceptions.JSONDecodeError",
        "exceptions.LocationParseError",
        "exceptions.LocationValueError",
        "exceptions.MaxRetryError",
        "exceptions.MethodNotAllowed",
        "exceptions.MissingParameter",
        "exceptions.MissingSchema",
        "exceptions.NewConnectionError",
        "exceptions.NoMatch",
        "exceptions.NoSuchOption",
        "exceptions.NotFound",
        "exceptions.OutOfData",
        "exceptions.ProtocolError",
        "exceptions.ProxyError",
        "exceptions.ProxySchemeUnknown",
        "exceptions.ProxySchemeUnsupported",
        "exceptions.ReadTimeout",
        "exceptions.ReadTimeoutError",
        "exceptions.RequestAliasRedirect",
        "exceptions.RequestEntityTooLarge",
        "exceptions.RequestException",
        "exceptions.RequestPath",
        "exceptions.RequestRedirect",
        "exceptions.RequestedRangeNotSatisfiable",
        "exceptions.RequestsDependencyWarning",
        "exceptions.ResponseError",
        "exceptions.ResponseNotChunked",
        "exceptions.RetryError",
        "exceptions.RoutingException",
        "exceptions.SNIMissingWarning",
        "exceptions.SSLError",
        "exceptions.SecurityError",
        "exceptions.StackError",
        "exceptions.StreamConsumedError",
        "exceptions.SubjectAltNameWarning",
        "exceptions.SystemTimeWarning",
        "exceptions.TemplateAssertionError",
        "exceptions.TemplateError",
        "exceptions.TemplateNotFound",
        "exceptions.TemplateRuntimeError",
        "exceptions.TemplateSyntaxError",
        "exceptions.TemplatesNotFound",
        "exceptions.Timeout",
        "exceptions.TimeoutError",
        "exceptions.TimeoutStateError",
        "exceptions.TooManyRedirects",
        "exceptions.URLRequired",
        "exceptions.URLSchemeUnknown",
        "exceptions.UndefinedError",
        "exceptions.UnrewindableBodyError",
        "exceptions.UnsupportedMediaType",
        "exceptions.UsageError",
        "exceptions.WebsocketMismatch",
        "ext.ExtType",
        "ext.Extension",
        "ext.Timestamp",
        "extension.CORS",
        "external.ExternalLink",
        "extras.*",
        "factory.Factory",
        "fallback.Packer",
        "fallback.Unpacker",
        "fallback.unpackb",
        "fastparquet",
        "fields.Boolean",
        "fields.DateTimeField",
        "fields.Error",
        "fields.Index",
        "fields.Missing",
        "fields.Number",
        "fields.RequestField",
        "fields.Text",
        "fields.TupleList",
        "file_proxy.FileProxy",
        "file_storage.FileMultiDict",
        "file_storage.FileStorage",
        "fileinput",
        "filelock.BaseFileLock",
        "filelock.FileLock",
        "filepost.encode_multipart_formdata",
        "fill.Blip",
        "fill.BlipFillProperties",
        "fill.GradientFillProperties",
        "fill.PatternFillProperties",
        "fills.Fill",
        "fills.GradientFill",
        "fills.PatternFill",
        "filters.AutoFilter",
        "filters.FILTERS",
        "filters.SortState",
        "flask.Blueprint",
        "flask.Flask",
        "flask.abort",
        "flask.current_app",
        "flask.jsonify",
        "flask.make_response",
        "flask.render_template",
        "flask.request",
        "flask.send_file",
        "flask.send_from_directory",
        "flask_cors.CORS",
        "fnmatch",
        "fnmatch.fnmatch",
        "fonts.DEFAULT_FONT",
        "fonts.Font",
        "formatting.HelpFormatter",
        "formatting.join_options",
        "formatting.wrap_text",
        "formparser.FormDataParser",
        "formparser.default_stream_factory",
        "formula.ArrayFormula",
        "formula.DataTableFormula",
        "formulas.FORMULAE",
        "found_candidates.FoundCandidates",
        "found_candidates.IndexCandidateInfo",
        "fractions",
        "fractions.Fraction",
        "fractions.gcd",
        "fromnumeric.*",
        "fromnumeric.any",
        "fsspec",
        "fsspec.AbstractFileSystem",
        "fsspec.implementations.memory.MemoryFileSystem",
        "fsspec.register_implementation",
        "fsspec.registry._registry",
        "fsspec.registry.known_implementations",
        "function_base.*",
        "functools",
        "functools.WRAPPER_ASSIGNMENTS",
        "functools.cached_property",
        "functools.lru_cache",
        "functools.partial",
        "functools.reduce",
        "functools.update_wrapper",
        "functools.wraps",
        "fuzzywuzzy.fuzz",
        "fuzzywuzzy.string_processing.StringProcessor",
        "gc",
        "geometry.Color",
        "geometry.GroupTransform2D",
        "geometry.LineProperties",
        "geometry.Point2D",
        "geometry.PositiveSize2D",
        "geometry.PresetGeometry2D",
        "geometry.Scene3D",
        "geometry.ShapeStyle",
        "geometry.Transform2D",
        "getlimits.*",
        "getpass",
        "getpass.getpass",
        "gettext",
        "gettext.gettext",
        "gettext.ngettext",
        "glob",
        "glob.glob",
        "glob.iglob",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.g",
        "globals.get_current_context",
        "globals.pop_context",
        "globals.push_context",
        "globals.request",
        "globals.request_ctx",
        "globals.resolve_color_default",
        "globals.session",
        "google.appengine.api.urlfetch",
        "google.auth.credentials.Credentials",
        "graphic.GraphicFrame",
        "graphic.GroupShape",
        "gzip",
        "hashlib",
        "hashlib._Hash",
        "hashlib.sha1",
        "hashlib.sha256",
        "header_footer.HeaderFooter",
        "headers.EnvironHeaders",
        "headers.Headers",
        "heapq",
        "helpers._split_blueprint_path",
        "helpers.abort",
        "helpers.flash",
        "helpers.get_debug_flag",
        "helpers.get_flashed_messages",
        "helpers.get_load_dotenv",
        "helpers.get_root_path",
        "helpers.get_template_attribute",
        "helpers.make_response",
        "helpers.redirect",
        "helpers.send_file",
        "helpers.send_from_directory",
        "helpers.stream_with_context",
        "helpers.url_for",
        "hermite.Hermite",
        "hermite_e.HermiteE",
        "highlighter.Highlighter",
        "highlighter.JSONHighlighter",
        "highlighter.NullHighlighter",
        "highlighter.RegexHighlighter",
        "highlighter.ReprHighlighter",
        "hmac",
        "hooks.default_hooks",
        "hooks.dispatch_hook",
        "html.entities",
        "html.escape",
        "html.parser.HTMLParser",
        "html.unescape",
        "htmlentitydefs",
        "http.COEP",
        "http.COOP",
        "http.HTTPStatus",
        "http.HTTP_STATUS_CODES",
        "http.client",
        "http.client.HTTPResponse",
        "http.cookiejar",
        "http.cookies.Morsel",
        "http.dump_age",
        "http.dump_cookie",
        "http.dump_csp_header",
        "http.dump_header",
        "http.dump_options_header",
        "http.generate_etag",
        "http.http_date",
        "http.is_entity_header",
        "http.is_hop_by_hop_header",
        "http.is_resource_modified",
        "http.parse_accept_header",
        "http.parse_age",
        "http.parse_cache_control_header",
        "http.parse_content_range_header",
        "http.parse_cookie",
        "http.parse_csp_header",
        "http.parse_date",
        "http.parse_dict_header",
        "http.parse_etags",
        "http.parse_if_range_header",
        "http.parse_list_header",
        "http.parse_options_header",
        "http.parse_range_header",
        "http.parse_set_header",
        "http.quote_etag",
        "http.quote_header_value",
        "http.remove_entity_headers",
        "http.server.BaseHTTPRequestHandler",
        "http.server.HTTPServer",
        "http.unquote_etag",
        "httplib",
        "hyperlink.HyperlinkList",
        "hypothesis",
        "hypothesis.assume",
        "hypothesis.example",
        "hypothesis.extra.dateutil.timezones",
        "hypothesis.extra.numpy",
        "hypothesis.extra.numpy.arrays",
        "hypothesis.extra.pytz.timezones",
        "hypothesis.given",
        "hypothesis.settings",
        "hypothesis.strategies",
        "hypothesis.strategies.sampled_from",
        "idtracking.Symbols",
        "idtracking.VAR_LOAD_ALIAS",
        "idtracking.VAR_LOAD_PARAMETER",
        "idtracking.VAR_LOAD_RESOLVE",
        "idtracking.VAR_LOAD_UNDEFINED",
        "imp",
        "importlib",
        "importlib.abc",
        "importlib.import_module",
        "importlib.machinery",
        "importlib.machinery.EXTENSION_SUFFIXES",
        "importlib.machinery.ModuleSpec",
        "importlib.machinery.PathFinder",
        "importlib.machinery.SourceFileLoader",
        "importlib.machinery.all_suffixes",
        "importlib.metadata",
        "importlib.metadata.DistributionFinder",
        "importlib.metadata.MetadataPathFinder",
        "importlib.metadata.entry_points",
        "importlib.reload",
        "importlib.resources",
        "importlib.resources.as_file",
        "importlib.resources.files",
        "importlib.resources.path",
        "importlib.resources.read_text",
        "importlib.util",
        "importlib.util.LazyLoader",
        "importlib.util.cache_from_source",
        "importlib.util.find_spec",
        "importlib.util.module_from_spec",
        "importlib.util.spec_from_file_location",
        "importlib.util.spec_from_loader",
        "importlib_metadata",
        "initialise._wipe_internal_state_for_tests",
        "initialise.colorama_text",
        "initialise.deinit",
        "initialise.init",
        "initialise.just_fix_windows_console",
        "initialise.reinit",
        "inspect",
        "inspect.cleandoc",
        "inspect.getattr_static",
        "inspect.getdoc",
        "inspect.getfile",
        "inspect.isclass",
        "inspect.iscoroutinefunction",
        "inspect.isfunction",
        "inspect.isgenerator",
        "inspect.ismodule",
        "inspect.signature",
        "intranges.intranges_contain",
        "io",
        "io.BufferedIOBase",
        "io.BytesIO",
        "io.RawIOBase",
        "io.StringIO",
        "io.TextIOBase",
        "io.TextIOWrapper",
        "io.UnsupportedOperation",
        "ipaddress",
        "ipython.load_ipython_extension",
        "ipywidgets.Output",
        "isoparser.isoparse",
        "isoparser.isoparser",
        "itertools",
        "itertools.accumulate",
        "itertools.chain",
        "itertools.combinations",
        "itertools.cycle",
        "itertools.filterfalse",
        "itertools.groupby",
        "itertools.ifilter",
        "itertools.ifilterfalse",
        "itertools.islice",
        "itertools.permutations",
        "itertools.product",
        "itertools.repeat",
        "itertools.starmap",
        "itertools.takewhile",
        "itertools.tee",
        "itertools.zip_longest",
        "itsdangerous.BadSignature",
        "itsdangerous.URLSafeTimedSerializer",
        "java",
        "jinja2.BaseLoader",
        "jinja2.Environment",
        "jinja2.FileSystemLoader",
        "jinja2.Template",
        "jinja2.TemplateNotFound",
        "jinja2.loaders.BaseLoader",
        "jnius.autoclass",
        "json",
        "json.JSONDecodeError",
        "json.dumps",
        "json.jsonify",
        "json.loads",
        "json.provider.DefaultJSONProvider",
        "json.provider.JSONProvider",
        "json.tag.TaggedJSONSerializer",
        "jupyter.JupyterMixin",
        "jupyter.JupyterRenderable",
        "jupyter.display",
        "keyring",
        "keyword",
        "keyword.iskeyword",
        "keyword.kwlist",
        "label.DataLabel",
        "label.DataLabelList",
        "laguerre.Laguerre",
        "layout.Layout",
        "legend.Legend",
        "legendre.Legendre",
        "lexer.Lexer",
        "lexer.Token",
        "lexer.TokenStream",
        "lexer._lexer_cache",
        "lexer.describe_token",
        "lexer.describe_token_expr",
        "lexer.get_lexer",
        "lib._arraypad_impl.pad",
        "lib._arraysetops_impl.ediff1d",
        "lib._arraysetops_impl.in1d",
        "lib._arraysetops_impl.intersect1d",
        "lib._arraysetops_impl.isin",
        "lib._arraysetops_impl.setdiff1d",
        "lib._arraysetops_impl.setxor1d",
        "lib._arraysetops_impl.union1d",
        "lib._arraysetops_impl.unique",
        "lib._arraysetops_impl.unique_all",
        "lib._arraysetops_impl.unique_counts",
        "lib._arraysetops_impl.unique_inverse",
        "lib._arraysetops_impl.unique_values",
        "lib._function_base_impl.angle",
        "lib._function_base_impl.append",
        "lib._function_base_impl.asarray_chkfinite",
        "lib._function_base_impl.average",
        "lib._function_base_impl.bartlett",
        "lib._function_base_impl.bincount",
        "lib._function_base_impl.blackman",
        "lib._function_base_impl.copy",
        "lib._function_base_impl.corrcoef",
        "lib._function_base_impl.cov",
        "lib._function_base_impl.delete",
        "lib._function_base_impl.diff",
        "lib._function_base_impl.digitize",
        "lib._function_base_impl.extract",
        "lib._function_base_impl.flip",
        "lib._function_base_impl.gradient",
        "lib._function_base_impl.hamming",
        "lib._function_base_impl.hanning",
        "lib._function_base_impl.i0",
        "lib._function_base_impl.insert",
        "lib._function_base_impl.interp",
        "lib._function_base_impl.iterable",
        "lib._function_base_impl.kaiser",
        "lib._function_base_impl.median",
        "lib._function_base_impl.meshgrid",
        "lib._function_base_impl.percentile",
        "lib._function_base_impl.piecewise",
        "lib._function_base_impl.place",
        "lib._function_base_impl.quantile",
        "lib._function_base_impl.rot90",
        "lib._function_base_impl.select",
        "lib._function_base_impl.sinc",
        "lib._function_base_impl.sort_complex",
        "lib._function_base_impl.trapezoid",
        "lib._function_base_impl.trapz",
        "lib._function_base_impl.trim_zeros",
        "lib._function_base_impl.unwrap",
        "lib._function_base_impl.vectorize",
        "lib._histograms_impl.histogram",
        "lib._histograms_impl.histogram_bin_edges",
        "lib._histograms_impl.histogramdd",
        "lib._index_tricks_impl.c_",
        "lib._index_tricks_impl.diag_indices",
        "lib._index_tricks_impl.diag_indices_from",
        "lib._index_tricks_impl.fill_diagonal",
        "lib._index_tricks_impl.index_exp",
        "lib._index_tricks_impl.ix_",
        "lib._index_tricks_impl.mgrid",
        "lib._index_tricks_impl.ndenumerate",
        "lib._index_tricks_impl.ndindex",
        "lib._index_tricks_impl.ogrid",
        "lib._index_tricks_impl.r_",
        "lib._index_tricks_impl.ravel_multi_index",
        "lib._index_tricks_impl.s_",
        "lib._index_tricks_impl.unravel_index",
        "lib._nanfunctions_impl.nanargmax",
        "lib._nanfunctions_impl.nanargmin",
        "lib._nanfunctions_impl.nancumprod",
        "lib._nanfunctions_impl.nancumsum",
        "lib._nanfunctions_impl.nanmax",
        "lib._nanfunctions_impl.nanmean",
        "lib._nanfunctions_impl.nanmedian",
        "lib._nanfunctions_impl.nanmin",
        "lib._nanfunctions_impl.nanpercentile",
        "lib._nanfunctions_impl.nanprod",
        "lib._nanfunctions_impl.nanquantile",
        "lib._nanfunctions_impl.nanstd",
        "lib._nanfunctions_impl.nansum",
        "lib._nanfunctions_impl.nanvar",
        "lib._npyio_impl.fromregex",
        "lib._npyio_impl.genfromtxt",
        "lib._npyio_impl.load",
        "lib._npyio_impl.loadtxt",
        "lib._npyio_impl.packbits",
        "lib._npyio_impl.save",
        "lib._npyio_impl.savetxt",
        "lib._npyio_impl.savez",
        "lib._npyio_impl.savez_compressed",
        "lib._npyio_impl.unpackbits",
        "lib._polynomial_impl.poly",
        "lib._polynomial_impl.poly1d",
        "lib._polynomial_impl.polyadd",
        "lib._polynomial_impl.polyder",
        "lib._polynomial_impl.polydiv",
        "lib._polynomial_impl.polyfit",
        "lib._polynomial_impl.polyint",
        "lib._polynomial_impl.polymul",
        "lib._polynomial_impl.polysub",
        "lib._polynomial_impl.polyval",
        "lib._polynomial_impl.roots",
        "lib._shape_base_impl.apply_along_axis",
        "lib._shape_base_impl.apply_over_axes",
        "lib._shape_base_impl.array_split",
        "lib._shape_base_impl.column_stack",
        "lib._shape_base_impl.dsplit",
        "lib._shape_base_impl.dstack",
        "lib._shape_base_impl.expand_dims",
        "lib._shape_base_impl.hsplit",
        "lib._shape_base_impl.kron",
        "lib._shape_base_impl.put_along_axis",
        "lib._shape_base_impl.row_stack",
        "lib._shape_base_impl.split",
        "lib._shape_base_impl.take_along_axis",
        "lib._shape_base_impl.tile",
        "lib._shape_base_impl.vsplit",
        "lib._stride_tricks_impl.broadcast_arrays",
        "lib._stride_tricks_impl.broadcast_shapes",
        "lib._stride_tricks_impl.broadcast_to",
        "lib._twodim_base_impl.diag",
        "lib._twodim_base_impl.diagflat",
        "lib._twodim_base_impl.eye",
        "lib._twodim_base_impl.fliplr",
        "lib._twodim_base_impl.flipud",
        "lib._twodim_base_impl.histogram2d",
        "lib._twodim_base_impl.mask_indices",
        "lib._twodim_base_impl.tri",
        "lib._twodim_base_impl.tril",
        "lib._twodim_base_impl.tril_indices",
        "lib._twodim_base_impl.tril_indices_from",
        "lib._twodim_base_impl.triu",
        "lib._twodim_base_impl.triu_indices",
        "lib._twodim_base_impl.triu_indices_from",
        "lib._twodim_base_impl.vander",
        "lib._type_check_impl.common_type",
        "lib._type_check_impl.imag",
        "lib._type_check_impl.iscomplex",
        "lib._type_check_impl.iscomplexobj",
        "lib._type_check_impl.isreal",
        "lib._type_check_impl.isrealobj",
        "lib._type_check_impl.mintypecode",
        "lib._type_check_impl.nan_to_num",
        "lib._type_check_impl.real",
        "lib._type_check_impl.real_if_close",
        "lib._type_check_impl.typename",
        "lib._ufunclike_impl.fix",
        "lib._ufunclike_impl.isneginf",
        "lib._ufunclike_impl.isposinf",
        "lib._utils_impl.get_include",
        "lib._utils_impl.info",
        "lib._utils_impl.show_runtime",
        "lib.scimath",
        "licenses.NormalizedLicenseExpression",
        "limited_api1",
        "limited_api2",
        "limited_api_latest",
        "line.LineProperties",
        "line_chart.LineChart",
        "line_chart.LineChart3D",
        "linecache",
        "linecache.cache",
        "live.Live",
        "live_render.LiveRender",
        "live_render.VerticalOverflowMethod",
        "loaders.BaseLoader",
        "loaders.ChoiceLoader",
        "loaders.DictLoader",
        "loaders.FileSystemLoader",
        "loaders.FunctionLoader",
        "loaders.ModuleLoader",
        "loaders.PackageLoader",
        "loaders.PrefixLoader",
        "locale",
        "logging",
        "logging.Filter",
        "logging.Handler",
        "logging.LogRecord",
        "logging.NullHandler",
        "logging.config",
        "logging.config.BaseConfigurator",
        "logging.config.valid_ident",
        "logging.create_logger",
        "logging.getLogger",
        "logging.handlers",
        "lxml.etree",
        "lxml.etree.Element",
        "lxml.etree.LXML_VERSION",
        "lxml.etree.QName",
        "lxml.etree.SubElement",
        "lxml.etree.XMLParser",
        "lxml.etree.XMLSyntaxError",
        "lxml.etree.XSLT",
        "lxml.etree.fromstring",
        "lxml.etree.iterparse",
        "lxml.etree.parse",
        "lxml.etree.register_namespace",
        "lxml.etree.tostring",
        "lxml.etree.xmlfile",
        "lxml.html.HTMLParser",
        "lxml.html.fromstring",
        "lxml.html.parse",
        "lzma",
        "lzma.LZMAError",
        "main.dotenv_values",
        "main.find_dotenv",
        "main.get_key",
        "main.load_dotenv",
        "main.set_key",
        "main.unset_key",
        "map.Map",
        "map.MapAdapter",
        "marker.DataPoint",
        "marker.Marker",
        "marker.PictureOptions",
        "markers.Marker",
        "markers._normalize_extra_values",
        "markers.interpret",
        "markup.escape",
        "markup.render",
        "markupsafe",
        "markupsafe.EscapeFormatter",
        "markupsafe.Markup",
        "markupsafe.escape",
        "markupsafe.soft_str",
        "marshal",
        "marshal.dumps",
        "marshal.loads",
        "matcher.StateMachineMatcher",
        "math",
        "math.ceil",
        "math.copysign",
        "math.gcd",
        "math.inf",
        "math.isinf",
        "math.isnan",
        "math.nan",
        "math.prod",
        "math.radians",
        "math.sqrt",
        "matplotlib",
        "matplotlib.artist.Artist",
        "matplotlib.artist.setp",
        "matplotlib.axes.Axes",
        "matplotlib.axes.Subplot",
        "matplotlib.axis.Axis",
        "matplotlib.cm",
        "matplotlib.collections.Collection",
        "matplotlib.collections.LineCollection",
        "matplotlib.collections.PolyCollection",
        "matplotlib.colors",
        "matplotlib.colors.BASE_COLORS",
        "matplotlib.colors.Colormap",
        "matplotlib.dates",
        "matplotlib.figure.Figure",
        "matplotlib.gridspec",
        "matplotlib.lines",
        "matplotlib.lines.Line2D",
        "matplotlib.patches",
        "matplotlib.patches.Rectangle",
        "matplotlib.pylab",
        "matplotlib.pyplot",
        "matplotlib.pyplot.cycler",
        "matplotlib.pyplot.gcf",
        "matplotlib.pyplot.subplot",
        "matplotlib.table",
        "matplotlib.table.Table",
        "matplotlib.text.Text",
        "matplotlib.ticker",
        "matplotlib.ticker.AutoLocator",
        "matplotlib.ticker.FixedLocator",
        "matplotlib.ticker.Formatter",
        "matplotlib.ticker.Locator",
        "matplotlib.ticker.NullFormatter",
        "matplotlib.transforms.nonsingular",
        "matplotlib.units",
        "matrixlib.asmatrix",
        "matrixlib.bmat",
        "matrixlib.matrix",
        "measure.Measurement",
        "measure.measure_renderables",
        "mem_policy",
        "memmap.*",
        "merge.MergeCell",
        "merge.MergeCells",
        "merge.MergedCellRange",
        "metadata.LEGACY_METADATA_FILENAME",
        "metadata.METADATA_FILENAME",
        "metadata.Metadata",
        "metadata.MetadataInvalidError",
        "metadata.WHEEL_METADATA_FILENAME",
        "middleware.shared_data.SharedDataMiddleware",
        "mimetypes",
        "mimetypes.MimeTypes",
        "mixins.ImmutableDictMixin",
        "mixins.ImmutableHeadersMixin",
        "mixins.ImmutableListMixin",
        "mixins.ImmutableMultiDictMixin",
        "mixins.UpdateDictMixin",
        "mmap",
        "mmap.mmap",
        "mock.MagicMock",
        "mock.Mock",
        "mock.patch",
        "models.DEFAULT_REDIRECT_LIMIT",
        "models.PreparedRequest",
        "models.REDIRECT_STATI",
        "models.Request",
        "models.Response",
        "mpl_toolkits.axes_grid1.inset_locator.inset_axes",
        "mpl_toolkits.axes_grid1.make_axes_locatable",
        "msvcrt",
        "msvcrt.get_osfhandle",
        "mtrand.*",
        "mtrand.RandomState",
        "multiarray.ALLOW_THREADS",
        "multiarray.BUFSIZE",
        "multiarray.CLIP",
        "multiarray.MAXDIMS",
        "multiarray.MAY_SHARE_BOUNDS",
        "multiarray.MAY_SHARE_EXACT",
        "multiarray.RAISE",
        "multiarray.StringDType",
        "multiarray.WRAP",
        "multiarray.arange",
        "multiarray.array",
        "multiarray.asanyarray",
        "multiarray.asarray",
        "multiarray.ascontiguousarray",
        "multiarray.asfortranarray",
        "multiarray.broadcast",
        "multiarray.busday_count",
        "multiarray.busday_offset",
        "multiarray.busdaycalendar",
        "multiarray.can_cast",
        "multiarray.concatenate",
        "multiarray.copyto",
        "multiarray.datetime_as_string",
        "multiarray.datetime_data",
        "multiarray.dot",
        "multiarray.dragon4_positional",
        "multiarray.dragon4_scientific",
        "multiarray.dtype",
        "multiarray.empty",
        "multiarray.empty_like",
        "multiarray.flatiter",
        "multiarray.from_dlpack",
        "multiarray.frombuffer",
        "multiarray.fromfile",
        "multiarray.fromiter",
        "multiarray.fromstring",
        "multiarray.inner",
        "multiarray.is_busday",
        "multiarray.lexsort",
        "multiarray.matmul",
        "multiarray.may_share_memory",
        "multiarray.min_scalar_type",
        "multiarray.ndarray",
        "multiarray.nditer",
        "multiarray.nested_iters",
        "multiarray.normalize_axis_index",
        "multiarray.promote_types",
        "multiarray.putmask",
        "multiarray.result_type",
        "multiarray.shares_memory",
        "multiarray.vdot",
        "multiarray.vecdot",
        "multiarray.where",
        "multiarray.zeros",
        "multiprocessing.Value",
        "multiprocessing.get_context",
        "multiprocessing.pool.ThreadPool",
        "mypy.api",
        "mypy.build.PRI_MED",
        "mypy.nodes.ImportFrom",
        "mypy.nodes.MypyFile",
        "mypy.nodes.Statement",
        "mypy.plugin.AnalyzeTypeContext",
        "mypy.plugin.Plugin",
        "mypy.types",
        "mypy.types.Type",
        "named_styles.NamedStyle",
        "named_styles.NamedStyleList",
        "named_styles._NamedCellStyleList",
        "namespace.namespaced",
        "netrc.NetrcParseError",
        "netrc.netrc",
        "nodes.EvalContext",
        "nodes.Node",
        "ntlm.ntlm",
        "ntpath",
        "numba",
        "numba.core.cgutils",
        "numba.core.datamodel.models",
        "numba.core.extending.NativeValue",
        "numba.core.extending.box",
        "numba.core.extending.lower_builtin",
        "numba.core.extending.make_attribute_wrapper",
        "numba.core.extending.overload",
        "numba.core.extending.overload_attribute",
        "numba.core.extending.overload_method",
        "numba.core.extending.register_model",
        "numba.core.extending.type_callable",
        "numba.core.extending.typeof_impl",
        "numba.core.extending.unbox",
        "numba.core.imputils.impl_ret_borrowed",
        "numba.extending.register_jitable",
        "numba.typed.Dict",
        "numba.types",
        "numbers",
        "numbers.BUILTIN_FORMATS",
        "numbers.BUILTIN_FORMATS_MAX_SIZE",
        "numbers.BUILTIN_FORMATS_REVERSE",
        "numbers.NUMERIC_TYPES",
        "numbers.Number",
        "numbers.NumberFormat",
        "numbers.NumberFormatDescriptor",
        "numbers.NumberFormatList",
        "numbers.builtin_format_code",
        "numbers.is_builtin",
        "numbers.is_date_format",
        "numbers.is_timedelta_format",
        "numeric.*",
        "numeric.absolute",
        "numeric.array",
        "numeric.asanyarray",
        "numeric.asarray",
        "numeric.concatenate",
        "numeric.dtype",
        "numeric.errstate",
        "numeric.inf",
        "numeric.nan",
        "numeric.ndarray",
        "numeric.ndim",
        "numeric.result_type",
        "numeric.uint8",
        "numerictypes.*",
        "numerictypes.bytes_",
        "numerictypes.character",
        "numerictypes.complex128",
        "numerictypes.flexible",
        "numerictypes.float64",
        "numerictypes.int_",
        "numerictypes.intc",
        "numerictypes.longlong",
        "numerictypes.sctypeDict",
        "numerictypes.sctypes",
        "numerictypes.str_",
        "numexpr",
        "numpy",
        "numpy.*",
        "numpy._NoValue",
        "numpy.__config__.show_config",
        "numpy._core",
        "numpy._core._dtype",
        "numpy._core._dtype_ctypes",
        "numpy._core._exceptions",
        "numpy._core._internal",
        "numpy._core._internal._dtype_from_pep3118",
        "numpy._core._machar.MachAr",
        "numpy._core._multiarray_tests",
        "numpy._core._multiarray_tests.IsPythonScalar",
        "numpy._core._multiarray_tests.argparse_example_function",
        "numpy._core._multiarray_tests.array_indexing",
        "numpy._core._multiarray_tests.create_custom_field_dtype",
        "numpy._core._multiarray_tests.fromstring_null_term_c_api",
        "numpy._core._multiarray_tests.get_all_cast_information",
        "numpy._core._multiarray_tests.get_buffer_info",
        "numpy._core._multiarray_tests.get_c_wrapping_array",
        "numpy._core._multiarray_tests.get_fpu_mode",
        "numpy._core._multiarray_tests.identityhash_tester",
        "numpy._core._multiarray_tests.incref_elide",
        "numpy._core._multiarray_tests.incref_elide_l",
        "numpy._core._multiarray_tests.internal_overlap",
        "numpy._core._multiarray_tests.npy_char_deprecation",
        "numpy._core._multiarray_tests.npy_cosh",
        "numpy._core._multiarray_tests.npy_create_writebackifcopy",
        "numpy._core._multiarray_tests.npy_discard",
        "numpy._core._multiarray_tests.npy_log10",
        "numpy._core._multiarray_tests.npy_resolve",
        "numpy._core._multiarray_tests.npy_sinh",
        "numpy._core._multiarray_tests.npy_tan",
        "numpy._core._multiarray_tests.npy_tanh",
        "numpy._core._multiarray_tests.solve_diophantine",
        "numpy._core._multiarray_tests.threaded_argparse_example_function",
        "numpy._core._multiarray_umath",
        "numpy._core._multiarray_umath._ArrayFunctionDispatcher",
        "numpy._core._multiarray_umath.__cpu_baseline__",
        "numpy._core._multiarray_umath.__cpu_dispatch__",
        "numpy._core._multiarray_umath.__cpu_features__",
        "numpy._core._multiarray_umath.__cpu_targets_info__",
        "numpy._core._multiarray_umath._array_converter",
        "numpy._core._multiarray_umath._discover_array_parameters",
        "numpy._core._multiarray_umath._get_castingimpl",
        "numpy._core._multiarray_umath._get_implementing_args",
        "numpy._core._multiarray_umath._get_sfloat_dtype",
        "numpy._core._multiarray_umath._load_from_filelike",
        "numpy._core._multiarray_umath.add_docstring",
        "numpy._core._multiarray_umath.dtype",
        "numpy._core._multiarray_umath.tracemalloc_domain",
        "numpy._core._operand_flag_tests",
        "numpy._core._rational_tests",
        "numpy._core._rational_tests.rational",
        "numpy._core._simd.clear_floatstatus",
        "numpy._core._simd.get_floatstatus",
        "numpy._core._simd.targets",
        "numpy._core._struct_ufunc_tests",
        "numpy._core._type_aliases.c_names_dict",
        "numpy._core._umath_tests",
        "numpy._core.abs",
        "numpy._core.absolute",
        "numpy._core.add",
        "numpy._core.all",
        "numpy._core.amax",
        "numpy._core.amin",
        "numpy._core.arange",
        "numpy._core.argsort",
        "numpy._core.array",
        "numpy._core.array2string",
        "numpy._core.array_repr",
        "numpy._core.arrayprint",
        "numpy._core.arrayprint._typelessdata",
        "numpy._core.arrayprint.set_printoptions",
        "numpy._core.asanyarray",
        "numpy._core.asarray",
        "numpy._core.atleast_1d",
        "numpy._core.atleast_2d",
        "numpy._core.atleast_3d",
        "numpy._core.bitwise_and",
        "numpy._core.bitwise_or",
        "numpy._core.bitwise_xor",
        "numpy._core.block",
        "numpy._core.bool",
        "numpy._core.cdouble",
        "numpy._core.complex128",
        "numpy._core.complex64",
        "numpy._core.complexfloating",
        "numpy._core.concatenate",
        "numpy._core.conjugate",
        "numpy._core.count_nonzero",
        "numpy._core.cross",
        "numpy._core.csingle",
        "numpy._core.defchararray",
        "numpy._core.defchararray.*",
        "numpy._core.defchararray.__all__",
        "numpy._core.defchararray.__doc__",
        "numpy._core.diagonal",
        "numpy._core.divide",
        "numpy._core.dot",
        "numpy._core.double",
        "numpy._core.dtype",
        "numpy._core.einsumfunc",
        "numpy._core.empty",
        "numpy._core.empty_like",
        "numpy._core.equal",
        "numpy._core.errstate",
        "numpy._core.finfo",
        "numpy._core.float32",
        "numpy._core.float64",
        "numpy._core.fromnumeric",
        "numpy._core.fromnumeric.any",
        "numpy._core.fromnumeric.mean",
        "numpy._core.fromnumeric.nonzero",
        "numpy._core.fromnumeric.partition",
        "numpy._core.fromnumeric.ravel",
        "numpy._core.fromnumeric.reshape",
        "numpy._core.fromnumeric.sum",
        "numpy._core.fromnumeric.transpose",
        "numpy._core.function_base",
        "numpy._core.function_base.add_newdoc",
        "numpy._core.getlimits",
        "numpy._core.getlimits._discovered_machar",
        "numpy._core.getlimits._float_ma",
        "numpy._core.greater",
        "numpy._core.greater_equal",
        "numpy._core.hstack",
        "numpy._core.iinfo",
        "numpy._core.inexact",
        "numpy._core.inf",
        "numpy._core.int16",
        "numpy._core.int32",
        "numpy._core.int64",
        "numpy._core.int8",
        "numpy._core.intc",
        "numpy._core.integer",
        "numpy._core.intp",
        "numpy._core.invert",
        "numpy._core.isfinite",
        "numpy._core.isnan",
        "numpy._core.isnat",
        "numpy._core.isscalar",
        "numpy._core.left_shift",
        "numpy._core.less",
        "numpy._core.less_equal",
        "numpy._core.linspace",
        "numpy._core.matmul",
        "numpy._core.matrix_transpose",
        "numpy._core.max",
        "numpy._core.moveaxis",
        "numpy._core.multiarray",
        "numpy._core.multiarray.CLIP",
        "numpy._core.multiarray.RAISE",
        "numpy._core.multiarray.StringDType",
        "numpy._core.multiarray.WRAP",
        "numpy._core.multiarray._flagdict",
        "numpy._core.multiarray._get_ndarray_c_version",
        "numpy._core.multiarray._monotonicity",
        "numpy._core.multiarray._place",
        "numpy._core.multiarray._vec_string",
        "numpy._core.multiarray.add_docstring",
        "numpy._core.multiarray.asanyarray",
        "numpy._core.multiarray.bincount",
        "numpy._core.multiarray.c_einsum",
        "numpy._core.multiarray.compare_chararrays",
        "numpy._core.multiarray.dot",
        "numpy._core.multiarray.dragon4_positional",
        "numpy._core.multiarray.dragon4_scientific",
        "numpy._core.multiarray.dtype",
        "numpy._core.multiarray.flagsobj",
        "numpy._core.multiarray.get_handler_name",
        "numpy._core.multiarray.interp",
        "numpy._core.multiarray.interp_complex",
        "numpy._core.multiarray.normalize_axis_index",
        "numpy._core.multiarray.packbits",
        "numpy._core.multiarray.ravel_multi_index",
        "numpy._core.multiarray.typeinfo",
        "numpy._core.multiarray.unpackbits",
        "numpy._core.multiarray.unravel_index",
        "numpy._core.multiply",
        "numpy._core.ndarray",
        "numpy._core.newaxis",
        "numpy._core.not_equal",
        "numpy._core.number",
        "numpy._core.numeric",
        "numpy._core.numeric.ScalarType",
        "numpy._core.numeric.absolute",
        "numpy._core.numeric.any",
        "numpy._core.numeric.arange",
        "numpy._core.numeric.array",
        "numpy._core.numeric.asanyarray",
        "numpy._core.numeric.asarray",
        "numpy._core.numeric.concatenate",
        "numpy._core.numeric.diagonal",
        "numpy._core.numeric.dot",
        "numpy._core.numeric.empty",
        "numpy._core.numeric.greater_equal",
        "numpy._core.numeric.indices",
        "numpy._core.numeric.int16",
        "numpy._core.numeric.int32",
        "numpy._core.numeric.int64",
        "numpy._core.numeric.int8",
        "numpy._core.numeric.integer",
        "numpy._core.numeric.intp",
        "numpy._core.numeric.isnan",
        "numpy._core.numeric.isscalar",
        "numpy._core.numeric.multiply",
        "numpy._core.numeric.ndarray",
        "numpy._core.numeric.nonzero",
        "numpy._core.numeric.normalize_axis_index",
        "numpy._core.numeric.normalize_axis_tuple",
        "numpy._core.numeric.ones",
        "numpy._core.numeric.promote_types",
        "numpy._core.numeric.take",
        "numpy._core.numeric.tensordot",
        "numpy._core.numeric.where",
        "numpy._core.numeric.zeros",
        "numpy._core.numeric.zeros_like",
        "numpy._core.numerictypes",
        "numpy._core.numerictypes.issctype",
        "numpy._core.numerictypes.issubdtype",
        "numpy._core.numerictypes.maximum_sctype",
        "numpy._core.numerictypes.obj2sctype",
        "numpy._core.numerictypes.sctype2char",
        "numpy._core.numerictypes.sctypes",
        "numpy._core.numerictypes.typecodes",
        "numpy._core.object_",
        "numpy._core.ones",
        "numpy._core.outer",
        "numpy._core.overrides",
        "numpy._core.overrides.ARRAY_FUNCTIONS",
        "numpy._core.overrides._get_implementing_args",
        "numpy._core.overrides.array_function_dispatch",
        "numpy._core.overrides.finalize_array_function_like",
        "numpy._core.overrides.get_array_function_like_doc",
        "numpy._core.overrides.set_module",
        "numpy._core.overrides.verify_matching_signatures",
        "numpy._core.power",
        "numpy._core.printoptions",
        "numpy._core.prod",
        "numpy._core.reciprocal",
        "numpy._core.records",
        "numpy._core.records.*",
        "numpy._core.records.__all__",
        "numpy._core.records.__doc__",
        "numpy._core.records.fromarrays",
        "numpy._core.records.fromrecords",
        "numpy._core.records.recarray",
        "numpy._core.remainder",
        "numpy._core.reshape",
        "numpy._core.result_type",
        "numpy._core.right_shift",
        "numpy._core.roll",
        "numpy._core.sctypes",
        "numpy._core.shape",
        "numpy._core.shape_base",
        "numpy._core.shape_base._arrays_for_stack_dispatcher",
        "numpy._core.shape_base._block_concatenate",
        "numpy._core.shape_base._block_dispatcher",
        "numpy._core.shape_base._block_setup",
        "numpy._core.shape_base._block_slicing",
        "numpy._core.sign",
        "numpy._core.signbit",
        "numpy._core.sin",
        "numpy._core.single",
        "numpy._core.sort",
        "numpy._core.sqrt",
        "numpy._core.stack",
        "numpy._core.strings.*",
        "numpy._core.strings.__all__",
        "numpy._core.strings.__doc__",
        "numpy._core.strings._join",
        "numpy._core.strings._rsplit",
        "numpy._core.strings._split",
        "numpy._core.strings._splitlines",
        "numpy._core.subtract",
        "numpy._core.sum",
        "numpy._core.swapaxes",
        "numpy._core.take",
        "numpy._core.tensordot",
        "numpy._core.tests._locales.CommaDecimalPointLocale",
        "numpy._core.tests._natype.pd_NA",
        "numpy._core.trace",
        "numpy._core.transpose",
        "numpy._core.uint16",
        "numpy._core.uint32",
        "numpy._core.uint64",
        "numpy._core.uint8",
        "numpy._core.umath",
        "numpy._core.umath._center",
        "numpy._core.umath._expandtabs",
        "numpy._core.umath._expandtabs_length",
        "numpy._core.umath._ljust",
        "numpy._core.umath._lstrip_chars",
        "numpy._core.umath._lstrip_whitespace",
        "numpy._core.umath._partition",
        "numpy._core.umath._partition_index",
        "numpy._core.umath._replace",
        "numpy._core.umath._rjust",
        "numpy._core.umath._rpartition",
        "numpy._core.umath._rpartition_index",
        "numpy._core.umath._rstrip_chars",
        "numpy._core.umath._rstrip_whitespace",
        "numpy._core.umath._strip_chars",
        "numpy._core.umath._strip_whitespace",
        "numpy._core.umath._zfill",
        "numpy._core.umath.add",
        "numpy._core.umath.arctan2",
        "numpy._core.umath.cos",
        "numpy._core.umath.count",
        "numpy._core.umath.endswith",
        "numpy._core.umath.exp",
        "numpy._core.umath.find",
        "numpy._core.umath.frompyfunc",
        "numpy._core.umath.index",
        "numpy._core.umath.isalnum",
        "numpy._core.umath.isalpha",
        "numpy._core.umath.isdecimal",
        "numpy._core.umath.isdigit",
        "numpy._core.umath.islower",
        "numpy._core.umath.isnumeric",
        "numpy._core.umath.isspace",
        "numpy._core.umath.istitle",
        "numpy._core.umath.isupper",
        "numpy._core.umath.less_equal",
        "numpy._core.umath.minimum",
        "numpy._core.umath.mod",
        "numpy._core.umath.not_equal",
        "numpy._core.umath.pi",
        "numpy._core.umath.rfind",
        "numpy._core.umath.rindex",
        "numpy._core.umath.sin",
        "numpy._core.umath.sqrt",
        "numpy._core.umath.startswith",
        "numpy._core.umath.str_len",
        "numpy._core.umath.subtract",
        "numpy._core.vecdot",
        "numpy._core.vstack",
        "numpy._core.zeros",
        "numpy._globals",
        "numpy._globals._NoValue",
        "numpy._pytesttester.PytestTester",
        "numpy._typing",
        "numpy._typing.ArrayLike",
        "numpy._typing.DTypeLike",
        "numpy._typing.NBitBase",
        "numpy._typing.NDArray",
        "numpy._typing._SupportsArray",
        "numpy._typing._add_docstring._docstrings",
        "numpy._utils._inspect.formatargspec",
        "numpy._utils._inspect.getargspec",
        "numpy._utils._pep440",
        "numpy._utils._rename_parameter",
        "numpy._utils.asbytes",
        "numpy._utils.asunicode",
        "numpy._utils.set_module",
        "numpy.add",
        "numpy.all",
        "numpy.allclose",
        "numpy.amax",
        "numpy.amin",
        "numpy.angle",
        "numpy.apply_along_axis",
        "numpy.apply_over_axes",
        "numpy.arange",
        "numpy.array",
        "numpy.array_split",
        "numpy.asarray",
        "numpy.asmatrix",
        "numpy.atleast_2d",
        "numpy.average",
        "numpy.bartlett",
        "numpy.blackman",
        "numpy.bmat",
        "numpy.bool_",
        "numpy.bytes_",
        "numpy.cdouble",
        "numpy.char",
        "numpy.column_stack",
        "numpy.common_type",
        "numpy.complexfloating",
        "numpy.core",
        "numpy.corrcoef",
        "numpy.cov",
        "numpy.csingle",
        "numpy.ctypeslib",
        "numpy.ctypeslib.as_array",
        "numpy.ctypeslib.load_library",
        "numpy.ctypeslib.ndpointer",
        "numpy.datetime64",
        "numpy.delete",
        "numpy.diag",
        "numpy.diff",
        "numpy.digitize",
        "numpy.distutils",
        "numpy.distutils.core.Extension",
        "numpy.distutils.core.setup",
        "numpy.distutils.cpuinfo",
        "numpy.distutils.cpuinfo.cpuinfo",
        "numpy.distutils.fcompiler",
        "numpy.distutils.misc_util.dict_append",
        "numpy.distutils.misc_util.exec_mod_from_location",
        "numpy.distutils.system_info.get_info",
        "numpy.distutils.system_info.show_all",
        "numpy.dot",
        "numpy.double",
        "numpy.dsplit",
        "numpy.dstack",
        "numpy.dtype",
        "numpy.dtypes",
        "numpy.dtypes.StringDType",
        "numpy.ediff1d",
        "numpy.equal",
        "numpy.errstate",
        "numpy.exceptions",
        "numpy.exceptions.AxisError",
        "numpy.exceptions.ComplexWarning",
        "numpy.exceptions.RankWarning",
        "numpy.exceptions.VisibleDeprecationWarning",
        "numpy.expand_dims",
        "numpy.extract",
        "numpy.eye",
        "numpy.f2py",
        "numpy.f2py._backends._meson.MesonBackend",
        "numpy.f2py._backends.f2py_build_generator",
        "numpy.f2py._src_pyf.process_str",
        "numpy.f2py.auxfuncs.process_f2cmap_dict",
        "numpy.f2py.crackfortran",
        "numpy.f2py.crackfortran._selected_int_kind_func",
        "numpy.f2py.crackfortran._selected_real_kind_func",
        "numpy.f2py.crackfortran.crackfortran",
        "numpy.f2py.crackfortran.markinnerspaces",
        "numpy.f2py.crackfortran.nameargspattern",
        "numpy.f2py.f2py2e",
        "numpy.f2py.f2py2e.main",
        "numpy.f2py.symbolic.ArithOp",
        "numpy.f2py.symbolic.Expr",
        "numpy.f2py.symbolic.Language",
        "numpy.f2py.symbolic.Op",
        "numpy.f2py.symbolic.as_apply",
        "numpy.f2py.symbolic.as_array",
        "numpy.f2py.symbolic.as_complex",
        "numpy.f2py.symbolic.as_deref",
        "numpy.f2py.symbolic.as_eq",
        "numpy.f2py.symbolic.as_expr",
        "numpy.f2py.symbolic.as_factors",
        "numpy.f2py.symbolic.as_ge",
        "numpy.f2py.symbolic.as_gt",
        "numpy.f2py.symbolic.as_le",
        "numpy.f2py.symbolic.as_lt",
        "numpy.f2py.symbolic.as_ne",
        "numpy.f2py.symbolic.as_number",
        "numpy.f2py.symbolic.as_numer_denom",
        "numpy.f2py.symbolic.as_ref",
        "numpy.f2py.symbolic.as_string",
        "numpy.f2py.symbolic.as_symbol",
        "numpy.f2py.symbolic.as_terms",
        "numpy.f2py.symbolic.as_ternary",
        "numpy.f2py.symbolic.eliminate_quotes",
        "numpy.f2py.symbolic.fromstring",
        "numpy.f2py.symbolic.insert_quotes",
        "numpy.f2py.symbolic.normalize",
        "numpy.f2py.tests.util",
        "numpy.fft",
        "numpy.fft._helper",
        "numpy.finfo",
        "numpy.fix",
        "numpy.fliplr",
        "numpy.flipud",
        "numpy.float16",
        "numpy.float32",
        "numpy.float64",
        "numpy.floating",
        "numpy.generic",
        "numpy.geomspace",
        "numpy.gradient",
        "numpy.greater",
        "numpy.greater_equal",
        "numpy.half",
        "numpy.hamming",
        "numpy.hanning",
        "numpy.histogram",
        "numpy.histogram2d",
        "numpy.histogram_bin_edges",
        "numpy.histogramdd",
        "numpy.hsplit",
        "numpy.i0",
        "numpy.identity",
        "numpy.iinfo",
        "numpy.imag",
        "numpy.in1d",
        "numpy.inf",
        "numpy.insert",
        "numpy.integer",
        "numpy.interp",
        "numpy.intersect1d",
        "numpy.intp",
        "numpy.iscomplex",
        "numpy.iscomplexobj",
        "numpy.isfinite",
        "numpy.isin",
        "numpy.isinf",
        "numpy.isnan",
        "numpy.isneginf",
        "numpy.isposinf",
        "numpy.isreal",
        "numpy.isrealobj",
        "numpy.isscalar",
        "numpy.kaiser",
        "numpy.kron",
        "numpy.less",
        "numpy.less_equal",
        "numpy.lib.Arrayterator",
        "numpy.lib.NumpyVersion",
        "numpy.lib._arraypad_impl._as_pairs",
        "numpy.lib._datasource",
        "numpy.lib._function_base_impl",
        "numpy.lib._function_base_impl._ureduce",
        "numpy.lib._function_base_impl._weights_are_valid",
        "numpy.lib._function_base_impl.diff",
        "numpy.lib._function_base_impl.disp",
        "numpy.lib._function_base_impl.trim_zeros",
        "numpy.lib._histograms_impl.histogram",
        "numpy.lib._histograms_impl.histogramdd",
        "numpy.lib._index_tricks_impl.AxisConcatenator",
        "numpy.lib._index_tricks_impl.c_",
        "numpy.lib._index_tricks_impl.diag_indices",
        "numpy.lib._index_tricks_impl.diag_indices_from",
        "numpy.lib._index_tricks_impl.fill_diagonal",
        "numpy.lib._index_tricks_impl.index_exp",
        "numpy.lib._index_tricks_impl.ix_",
        "numpy.lib._index_tricks_impl.mgrid",
        "numpy.lib._index_tricks_impl.ndenumerate",
        "numpy.lib._index_tricks_impl.ndindex",
        "numpy.lib._index_tricks_impl.ogrid",
        "numpy.lib._index_tricks_impl.r_",
        "numpy.lib._index_tricks_impl.s_",
        "numpy.lib._iotools.ConversionWarning",
        "numpy.lib._iotools.ConverterError",
        "numpy.lib._iotools.LineSplitter",
        "numpy.lib._iotools.NameValidator",
        "numpy.lib._iotools.StringConverter",
        "numpy.lib._iotools._is_string_like",
        "numpy.lib._iotools.easy_dtype",
        "numpy.lib._iotools.flatten_dtype",
        "numpy.lib._iotools.has_nested_fields",
        "numpy.lib._nanfunctions_impl._nan_mask",
        "numpy.lib._nanfunctions_impl._replace_nan",
        "numpy.lib._npyio_impl",
        "numpy.lib._npyio_impl.recfromcsv",
        "numpy.lib._npyio_impl.recfromtxt",
        "numpy.lib._shape_base_impl.get_array_wrap",
        "numpy.lib._stride_tricks_impl.DummyArray",
        "numpy.lib._stride_tricks_impl._broadcast_shape",
        "numpy.lib._stride_tricks_impl.as_strided",
        "numpy.lib._stride_tricks_impl.broadcast_arrays",
        "numpy.lib._stride_tricks_impl.broadcast_shapes",
        "numpy.lib._stride_tricks_impl.broadcast_to",
        "numpy.lib._stride_tricks_impl.sliding_window_view",
        "numpy.lib._twodim_base_impl.diag",
        "numpy.lib._twodim_base_impl.eye",
        "numpy.lib._twodim_base_impl.triu",
        "numpy.lib._twodim_base_impl.vander",
        "numpy.lib._type_check_impl.imag",
        "numpy.lib._type_check_impl.iscomplex",
        "numpy.lib._type_check_impl.isreal",
        "numpy.lib._type_check_impl.mintypecode",
        "numpy.lib._type_check_impl.real",
        "numpy.lib._utils_impl",
        "numpy.lib._utils_impl.drop_metadata",
        "numpy.lib._utils_impl.safe_eval",
        "numpy.lib.array_utils",
        "numpy.lib.array_utils.normalize_axis_index",
        "numpy.lib.array_utils.normalize_axis_tuple",
        "numpy.lib.format",
        "numpy.lib.mixins.NDArrayOperatorsMixin",
        "numpy.lib.recfunctions",
        "numpy.lib.recfunctions.append_fields",
        "numpy.lib.recfunctions.apply_along_fields",
        "numpy.lib.recfunctions.assign_fields_by_name",
        "numpy.lib.recfunctions.drop_fields",
        "numpy.lib.recfunctions.find_duplicates",
        "numpy.lib.recfunctions.get_fieldstructure",
        "numpy.lib.recfunctions.join_by",
        "numpy.lib.recfunctions.merge_arrays",
        "numpy.lib.recfunctions.recursive_fill_fields",
        "numpy.lib.recfunctions.rename_fields",
        "numpy.lib.recfunctions.repack_fields",
        "numpy.lib.recfunctions.require_fields",
        "numpy.lib.recfunctions.stack_arrays",
        "numpy.lib.recfunctions.structured_to_unstructured",
        "numpy.lib.recfunctions.unstructured_to_structured",
        "numpy.lib.stride_tricks.as_strided",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.user_array.container",
        "numpy.linalg",
        "numpy.linalg.LinAlgError",
        "numpy.linalg._linalg",
        "numpy.linalg._linalg._multi_dot_matrix_chain_order",
        "numpy.linalg._umath_linalg",
        "numpy.linalg.eigvals",
        "numpy.linalg.inv",
        "numpy.linalg.lapack_lite",
        "numpy.linalg.lstsq",
        "numpy.linalg.matrix_power",
        "numpy.linalg.matrix_rank",
        "numpy.linalg.multi_dot",
        "numpy.linalg.norm",
        "numpy.linalg.pinv",
        "numpy.linalg.tests.test_linalg.CondCases",
        "numpy.linalg.tests.test_linalg.DetCases",
        "numpy.linalg.tests.test_linalg.EigCases",
        "numpy.linalg.tests.test_linalg.EigvalsCases",
        "numpy.linalg.tests.test_linalg.InvCases",
        "numpy.linalg.tests.test_linalg.LinalgCase",
        "numpy.linalg.tests.test_linalg.LinalgTestCase",
        "numpy.linalg.tests.test_linalg.LstsqCases",
        "numpy.linalg.tests.test_linalg.PinvCases",
        "numpy.linalg.tests.test_linalg.SVDCases",
        "numpy.linalg.tests.test_linalg.SolveCases",
        "numpy.linalg.tests.test_linalg.TestQR",
        "numpy.linalg.tests.test_linalg._TestNorm2D",
        "numpy.linalg.tests.test_linalg._TestNormDoubleBase",
        "numpy.linalg.tests.test_linalg._TestNormInt64Base",
        "numpy.linalg.tests.test_linalg._TestNormSingleBase",
        "numpy.linalg.tests.test_linalg.apply_tag",
        "numpy.linspace",
        "numpy.logspace",
        "numpy.longdouble",
        "numpy.ma",
        "numpy.ma.MaskType",
        "numpy.ma.MaskedArray",
        "numpy.ma.absolute",
        "numpy.ma.add",
        "numpy.ma.all",
        "numpy.ma.allclose",
        "numpy.ma.allequal",
        "numpy.ma.alltrue",
        "numpy.ma.arange",
        "numpy.ma.arccos",
        "numpy.ma.arcsin",
        "numpy.ma.arctan",
        "numpy.ma.arctan2",
        "numpy.ma.array",
        "numpy.ma.average",
        "numpy.ma.choose",
        "numpy.ma.concatenate",
        "numpy.ma.conjugate",
        "numpy.ma.core",
        "numpy.ma.core.MAError",
        "numpy.ma.core.MaskError",
        "numpy.ma.core.MaskType",
        "numpy.ma.core.MaskedArray",
        "numpy.ma.core.MaskedArrayFutureWarning",
        "numpy.ma.core.abs",
        "numpy.ma.core.absolute",
        "numpy.ma.core.add",
        "numpy.ma.core.all",
        "numpy.ma.core.allclose",
        "numpy.ma.core.allequal",
        "numpy.ma.core.alltrue",
        "numpy.ma.core.angle",
        "numpy.ma.core.anom",
        "numpy.ma.core.arange",
        "numpy.ma.core.arccos",
        "numpy.ma.core.arccosh",
        "numpy.ma.core.arcsin",
        "numpy.ma.core.arctan",
        "numpy.ma.core.arctan2",
        "numpy.ma.core.argsort",
        "numpy.ma.core.array",
        "numpy.ma.core.asanyarray",
        "numpy.ma.core.asarray",
        "numpy.ma.core.choose",
        "numpy.ma.core.concatenate",
        "numpy.ma.core.conjugate",
        "numpy.ma.core.cos",
        "numpy.ma.core.cosh",
        "numpy.ma.core.count",
        "numpy.ma.core.default_fill_value",
        "numpy.ma.core.diag",
        "numpy.ma.core.divide",
        "numpy.ma.core.doc_note",
        "numpy.ma.core.empty",
        "numpy.ma.core.empty_like",
        "numpy.ma.core.equal",
        "numpy.ma.core.exp",
        "numpy.ma.core.filled",
        "numpy.ma.core.fix_invalid",
        "numpy.ma.core.flatten_mask",
        "numpy.ma.core.flatten_structured_array",
        "numpy.ma.core.fromflex",
        "numpy.ma.core.getmask",
        "numpy.ma.core.getmaskarray",
        "numpy.ma.core.greater",
        "numpy.ma.core.greater_equal",
        "numpy.ma.core.hypot",
        "numpy.ma.core.identity",
        "numpy.ma.core.inner",
        "numpy.ma.core.isMaskedArray",
        "numpy.ma.core.less",
        "numpy.ma.core.less_equal",
        "numpy.ma.core.log",
        "numpy.ma.core.log10",
        "numpy.ma.core.make_mask",
        "numpy.ma.core.make_mask_descr",
        "numpy.ma.core.mask_or",
        "numpy.ma.core.masked",
        "numpy.ma.core.masked_array",
        "numpy.ma.core.masked_equal",
        "numpy.ma.core.masked_greater",
        "numpy.ma.core.masked_greater_equal",
        "numpy.ma.core.masked_inside",
        "numpy.ma.core.masked_less",
        "numpy.ma.core.masked_less_equal",
        "numpy.ma.core.masked_not_equal",
        "numpy.ma.core.masked_outside",
        "numpy.ma.core.masked_print_option",
        "numpy.ma.core.masked_values",
        "numpy.ma.core.masked_where",
        "numpy.ma.core.max",
        "numpy.ma.core.maximum",
        "numpy.ma.core.maximum_fill_value",
        "numpy.ma.core.min",
        "numpy.ma.core.minimum",
        "numpy.ma.core.minimum_fill_value",
        "numpy.ma.core.mod",
        "numpy.ma.core.multiply",
        "numpy.ma.core.mvoid",
        "numpy.ma.core.nomask",
        "numpy.ma.core.not_equal",
        "numpy.ma.core.ones",
        "numpy.ma.core.ones_like",
        "numpy.ma.core.outer",
        "numpy.ma.core.power",
        "numpy.ma.core.product",
        "numpy.ma.core.put",
        "numpy.ma.core.putmask",
        "numpy.ma.core.ravel",
        "numpy.ma.core.repeat",
        "numpy.ma.core.reshape",
        "numpy.ma.core.resize",
        "numpy.ma.core.shape",
        "numpy.ma.core.sin",
        "numpy.ma.core.sinh",
        "numpy.ma.core.sometrue",
        "numpy.ma.core.sort",
        "numpy.ma.core.sqrt",
        "numpy.ma.core.subtract",
        "numpy.ma.core.sum",
        "numpy.ma.core.take",
        "numpy.ma.core.tan",
        "numpy.ma.core.tanh",
        "numpy.ma.core.transpose",
        "numpy.ma.core.where",
        "numpy.ma.core.zeros",
        "numpy.ma.core.zeros_like",
        "numpy.ma.cos",
        "numpy.ma.cosh",
        "numpy.ma.count",
        "numpy.ma.divide",
        "numpy.ma.equal",
        "numpy.ma.exp",
        "numpy.ma.extras._covhelper",
        "numpy.ma.extras.apply_along_axis",
        "numpy.ma.extras.apply_over_axes",
        "numpy.ma.extras.atleast_1d",
        "numpy.ma.extras.atleast_2d",
        "numpy.ma.extras.atleast_3d",
        "numpy.ma.extras.average",
        "numpy.ma.extras.clump_masked",
        "numpy.ma.extras.clump_unmasked",
        "numpy.ma.extras.compress_nd",
        "numpy.ma.extras.compress_rowcols",
        "numpy.ma.extras.corrcoef",
        "numpy.ma.extras.cov",
        "numpy.ma.extras.diagflat",
        "numpy.ma.extras.dot",
        "numpy.ma.extras.ediff1d",
        "numpy.ma.extras.flatnotmasked_contiguous",
        "numpy.ma.extras.in1d",
        "numpy.ma.extras.intersect1d",
        "numpy.ma.extras.isin",
        "numpy.ma.extras.mask_rowcols",
        "numpy.ma.extras.masked_all",
        "numpy.ma.extras.masked_all_like",
        "numpy.ma.extras.median",
        "numpy.ma.extras.mr_",
        "numpy.ma.extras.ndenumerate",
        "numpy.ma.extras.notmasked_contiguous",
        "numpy.ma.extras.notmasked_edges",
        "numpy.ma.extras.polyfit",
        "numpy.ma.extras.setdiff1d",
        "numpy.ma.extras.setxor1d",
        "numpy.ma.extras.stack",
        "numpy.ma.extras.union1d",
        "numpy.ma.extras.unique",
        "numpy.ma.extras.vstack",
        "numpy.ma.filled",
        "numpy.ma.getmask",
        "numpy.ma.greater",
        "numpy.ma.greater_equal",
        "numpy.ma.inner",
        "numpy.ma.isMaskedArray",
        "numpy.ma.less",
        "numpy.ma.less_equal",
        "numpy.ma.log",
        "numpy.ma.log10",
        "numpy.ma.make_mask",
        "numpy.ma.make_mask_descr",
        "numpy.ma.masked",
        "numpy.ma.masked_array",
        "numpy.ma.masked_equal",
        "numpy.ma.masked_greater",
        "numpy.ma.masked_greater_equal",
        "numpy.ma.masked_inside",
        "numpy.ma.masked_less",
        "numpy.ma.masked_less_equal",
        "numpy.ma.masked_not_equal",
        "numpy.ma.masked_outside",
        "numpy.ma.masked_print_option",
        "numpy.ma.masked_values",
        "numpy.ma.masked_where",
        "numpy.ma.maximum",
        "numpy.ma.minimum",
        "numpy.ma.mrecords",
        "numpy.ma.mrecords.MaskedRecords",
        "numpy.ma.mrecords.addfield",
        "numpy.ma.mrecords.fromarrays",
        "numpy.ma.mrecords.fromrecords",
        "numpy.ma.mrecords.fromtextfile",
        "numpy.ma.mrecords.mrecarray",
        "numpy.ma.multiply",
        "numpy.ma.nomask",
        "numpy.ma.nonzero",
        "numpy.ma.not_equal",
        "numpy.ma.ones",
        "numpy.ma.outer",
        "numpy.ma.product",
        "numpy.ma.put",
        "numpy.ma.ravel",
        "numpy.ma.repeat",
        "numpy.ma.resize",
        "numpy.ma.shape",
        "numpy.ma.sin",
        "numpy.ma.sinh",
        "numpy.ma.sometrue",
        "numpy.ma.sort",
        "numpy.ma.sqrt",
        "numpy.ma.subtract",
        "numpy.ma.sum",
        "numpy.ma.take",
        "numpy.ma.tan",
        "numpy.ma.tanh",
        "numpy.ma.testutils.assert_",
        "numpy.ma.testutils.assert_almost_equal",
        "numpy.ma.testutils.assert_array_equal",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.testutils.assert_equal_records",
        "numpy.ma.testutils.assert_mask_equal",
        "numpy.ma.testutils.assert_not_equal",
        "numpy.ma.testutils.assert_raises",
        "numpy.ma.testutils.fail_if_equal",
        "numpy.ma.transpose",
        "numpy.ma.where",
        "numpy.ma.zeros",
        "numpy.mask_indices",
        "numpy.matlib",
        "numpy.matmul",
        "numpy.matrix",
        "numpy.matrixlib",
        "numpy.matrixlib.defmatrix.asmatrix",
        "numpy.matrixlib.defmatrix.matrix",
        "numpy.memmap",
        "numpy.meshgrid",
        "numpy.mintypecode",
        "numpy.multiply",
        "numpy.nan_to_num",
        "numpy.ndarray",
        "numpy.nditer",
        "numpy.nextafter",
        "numpy.not_equal",
        "numpy.number",
        "numpy.object_",
        "numpy.ones",
        "numpy.pi",
        "numpy.piecewise",
        "numpy.place",
        "numpy.polynomial",
        "numpy.polynomial.Chebyshev",
        "numpy.polynomial.Hermite",
        "numpy.polynomial.HermiteE",
        "numpy.polynomial.Laguerre",
        "numpy.polynomial.Legendre",
        "numpy.polynomial.Polynomial",
        "numpy.polynomial.chebyshev",
        "numpy.polynomial.hermite",
        "numpy.polynomial.hermite_e",
        "numpy.polynomial.laguerre",
        "numpy.polynomial.legendre",
        "numpy.polynomial.polynomial",
        "numpy.polynomial.polynomial.polyval",
        "numpy.polynomial.polyutils",
        "numpy.prod",
        "numpy.put_along_axis",
        "numpy.random",
        "numpy.random.Generator",
        "numpy.random.MT19937",
        "numpy.random.PCG64",
        "numpy.random.PCG64DXSM",
        "numpy.random.Philox",
        "numpy.random.RandomState",
        "numpy.random.SFC64",
        "numpy.random.SeedSequence",
        "numpy.random._common.interface",
        "numpy.random._examples.cffi.extending",
        "numpy.random._examples.numba.extending",
        "numpy.random.bit_generator.ISeedSequence",
        "numpy.random.bit_generator.ISpawnableSeedSequence",
        "numpy.random.bit_generator.SeedlessSeedSequence",
        "numpy.random.default_rng",
        "numpy.random.rand",
        "numpy.random.randint",
        "numpy.random.randn",
        "numpy.random.random",
        "numpy.real",
        "numpy.real_if_close",
        "numpy.rec",
        "numpy.rot90",
        "numpy.row_stack",
        "numpy.select",
        "numpy.setdiff1d",
        "numpy.setxor1d",
        "numpy.sinc",
        "numpy.single",
        "numpy.split",
        "numpy.sqrt",
        "numpy.stack",
        "numpy.str_",
        "numpy.strings",
        "numpy.strings.*",
        "numpy.strings.multiply",
        "numpy.strings.partition",
        "numpy.strings.rpartition",
        "numpy.subtract",
        "numpy.sum",
        "numpy.take_along_axis",
        "numpy.testing",
        "numpy.testing.HAS_LAPACK64",
        "numpy.testing.HAS_REFCOUNT",
        "numpy.testing.IS_64BIT",
        "numpy.testing.IS_EDITABLE",
        "numpy.testing.IS_MUSL",
        "numpy.testing.IS_PYPY",
        "numpy.testing.IS_PYSTON",
        "numpy.testing.IS_WASM",
        "numpy.testing.KnownFailureException",
        "numpy.testing.NOGIL_BUILD",
        "numpy.testing.SkipTest",
        "numpy.testing._assert_valid_refcount",
        "numpy.testing._gen_alignment_data",
        "numpy.testing._private.utils.NOGIL_BUILD",
        "numpy.testing._private.utils._glibc_older_than",
        "numpy.testing._private.utils._no_tracing",
        "numpy.testing._private.utils.get_stringdtype_dtype",
        "numpy.testing._private.utils.requires_memory",
        "numpy.testing._private.utils.run_threaded",
        "numpy.testing.assert_",
        "numpy.testing.assert_allclose",
        "numpy.testing.assert_almost_equal",
        "numpy.testing.assert_approx_equal",
        "numpy.testing.assert_array_almost_equal",
        "numpy.testing.assert_array_almost_equal_nulp",
        "numpy.testing.assert_array_compare",
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_array_less",
        "numpy.testing.assert_array_max_ulp",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_no_gc_cycles",
        "numpy.testing.assert_no_warnings",
        "numpy.testing.assert_raises",
        "numpy.testing.assert_raises_regex",
        "numpy.testing.assert_string_equal",
        "numpy.testing.assert_warns",
        "numpy.testing.break_cycles",
        "numpy.testing.build_err_msg",
        "numpy.testing.check_support_sve",
        "numpy.testing.clear_and_catch_warnings",
        "numpy.testing.extbuild",
        "numpy.testing.overrides.get_overridable_numpy_array_functions",
        "numpy.testing.runstring",
        "numpy.testing.suppress_warnings",
        "numpy.testing.tempdir",
        "numpy.testing.temppath",
        "numpy.tile",
        "numpy.timedelta64",
        "numpy.transpose",
        "numpy.trapezoid",
        "numpy.trapz",
        "numpy.tri",
        "numpy.tril_indices",
        "numpy.tril_indices_from",
        "numpy.trim_zeros",
        "numpy.triu_indices",
        "numpy.triu_indices_from",
        "numpy.typing",
        "numpy.typing.mypy_plugin._EXTENDED_PRECISION_LIST",
        "numpy.ufunc",
        "numpy.uint16",
        "numpy.union1d",
        "numpy.unique",
        "numpy.unsignedinteger",
        "numpy.unwrap",
        "numpy.vander",
        "numpy.vectorize",
        "numpy.version.short_version",
        "numpy.version.version",
        "numpy.void",
        "numpy.vsplit",
        "numpy.zeros",
        "numpy_distutils",
        "numpy_distutils.command.build_flib",
        "numpy_distutils.command.cpuinfo.cpuinfo",
        "numpy_distutils.cpuinfo.cpuinfo",
        "numpy_distutils.fcompiler",
        "odf.config.ConfigItem",
        "odf.config.ConfigItemMapEntry",
        "odf.config.ConfigItemMapIndexed",
        "odf.config.ConfigItemMapNamed",
        "odf.config.ConfigItemSet",
        "odf.element.Element",
        "odf.namespaces.OFFICENS",
        "odf.namespaces.TABLENS",
        "odf.namespaces.TEXTNS",
        "odf.office.Annotation",
        "odf.opendocument.OpenDocument",
        "odf.opendocument.OpenDocumentSpreadsheet",
        "odf.opendocument.load",
        "odf.style.ParagraphProperties",
        "odf.style.Style",
        "odf.style.TableCellProperties",
        "odf.style.TextProperties",
        "odf.table.CoveredTableCell",
        "odf.table.Table",
        "odf.table.TableCell",
        "odf.table.TableRow",
        "odf.text.P",
        "odf.text.S",
        "ole.ObjectAnchor",
        "openpyxl.DEBUG",
        "openpyxl.DEFUSEDXML",
        "openpyxl.LXML",
        "openpyxl.Workbook",
        "openpyxl.__version__",
        "openpyxl._constants",
        "openpyxl.cell.Cell",
        "openpyxl.cell.MergedCell",
        "openpyxl.cell.WriteOnlyCell",
        "openpyxl.cell._writer.write_cell",
        "openpyxl.cell.cell.MergedCell",
        "openpyxl.cell.cell.TYPE_ERROR",
        "openpyxl.cell.cell.TYPE_NUMERIC",
        "openpyxl.cell.read_only.EMPTY_CELL",
        "openpyxl.cell.read_only.ReadOnlyCell",
        "openpyxl.cell.rich_text.CellRichText",
        "openpyxl.cell.text.InlineFont",
        "openpyxl.cell.text.Text",
        "openpyxl.chart._chart.ChartBase",
        "openpyxl.chart.chartspace.ChartSpace",
        "openpyxl.chart.reader.read_chart",
        "openpyxl.chart.shapes.GraphicalProperties",
        "openpyxl.chart.text.RichText",
        "openpyxl.chartsheet.Chartsheet",
        "openpyxl.comments.comment_sheet.CommentRecord",
        "openpyxl.comments.comment_sheet.CommentSheet",
        "openpyxl.compat.NUMERIC_TYPES",
        "openpyxl.compat.abc.ABC",
        "openpyxl.compat.deprecated",
        "openpyxl.compat.numbers.NUMPY",
        "openpyxl.compat.product.prod",
        "openpyxl.compat.safe_string",
        "openpyxl.descriptors.Alias",
        "openpyxl.descriptors.Bool",
        "openpyxl.descriptors.Convertible",
        "openpyxl.descriptors.DateTime",
        "openpyxl.descriptors.Descriptor",
        "openpyxl.descriptors.Float",
        "openpyxl.descriptors.Integer",
        "openpyxl.descriptors.MatchPattern",
        "openpyxl.descriptors.Min",
        "openpyxl.descriptors.MinMax",
        "openpyxl.descriptors.NoneSet",
        "openpyxl.descriptors.Sequence",
        "openpyxl.descriptors.Set",
        "openpyxl.descriptors.Strict",
        "openpyxl.descriptors.String",
        "openpyxl.descriptors.Typed",
        "openpyxl.descriptors.container.ElementList",
        "openpyxl.descriptors.excel.Base64Binary",
        "openpyxl.descriptors.excel.CellRange",
        "openpyxl.descriptors.excel.Coordinate",
        "openpyxl.descriptors.excel.ExtensionList",
        "openpyxl.descriptors.excel.Guid",
        "openpyxl.descriptors.excel.HexBinary",
        "openpyxl.descriptors.excel.Percentage",
        "openpyxl.descriptors.excel.Relation",
        "openpyxl.descriptors.excel.UniversalMeasure",
        "openpyxl.descriptors.excel._explicit_none",
        "openpyxl.descriptors.nested.EmptyTag",
        "openpyxl.descriptors.nested.NestedBool",
        "openpyxl.descriptors.nested.NestedFloat",
        "openpyxl.descriptors.nested.NestedInteger",
        "openpyxl.descriptors.nested.NestedMinMax",
        "openpyxl.descriptors.nested.NestedNoneSet",
        "openpyxl.descriptors.nested.NestedSet",
        "openpyxl.descriptors.nested.NestedString",
        "openpyxl.descriptors.nested.NestedText",
        "openpyxl.descriptors.nested.NestedValue",
        "openpyxl.descriptors.sequence.MultiSequence",
        "openpyxl.descriptors.sequence.MultiSequencePart",
        "openpyxl.descriptors.sequence.NestedSequence",
        "openpyxl.descriptors.sequence.Sequence",
        "openpyxl.descriptors.sequence.UniqueSequence",
        "openpyxl.descriptors.sequence.ValueSequence",
        "openpyxl.descriptors.serialisable.Serialisable",
        "openpyxl.drawing.colors.ColorChoiceDescriptor",
        "openpyxl.drawing.colors.ColorMapping",
        "openpyxl.drawing.fill.*",
        "openpyxl.drawing.geometry.CustomGeometry2D",
        "openpyxl.drawing.geometry.PresetGeometry2D",
        "openpyxl.drawing.geometry.Scene3D",
        "openpyxl.drawing.geometry.Shape3D",
        "openpyxl.drawing.geometry.Transform2D",
        "openpyxl.drawing.image.Image",
        "openpyxl.drawing.image.PILImage",
        "openpyxl.drawing.line.LineProperties",
        "openpyxl.drawing.spreadsheet_drawing.AbsoluteAnchor",
        "openpyxl.drawing.spreadsheet_drawing.AnchorMarker",
        "openpyxl.drawing.spreadsheet_drawing.SpreadsheetDrawing",
        "openpyxl.drawing.text.CharacterProperties",
        "openpyxl.drawing.text.LineBreak",
        "openpyxl.drawing.text.ListStyle",
        "openpyxl.drawing.text.Paragraph",
        "openpyxl.drawing.text.ParagraphProperties",
        "openpyxl.drawing.text.RegularTextRun",
        "openpyxl.drawing.text.RichTextProperties",
        "openpyxl.formatting.formatting.ConditionalFormatting",
        "openpyxl.formatting.formatting.ConditionalFormattingList",
        "openpyxl.formula.Tokenizer",
        "openpyxl.formula.translate.Translator",
        "openpyxl.load_workbook",
        "openpyxl.packaging.core.DocumentProperties",
        "openpyxl.packaging.custom.CustomPropertyList",
        "openpyxl.packaging.extended.ExtendedProperties",
        "openpyxl.packaging.manifest.Manifest",
        "openpyxl.packaging.manifest.Override",
        "openpyxl.packaging.relationship.Relationship",
        "openpyxl.packaging.relationship.RelationshipList",
        "openpyxl.packaging.relationship.get_dependents",
        "openpyxl.packaging.relationship.get_rel",
        "openpyxl.packaging.relationship.get_rels_path",
        "openpyxl.packaging.workbook.ChildSheet",
        "openpyxl.packaging.workbook.PivotCache",
        "openpyxl.packaging.workbook.WorkbookPackage",
        "openpyxl.pivot.cache.CacheDefinition",
        "openpyxl.pivot.record.RecordList",
        "openpyxl.pivot.table.TableDefinition",
        "openpyxl.reader.excel.load_workbook",
        "openpyxl.styles",
        "openpyxl.styles.Alignment",
        "openpyxl.styles.Border",
        "openpyxl.styles.Color",
        "openpyxl.styles.Fill",
        "openpyxl.styles.Font",
        "openpyxl.styles.GradientFill",
        "openpyxl.styles.PatternFill",
        "openpyxl.styles.Protection",
        "openpyxl.styles.Side",
        "openpyxl.styles.alignment.Alignment",
        "openpyxl.styles.borders.Border",
        "openpyxl.styles.borders.DEFAULT_BORDER",
        "openpyxl.styles.cell_style.StyleArray",
        "openpyxl.styles.colors.COLOR_INDEX",
        "openpyxl.styles.colors.Color",
        "openpyxl.styles.colors.ColorDescriptor",
        "openpyxl.styles.colors.RGB",
        "openpyxl.styles.differential.DifferentialStyle",
        "openpyxl.styles.differential.DifferentialStyleList",
        "openpyxl.styles.fills.DEFAULT_EMPTY_FILL",
        "openpyxl.styles.fills.DEFAULT_GRAY_FILL",
        "openpyxl.styles.fonts.DEFAULT_FONT",
        "openpyxl.styles.fonts.Font",
        "openpyxl.styles.is_date_format",
        "openpyxl.styles.named_styles.NamedStyle",
        "openpyxl.styles.named_styles.NamedStyleList",
        "openpyxl.styles.numbers",
        "openpyxl.styles.numbers.BUILTIN_FORMATS",
        "openpyxl.styles.numbers.BUILTIN_FORMATS_MAX_SIZE",
        "openpyxl.styles.protection.Protection",
        "openpyxl.styles.styleable.StyleableObject",
        "openpyxl.styles.stylesheet.apply_stylesheet",
        "openpyxl.styles.stylesheet.write_stylesheet",
        "openpyxl.styles.table.TableStyleList",
        "openpyxl.utils.absolute_coordinate",
        "openpyxl.utils.bound_dictionary.BoundDictionary",
        "openpyxl.utils.cell.COORD_RE",
        "openpyxl.utils.cell.RANGE_EXPR",
        "openpyxl.utils.cell.SHEETRANGE_RE",
        "openpyxl.utils.cell.SHEET_TITLE",
        "openpyxl.utils.column_index_from_string",
        "openpyxl.utils.coordinate_to_tuple",
        "openpyxl.utils.datetime.CALENDAR_MAC_1904",
        "openpyxl.utils.datetime.MAC_EPOCH",
        "openpyxl.utils.datetime.WINDOWS_EPOCH",
        "openpyxl.utils.datetime.from_ISO8601",
        "openpyxl.utils.datetime.from_excel",
        "openpyxl.utils.datetime.to_ISO8601",
        "openpyxl.utils.datetime.to_excel",
        "openpyxl.utils.escape.escape",
        "openpyxl.utils.escape.unescape",
        "openpyxl.utils.exceptions.IllegalCharacterError",
        "openpyxl.utils.exceptions.InvalidFileException",
        "openpyxl.utils.exceptions.ReadOnlyWorkbookException",
        "openpyxl.utils.exceptions.WorkbookAlreadySaved",
        "openpyxl.utils.get_column_interval",
        "openpyxl.utils.get_column_letter",
        "openpyxl.utils.indexed_list.IndexedList",
        "openpyxl.utils.protection.hash_password",
        "openpyxl.utils.quote_sheetname",
        "openpyxl.utils.range_boundaries",
        "openpyxl.utils.range_to_tuple",
        "openpyxl.utils.rows_from_range",
        "openpyxl.utils.units.DEFAULT_COLUMN_WIDTH",
        "openpyxl.utils.units.cm_to_EMU",
        "openpyxl.utils.units.pixels_to_EMU",
        "openpyxl.workbook.Workbook",
        "openpyxl.workbook._writer.WorkbookWriter",
        "openpyxl.workbook.child._WorkbookChild",
        "openpyxl.workbook.defined_name.DefinedName",
        "openpyxl.workbook.defined_name.DefinedNameDict",
        "openpyxl.workbook.defined_name.DefinedNameList",
        "openpyxl.workbook.external_link.external.read_external_link",
        "openpyxl.workbook.external_reference.ExternalReference",
        "openpyxl.workbook.function_group.FunctionGroupList",
        "openpyxl.workbook.properties.CalcProperties",
        "openpyxl.workbook.properties.FileVersion",
        "openpyxl.workbook.properties.WorkbookProperties",
        "openpyxl.workbook.protection.FileSharing",
        "openpyxl.workbook.protection.WorkbookProtection",
        "openpyxl.workbook.smart_tags.SmartTagList",
        "openpyxl.workbook.smart_tags.SmartTagProperties",
        "openpyxl.workbook.views.BookView",
        "openpyxl.workbook.views.CustomWorkbookView",
        "openpyxl.workbook.web.WebPublishObjectList",
        "openpyxl.workbook.web.WebPublishing",
        "openpyxl.worksheet._read_only.ReadOnlyWorksheet",
        "openpyxl.worksheet._reader.WorksheetReader",
        "openpyxl.worksheet._write_only.WriteOnlyWorksheet",
        "openpyxl.worksheet._writer.WorksheetWriter",
        "openpyxl.worksheet.cell_range.MultiCellRange",
        "openpyxl.worksheet.copier.WorksheetCopy",
        "openpyxl.worksheet.dimensions.ColumnDimension",
        "openpyxl.worksheet.dimensions.RowDimension",
        "openpyxl.worksheet.dimensions.SheetFormatProperties",
        "openpyxl.worksheet.drawing.Drawing",
        "openpyxl.worksheet.filters.AutoFilter",
        "openpyxl.worksheet.formula.ArrayFormula",
        "openpyxl.worksheet.formula.DataTableFormula",
        "openpyxl.worksheet.header_footer.HeaderFooter",
        "openpyxl.worksheet.hyperlink.Hyperlink",
        "openpyxl.worksheet.merge.MergedCellRange",
        "openpyxl.worksheet.page.PageMargins",
        "openpyxl.worksheet.page.PrintPageSetup",
        "openpyxl.worksheet.print_settings.PrintArea",
        "openpyxl.worksheet.print_settings.PrintTitles",
        "openpyxl.worksheet.protection._Protected",
        "openpyxl.worksheet.protection.hash_password",
        "openpyxl.worksheet.table.Table",
        "openpyxl.worksheet.worksheet.Worksheet",
        "openpyxl.writer.excel.save_workbook",
        "openpyxl.xml.DEFUSEDXML",
        "openpyxl.xml.LXML",
        "openpyxl.xml.constants.ACTIVEX",
        "openpyxl.xml.constants.ARC_APP",
        "openpyxl.xml.constants.ARC_CONTENT_TYPES",
        "openpyxl.xml.constants.ARC_CORE",
        "openpyxl.xml.constants.ARC_CUSTOM",
        "openpyxl.xml.constants.ARC_ROOT_RELS",
        "openpyxl.xml.constants.ARC_STYLE",
        "openpyxl.xml.constants.ARC_THEME",
        "openpyxl.xml.constants.ARC_WORKBOOK",
        "openpyxl.xml.constants.ARC_WORKBOOK_RELS",
        "openpyxl.xml.constants.CHART_DRAWING_NS",
        "openpyxl.xml.constants.CHART_NS",
        "openpyxl.xml.constants.COMMENTS_NS",
        "openpyxl.xml.constants.CONTYPES_NS",
        "openpyxl.xml.constants.COREPROPS_NS",
        "openpyxl.xml.constants.CPROPS_FMTID",
        "openpyxl.xml.constants.CPROPS_TYPE",
        "openpyxl.xml.constants.CTRL",
        "openpyxl.xml.constants.CUSTOMUI_NS",
        "openpyxl.xml.constants.CUSTPROPS_NS",
        "openpyxl.xml.constants.DCORE_NS",
        "openpyxl.xml.constants.DCTERMS_NS",
        "openpyxl.xml.constants.DCTERMS_PREFIX",
        "openpyxl.xml.constants.DRAWING_NS",
        "openpyxl.xml.constants.EXT_TYPES",
        "openpyxl.xml.constants.IMAGE_NS",
        "openpyxl.xml.constants.PKG_REL_NS",
        "openpyxl.xml.constants.REL_NS",
        "openpyxl.xml.constants.SHARED_STRINGS",
        "openpyxl.xml.constants.SHEET_DRAWING_NS",
        "openpyxl.xml.constants.SHEET_MAIN_NS",
        "openpyxl.xml.constants.STYLES_TYPE",
        "openpyxl.xml.constants.THEME_TYPE",
        "openpyxl.xml.constants.VBA",
        "openpyxl.xml.constants.VTYPES_NS",
        "openpyxl.xml.constants.XLSM",
        "openpyxl.xml.constants.XLSX",
        "openpyxl.xml.constants.XLTM",
        "openpyxl.xml.constants.XLTX",
        "openpyxl.xml.constants.XML_NS",
        "openpyxl.xml.constants.XPROPS_NS",
        "openpyxl.xml.constants.XSI_NS",
        "openpyxl.xml.functions.Element",
        "openpyxl.xml.functions.QName",
        "openpyxl.xml.functions.SubElement",
        "openpyxl.xml.functions.XML_NS",
        "openpyxl.xml.functions.fromstring",
        "openpyxl.xml.functions.iterparse",
        "openpyxl.xml.functions.localname",
        "openpyxl.xml.functions.tostring",
        "openpyxl.xml.functions.whitespace",
        "openpyxl.xml.functions.xmlfile",
        "operator",
        "operator.attrgetter",
        "operator.itemgetter",
        "operator.le",
        "operator.length_hint",
        "operator.lt",
        "operator.methodcaller",
        "operator.mul",
        "optimizer.Optimizer",
        "optparse",
        "optparse.Option",
        "optparse.OptionGroup",
        "optparse.OptionParser",
        "optparse.SUPPRESS_HELP",
        "optparse.Values",
        "os",
        "os.PathLike",
        "os.fsdecode",
        "os.fspath",
        "os.getuid",
        "os.mkdir",
        "os.open",
        "os.path",
        "os.path.abspath",
        "os.path.basename",
        "os.path.commonprefix",
        "os.path.dirname",
        "os.path.isdir",
        "os.path.isfile",
        "os.path.join",
        "os.path.split",
        "os.remove",
        "os.rename",
        "os.stat",
        "os.unlink",
        "os.utime",
        "overrides.array_function_dispatch",
        "overrides.finalize_array_function_like",
        "overrides.set_module",
        "package_data.__version__",
        "packages.backports.makefile.backport_makefile",
        "packages.backports.weakref_finalize.weakref_finalize",
        "packages.six",
        "packages.six.b",
        "packages.six.integer_types",
        "packages.six.iterkeys",
        "packages.six.itervalues",
        "packages.six.moves.http_client",
        "packages.six.moves.http_client.HTTPConnection",
        "packages.six.moves.http_client.HTTPException",
        "packages.six.moves.http_client.HTTPSConnection",
        "packages.six.moves.http_client.IncompleteRead",
        "packages.six.moves.queue",
        "packages.six.moves.urllib.parse.urlencode",
        "packages.six.moves.urllib.parse.urljoin",
        "packages.six.raise_from",
        "padding.Padding",
        "padding.PaddingDimensions",
        "page.PageMargins",
        "page.PrintOptions",
        "page.PrintPageSetup",
        "pagebreak.ColBreak",
        "pagebreak.RowBreak",
        "pager.Pager",
        "pager.SystemPager",
        "palette.Palette",
        "pandas",
        "pandas.ArrowDtype",
        "pandas.Categorical",
        "pandas.CategoricalDtype",
        "pandas.CategoricalIndex",
        "pandas.DataFrame",
        "pandas.DateOffset",
        "pandas.DatetimeIndex",
        "pandas.DatetimeTZDtype",
        "pandas.ExcelWriter",
        "pandas.Float64Dtype",
        "pandas.Grouper",
        "pandas.HDFStore",
        "pandas.Index",
        "pandas.IndexSlice",
        "pandas.Interval",
        "pandas.IntervalDtype",
        "pandas.IntervalIndex",
        "pandas.MultiIndex",
        "pandas.NA",
        "pandas.NaT",
        "pandas.NamedAgg",
        "pandas.Period",
        "pandas.PeriodDtype",
        "pandas.PeriodIndex",
        "pandas.RangeIndex",
        "pandas.Series",
        "pandas.SparseDtype",
        "pandas.StringDtype",
        "pandas.Timedelta",
        "pandas.TimedeltaIndex",
        "pandas.Timestamp",
        "pandas._config.config",
        "pandas._config.config.OptionError",
        "pandas._config.config._get_option",
        "pandas._config.config._global_config",
        "pandas._config.config.describe_option",
        "pandas._config.config.get_default_val",
        "pandas._config.config.get_option",
        "pandas._config.config.is_bool",
        "pandas._config.config.is_callable",
        "pandas._config.config.is_instance_factory",
        "pandas._config.config.is_int",
        "pandas._config.config.is_nonnegative_int",
        "pandas._config.config.is_one_of_factory",
        "pandas._config.config.is_str",
        "pandas._config.config.is_text",
        "pandas._config.config.option_context",
        "pandas._config.config.options",
        "pandas._config.config.reset_option",
        "pandas._config.config.set_option",
        "pandas._config.dates",
        "pandas._config.describe_option",
        "pandas._config.detect_console_encoding",
        "pandas._config.display.detect_console_encoding",
        "pandas._config.get_option",
        "pandas._config.localization.can_set_locale",
        "pandas._config.localization.get_locales",
        "pandas._config.localization.set_locale",
        "pandas._config.option_context",
        "pandas._config.options",
        "pandas._config.reset_option",
        "pandas._config.set_option",
        "pandas._config.using_copy_on_write",
        "pandas._config.using_pyarrow_string_dtype",
        "pandas._config.warn_copy_on_write",
        "pandas._libs.Interval",
        "pandas._libs.NaT",
        "pandas._libs.NaTType",
        "pandas._libs.OutOfBoundsDatetime",
        "pandas._libs.Period",
        "pandas._libs.Timedelta",
        "pandas._libs.Timestamp",
        "pandas._libs.algos",
        "pandas._libs.algos.Infinity",
        "pandas._libs.algos.NegInfinity",
        "pandas._libs.algos.rank_1d",
        "pandas._libs.algos.unique_deltas",
        "pandas._libs.arrays.NDArrayBacked",
        "pandas._libs.byteswap.read_double_with_byteswap",
        "pandas._libs.byteswap.read_float_with_byteswap",
        "pandas._libs.byteswap.read_uint16_with_byteswap",
        "pandas._libs.byteswap.read_uint32_with_byteswap",
        "pandas._libs.byteswap.read_uint64_with_byteswap",
        "pandas._libs.groupby",
        "pandas._libs.groupby.group_cumprod",
        "pandas._libs.groupby.group_cumsum",
        "pandas._libs.groupby.group_mean",
        "pandas._libs.groupby.group_sum",
        "pandas._libs.groupby.group_var",
        "pandas._libs.hashing.hash_object_array",
        "pandas._libs.hashtable",
        "pandas._libs.hashtable.duplicated",
        "pandas._libs.hashtable.object_hash",
        "pandas._libs.hashtable.unique_label_indices",
        "pandas._libs.iNaT",
        "pandas._libs.index",
        "pandas._libs.indexing.NDFrameIndexerBase",
        "pandas._libs.internals",
        "pandas._libs.internals.BlockPlacement",
        "pandas._libs.internals.BlockValuesRefs",
        "pandas._libs.interval.Interval",
        "pandas._libs.interval.IntervalMixin",
        "pandas._libs.interval.IntervalTree",
        "pandas._libs.interval.VALID_CLOSED",
        "pandas._libs.interval.intervals_to_interval_bounds",
        "pandas._libs.join",
        "pandas._libs.join.inner_join",
        "pandas._libs.join.left_outer_join",
        "pandas._libs.json",
        "pandas._libs.json.ujson_dumps",
        "pandas._libs.json.ujson_loads",
        "pandas._libs.lib",
        "pandas._libs.lib.ensure_string_array",
        "pandas._libs.lib.i8max",
        "pandas._libs.lib.infer_dtype",
        "pandas._libs.lib.is_bool",
        "pandas._libs.lib.is_datetime_array",
        "pandas._libs.lib.is_integer",
        "pandas._libs.lib.is_list_like",
        "pandas._libs.lib.is_range_indexer",
        "pandas._libs.lib.is_string_array",
        "pandas._libs.lib.item_from_zerodim",
        "pandas._libs.lib.no_default",
        "pandas._libs.missing",
        "pandas._libs.missing.NA",
        "pandas._libs.missing.NAType",
        "pandas._libs.missing.checknull",
        "pandas._libs.missing.is_matching_na",
        "pandas._libs.ops",
        "pandas._libs.ops_dispatch.maybe_dispatch_ufunc_to_dunder_op",
        "pandas._libs.pandas_datetime",
        "pandas._libs.pandas_parser",
        "pandas._libs.parsers",
        "pandas._libs.parsers.STR_NA_VALUES",
        "pandas._libs.parsers.TextReader",
        "pandas._libs.parsers._maybe_upcast",
        "pandas._libs.parsers.na_values",
        "pandas._libs.properties",
        "pandas._libs.properties.cache_readonly",
        "pandas._libs.reshape",
        "pandas._libs.sas.Parser",
        "pandas._libs.sas.get_subheader_index",
        "pandas._libs.sparse",
        "pandas._libs.sparse.BlockIndex",
        "pandas._libs.sparse.IntIndex",
        "pandas._libs.sparse.SparseIndex",
        "pandas._libs.testing",
        "pandas._libs.tslib",
        "pandas._libs.tslibs",
        "pandas._libs.tslibs.BaseOffset",
        "pandas._libs.tslibs.IncompatibleFrequency",
        "pandas._libs.tslibs.NaT",
        "pandas._libs.tslibs.NaTType",
        "pandas._libs.tslibs.OutOfBoundsDatetime",
        "pandas._libs.tslibs.OutOfBoundsTimedelta",
        "pandas._libs.tslibs.Period",
        "pandas._libs.tslibs.Resolution",
        "pandas._libs.tslibs.Tick",
        "pandas._libs.tslibs.Timedelta",
        "pandas._libs.tslibs.Timestamp",
        "pandas._libs.tslibs.add_overflowsafe",
        "pandas._libs.tslibs.astype_overflowsafe",
        "pandas._libs.tslibs.ccalendar",
        "pandas._libs.tslibs.ccalendar.DAYS",
        "pandas._libs.tslibs.ccalendar.MONTHS",
        "pandas._libs.tslibs.ccalendar.MONTH_ALIASES",
        "pandas._libs.tslibs.ccalendar.MONTH_NUMBERS",
        "pandas._libs.tslibs.ccalendar.get_firstbday",
        "pandas._libs.tslibs.ccalendar.get_lastbday",
        "pandas._libs.tslibs.ccalendar.int_to_weekday",
        "pandas._libs.tslibs.conversion",
        "pandas._libs.tslibs.conversion.cast_from_unit_vectorized",
        "pandas._libs.tslibs.conversion.localize_pydatetime",
        "pandas._libs.tslibs.dt64arr_to_periodarr",
        "pandas._libs.tslibs.dtypes",
        "pandas._libs.tslibs.dtypes.FreqGroup",
        "pandas._libs.tslibs.dtypes.NpyDatetimeUnit",
        "pandas._libs.tslibs.dtypes.OFFSET_TO_PERIOD_FREQSTR",
        "pandas._libs.tslibs.dtypes.PeriodDtypeBase",
        "pandas._libs.tslibs.dtypes.Resolution",
        "pandas._libs.tslibs.dtypes.abbrev_to_npy_unit",
        "pandas._libs.tslibs.dtypes.freq_to_period_freqstr",
        "pandas._libs.tslibs.dtypes.periods_per_day",
        "pandas._libs.tslibs.dtypes.periods_per_second",
        "pandas._libs.tslibs.fields",
        "pandas._libs.tslibs.fields.RoundTo",
        "pandas._libs.tslibs.fields.build_field_sarray",
        "pandas._libs.tslibs.fields.get_timedelta_days",
        "pandas._libs.tslibs.fields.get_timedelta_field",
        "pandas._libs.tslibs.fields.isleapyear_arr",
        "pandas._libs.tslibs.fields.month_position_check",
        "pandas._libs.tslibs.fields.round_nsint64",
        "pandas._libs.tslibs.get_resolution",
        "pandas._libs.tslibs.get_supported_dtype",
        "pandas._libs.tslibs.get_unit_from_dtype",
        "pandas._libs.tslibs.iNaT",
        "pandas._libs.tslibs.ints_to_pydatetime",
        "pandas._libs.tslibs.ints_to_pytimedelta",
        "pandas._libs.tslibs.is_date_array_normalized",
        "pandas._libs.tslibs.is_supported_dtype",
        "pandas._libs.tslibs.is_unitless",
        "pandas._libs.tslibs.nattype.NaT",
        "pandas._libs.tslibs.nattype.NaTType",
        "pandas._libs.tslibs.nattype.iNaT",
        "pandas._libs.tslibs.nattype.nat_strings",
        "pandas._libs.tslibs.normalize_i8_timestamps",
        "pandas._libs.tslibs.np_datetime.OutOfBoundsDatetime",
        "pandas._libs.tslibs.np_datetime.OutOfBoundsTimedelta",
        "pandas._libs.tslibs.np_datetime.add_overflowsafe",
        "pandas._libs.tslibs.np_datetime.astype_overflowsafe",
        "pandas._libs.tslibs.np_datetime.compare_mismatched_resolutions",
        "pandas._libs.tslibs.np_datetime.get_supported_dtype",
        "pandas._libs.tslibs.np_datetime.is_supported_dtype",
        "pandas._libs.tslibs.np_datetime.is_unitless",
        "pandas._libs.tslibs.np_datetime.py_get_unit_from_dtype",
        "pandas._libs.tslibs.np_datetime.py_td64_to_tdstruct",
        "pandas._libs.tslibs.offsets",
        "pandas._libs.tslibs.offsets.ApplyTypeError",
        "pandas._libs.tslibs.offsets.BDay",
        "pandas._libs.tslibs.offsets.BMonthBegin",
        "pandas._libs.tslibs.offsets.BMonthEnd",
        "pandas._libs.tslibs.offsets.BQuarterBegin",
        "pandas._libs.tslibs.offsets.BQuarterEnd",
        "pandas._libs.tslibs.offsets.BYearBegin",
        "pandas._libs.tslibs.offsets.BYearEnd",
        "pandas._libs.tslibs.offsets.BaseOffset",
        "pandas._libs.tslibs.offsets.BusinessDay",
        "pandas._libs.tslibs.offsets.BusinessHour",
        "pandas._libs.tslibs.offsets.BusinessMonthBegin",
        "pandas._libs.tslibs.offsets.BusinessMonthEnd",
        "pandas._libs.tslibs.offsets.CBMonthBegin",
        "pandas._libs.tslibs.offsets.CBMonthEnd",
        "pandas._libs.tslibs.offsets.CDay",
        "pandas._libs.tslibs.offsets.CustomBusinessDay",
        "pandas._libs.tslibs.offsets.CustomBusinessHour",
        "pandas._libs.tslibs.offsets.CustomBusinessMonthBegin",
        "pandas._libs.tslibs.offsets.CustomBusinessMonthEnd",
        "pandas._libs.tslibs.offsets.DateOffset",
        "pandas._libs.tslibs.offsets.Day",
        "pandas._libs.tslibs.offsets.Easter",
        "pandas._libs.tslibs.offsets.FY5253",
        "pandas._libs.tslibs.offsets.FY5253Quarter",
        "pandas._libs.tslibs.offsets.Hour",
        "pandas._libs.tslibs.offsets.INVALID_FREQ_ERR_MSG",
        "pandas._libs.tslibs.offsets.LastWeekOfMonth",
        "pandas._libs.tslibs.offsets.Micro",
        "pandas._libs.tslibs.offsets.Milli",
        "pandas._libs.tslibs.offsets.Minute",
        "pandas._libs.tslibs.offsets.MonthBegin",
        "pandas._libs.tslibs.offsets.MonthEnd",
        "pandas._libs.tslibs.offsets.Nano",
        "pandas._libs.tslibs.offsets.QuarterBegin",
        "pandas._libs.tslibs.offsets.QuarterEnd",
        "pandas._libs.tslibs.offsets.Second",
        "pandas._libs.tslibs.offsets.SemiMonthBegin",
        "pandas._libs.tslibs.offsets.SemiMonthEnd",
        "pandas._libs.tslibs.offsets.Tick",
        "pandas._libs.tslibs.offsets.Week",
        "pandas._libs.tslibs.offsets.WeekOfMonth",
        "pandas._libs.tslibs.offsets.YearBegin",
        "pandas._libs.tslibs.offsets.YearEnd",
        "pandas._libs.tslibs.offsets._get_offset",
        "pandas._libs.tslibs.offsets._offset_map",
        "pandas._libs.tslibs.offsets.delta_to_tick",
        "pandas._libs.tslibs.offsets.prefix_mapping",
        "pandas._libs.tslibs.offsets.roll_qtrday",
        "pandas._libs.tslibs.offsets.shift_months",
        "pandas._libs.tslibs.offsets.to_offset",
        "pandas._libs.tslibs.parsing",
        "pandas._libs.tslibs.parsing.DateParseError",
        "pandas._libs.tslibs.parsing.get_rule_month",
        "pandas._libs.tslibs.parsing.guess_datetime_format",
        "pandas._libs.tslibs.parsing.parse_datetime_string_with_reso",
        "pandas._libs.tslibs.period",
        "pandas._libs.tslibs.period.DIFFERENT_FREQ",
        "pandas._libs.tslibs.period.INVALID_FREQ_ERR_MSG",
        "pandas._libs.tslibs.period.IncompatibleFrequency",
        "pandas._libs.tslibs.period.Period",
        "pandas._libs.tslibs.period.extract_ordinals",
        "pandas._libs.tslibs.period.get_period_field_arr",
        "pandas._libs.tslibs.period.period_asfreq",
        "pandas._libs.tslibs.period.period_asfreq_arr",
        "pandas._libs.tslibs.period.period_ordinal",
        "pandas._libs.tslibs.periods_per_day",
        "pandas._libs.tslibs.periods_per_second",
        "pandas._libs.tslibs.strptime",
        "pandas._libs.tslibs.strptime.array_strptime",
        "pandas._libs.tslibs.timedeltas.Timedelta",
        "pandas._libs.tslibs.timedeltas.UnitChoices",
        "pandas._libs.tslibs.timedeltas.array_to_timedelta64",
        "pandas._libs.tslibs.timedeltas.delta_to_nanoseconds",
        "pandas._libs.tslibs.timedeltas.disallow_ambiguous_unit",
        "pandas._libs.tslibs.timedeltas.floordiv_object_array",
        "pandas._libs.tslibs.timedeltas.get_unit_for_round",
        "pandas._libs.tslibs.timedeltas.ints_to_pytimedelta",
        "pandas._libs.tslibs.timedeltas.parse_timedelta_unit",
        "pandas._libs.tslibs.timedeltas.truediv_object_array",
        "pandas._libs.tslibs.timestamps.Timestamp",
        "pandas._libs.tslibs.timestamps.integer_op_not_supported",
        "pandas._libs.tslibs.timezones",
        "pandas._libs.tslibs.timezones.dateutil_gettz",
        "pandas._libs.tslibs.timezones.get_timezone",
        "pandas._libs.tslibs.timezones.maybe_get_tz",
        "pandas._libs.tslibs.timezones.tz_compare",
        "pandas._libs.tslibs.to_offset",
        "pandas._libs.tslibs.tz_compare",
        "pandas._libs.tslibs.tz_convert_from_utc",
        "pandas._libs.tslibs.tzconversion",
        "pandas._libs.tslibs.tzconversion.tz_convert_from_utc_single",
        "pandas._libs.tslibs.tzconversion.tz_localize_to_utc",
        "pandas._libs.tslibs.vectorized.dt64arr_to_periodarr",
        "pandas._libs.tslibs.vectorized.get_resolution",
        "pandas._libs.tslibs.vectorized.ints_to_pydatetime",
        "pandas._libs.tslibs.vectorized.is_date_array_normalized",
        "pandas._libs.tslibs.vectorized.normalize_i8_timestamps",
        "pandas._libs.tslibs.vectorized.tz_convert_from_utc",
        "pandas._libs.window.aggregations",
        "pandas._libs.window.indexers.calculate_variable_window_bounds",
        "pandas._libs.writers",
        "pandas._libs.writers.convert_json_to_lines",
        "pandas._libs.writers.max_len_string_array",
        "pandas._testing",
        "pandas._testing._hypothesis.DATETIME_IN_PD_TIMESTAMP_RANGE_NO_TZ",
        "pandas._testing._hypothesis.DATETIME_JAN_1_1900_OPTIONAL_TZ",
        "pandas._testing._hypothesis.DATETIME_NO_TZ",
        "pandas._testing._hypothesis.INT_NEG_999_TO_POS_999",
        "pandas._testing._hypothesis.OPTIONAL_ONE_OF_ALL",
        "pandas._testing._hypothesis.YQM_OFFSET",
        "pandas._testing._io.round_trip_localpath",
        "pandas._testing._io.round_trip_pathlib",
        "pandas._testing._io.round_trip_pickle",
        "pandas._testing._io.write_to_compressed",
        "pandas._testing._warnings.assert_produces_warning",
        "pandas._testing._warnings.maybe_produces_warning",
        "pandas._testing.assert_extension_array_equal",
        "pandas._testing.assert_frame_equal",
        "pandas._testing.assert_index_equal",
        "pandas._testing.assert_produces_warning",
        "pandas._testing.assert_series_equal",
        "pandas._testing.asserters.assert_almost_equal",
        "pandas._testing.asserters.assert_attr_equal",
        "pandas._testing.asserters.assert_categorical_equal",
        "pandas._testing.asserters.assert_class_equal",
        "pandas._testing.asserters.assert_contains_all",
        "pandas._testing.asserters.assert_copy",
        "pandas._testing.asserters.assert_datetime_array_equal",
        "pandas._testing.asserters.assert_dict_equal",
        "pandas._testing.asserters.assert_equal",
        "pandas._testing.asserters.assert_extension_array_equal",
        "pandas._testing.asserters.assert_frame_equal",
        "pandas._testing.asserters.assert_index_equal",
        "pandas._testing.asserters.assert_indexing_slices_equivalent",
        "pandas._testing.asserters.assert_interval_array_equal",
        "pandas._testing.asserters.assert_is_sorted",
        "pandas._testing.asserters.assert_is_valid_plot_return_object",
        "pandas._testing.asserters.assert_metadata_equivalent",
        "pandas._testing.asserters.assert_numpy_array_equal",
        "pandas._testing.asserters.assert_period_array_equal",
        "pandas._testing.asserters.assert_series_equal",
        "pandas._testing.asserters.assert_sp_array_equal",
        "pandas._testing.asserters.assert_timedelta_array_equal",
        "pandas._testing.asserters.raise_assert_detail",
        "pandas._testing.compat.get_dtype",
        "pandas._testing.compat.get_obj",
        "pandas._testing.contexts.assert_cow_warning",
        "pandas._testing.contexts.decompress_file",
        "pandas._testing.contexts.ensure_clean",
        "pandas._testing.contexts.raises_chained_assignment_error",
        "pandas._testing.contexts.set_timezone",
        "pandas._testing.contexts.use_numexpr",
        "pandas._testing.contexts.with_csv_dialect",
        "pandas._typing.AggFuncType",
        "pandas._typing.AggFuncTypeBase",
        "pandas._typing.AggFuncTypeDict",
        "pandas._typing.AggObjType",
        "pandas._typing.AlignJoin",
        "pandas._typing.AnyAll",
        "pandas._typing.AnyArrayLike",
        "pandas._typing.ArrayLike",
        "pandas._typing.AstypeArg",
        "pandas._typing.Axes",
        "pandas._typing.Axis",
        "pandas._typing.AxisInt",
        "pandas._typing.BaseBuffer",
        "pandas._typing.CSVEngine",
        "pandas._typing.ColspaceArgType",
        "pandas._typing.ColspaceType",
        "pandas._typing.CompressionDict",
        "pandas._typing.CompressionOptions",
        "pandas._typing.ConvertersArg",
        "pandas._typing.CorrelationMethod",
        "pandas._typing.DateTimeErrorChoices",
        "pandas._typing.DatetimeLikeScalar",
        "pandas._typing.DatetimeNaTType",
        "pandas._typing.DropKeep",
        "pandas._typing.Dtype",
        "pandas._typing.DtypeArg",
        "pandas._typing.DtypeBackend",
        "pandas._typing.DtypeObj",
        "pandas._typing.ExcelWriterIfSheetExists",
        "pandas._typing.F",
        "pandas._typing.FilePath",
        "pandas._typing.FillnaOptions",
        "pandas._typing.FloatFormatType",
        "pandas._typing.FormattersType",
        "pandas._typing.Frequency",
        "pandas._typing.FromDictOrient",
        "pandas._typing.FuncType",
        "pandas._typing.HTMLFlavors",
        "pandas._typing.HashableT",
        "pandas._typing.IgnoreRaise",
        "pandas._typing.IndexKeyFunc",
        "pandas._typing.IndexLabel",
        "pandas._typing.IntStrT",
        "pandas._typing.InterpolateOptions",
        "pandas._typing.IntervalClosedType",
        "pandas._typing.IntervalLeftRight",
        "pandas._typing.Iterator",
        "pandas._typing.JSONEngine",
        "pandas._typing.JSONSerializable",
        "pandas._typing.JoinHow",
        "pandas._typing.JoinValidate",
        "pandas._typing.Level",
        "pandas._typing.ListLike",
        "pandas._typing.Manager",
        "pandas._typing.Manager2D",
        "pandas._typing.MatplotlibColor",
        "pandas._typing.MergeHow",
        "pandas._typing.MergeValidate",
        "pandas._typing.MutableMappingT",
        "pandas._typing.NDFrame",
        "pandas._typing.NDFrameT",
        "pandas._typing.NaAction",
        "pandas._typing.NaPosition",
        "pandas._typing.NaTType",
        "pandas._typing.NpDtype",
        "pandas._typing.NsmallestNlargestKeep",
        "pandas._typing.NumpyIndexT",
        "pandas._typing.NumpySorter",
        "pandas._typing.NumpyValueArrayLike",
        "pandas._typing.OpenFileErrors",
        "pandas._typing.Ordered",
        "pandas._typing.ParseDatesArg",
        "pandas._typing.PlottingOrientation",
        "pandas._typing.PositionalIndexer",
        "pandas._typing.PositionalIndexer2D",
        "pandas._typing.PositionalIndexerTuple",
        "pandas._typing.PythonFuncType",
        "pandas._typing.QuantileInterpolation",
        "pandas._typing.RandomState",
        "pandas._typing.ReadBuffer",
        "pandas._typing.ReadCsvBuffer",
        "pandas._typing.ReadPickleBuffer",
        "pandas._typing.ReindexMethod",
        "pandas._typing.Renamer",
        "pandas._typing.Scalar",
        "pandas._typing.ScalarIndexer",
        "pandas._typing.ScalarLike_co",
        "pandas._typing.Self",
        "pandas._typing.SequenceIndexer",
        "pandas._typing.SequenceNotStr",
        "pandas._typing.Shape",
        "pandas._typing.SingleManager",
        "pandas._typing.SortKind",
        "pandas._typing.StorageOptions",
        "pandas._typing.Suffixes",
        "pandas._typing.T",
        "pandas._typing.TakeIndexer",
        "pandas._typing.TimeAmbiguous",
        "pandas._typing.TimeArrayLike",
        "pandas._typing.TimeGrouperOrigin",
        "pandas._typing.TimeNonexistent",
        "pandas._typing.TimeUnit",
        "pandas._typing.TimedeltaConvertibleTypes",
        "pandas._typing.TimestampConvertibleTypes",
        "pandas._typing.ToGbqIfexist",
        "pandas._typing.ToStataByteorder",
        "pandas._typing.ToTimestampHow",
        "pandas._typing.TypeGuard",
        "pandas._typing.UpdateJoin",
        "pandas._typing.UsecolsArgType",
        "pandas._typing.ValueKeyFunc",
        "pandas._typing.WindowingRankType",
        "pandas._typing.WriteBuffer",
        "pandas._typing.WriteExcelBuffer",
        "pandas._typing.XMLParsers",
        "pandas._typing.npt",
        "pandas._typing.type_t",
        "pandas._version.get_versions",
        "pandas._version_meson.__git_version__",
        "pandas._version_meson.__version__",
        "pandas.api",
        "pandas.api.extensions",
        "pandas.api.extensions.ExtensionArray",
        "pandas.api.extensions.ExtensionDtype",
        "pandas.api.extensions.no_default",
        "pandas.api.extensions.register_extension_dtype",
        "pandas.api.extensions.take",
        "pandas.api.indexers",
        "pandas.api.indexers.BaseIndexer",
        "pandas.api.indexers.FixedForwardWindowIndexer",
        "pandas.api.indexers.check_array_indexer",
        "pandas.api.interchange",
        "pandas.api.types",
        "pandas.api.types.CategoricalDtype",
        "pandas.api.types.infer_dtype",
        "pandas.api.types.is_bool_dtype",
        "pandas.api.types.is_complex_dtype",
        "pandas.api.types.is_extension_array_dtype",
        "pandas.api.types.is_float_dtype",
        "pandas.api.types.is_integer",
        "pandas.api.types.is_integer_dtype",
        "pandas.api.types.is_list_like",
        "pandas.api.types.is_numeric_dtype",
        "pandas.api.types.is_object_dtype",
        "pandas.api.types.is_scalar",
        "pandas.api.types.is_signed_integer_dtype",
        "pandas.api.types.is_string_dtype",
        "pandas.api.types.is_unsigned_integer_dtype",
        "pandas.api.types.pandas_dtype",
        "pandas.api.typing",
        "pandas.api.typing.SeriesGroupBy",
        "pandas.array",
        "pandas.arrays",
        "pandas.arrays.ArrowExtensionArray",
        "pandas.arrays.BooleanArray",
        "pandas.arrays.DatetimeArray",
        "pandas.arrays.FloatingArray",
        "pandas.arrays.IntegerArray",
        "pandas.arrays.IntervalArray",
        "pandas.arrays.NumpyExtensionArray",
        "pandas.arrays.PeriodArray",
        "pandas.arrays.SparseArray",
        "pandas.arrays.TimedeltaArray",
        "pandas.bdate_range",
        "pandas.compat",
        "pandas.compat.IS64",
        "pandas.compat.ISMUSL",
        "pandas.compat.PY310",
        "pandas.compat.PY311",
        "pandas.compat.PY312",
        "pandas.compat.PYPY",
        "pandas.compat._constants.IS64",
        "pandas.compat._constants.ISMUSL",
        "pandas.compat._constants.PY310",
        "pandas.compat._constants.PY311",
        "pandas.compat._constants.PY312",
        "pandas.compat._constants.PYPY",
        "pandas.compat._constants.REF_COUNT",
        "pandas.compat._optional.VERSIONS",
        "pandas.compat._optional.get_version",
        "pandas.compat._optional.import_optional_dependency",
        "pandas.compat.compressors",
        "pandas.compat.compressors.flatten_buffer",
        "pandas.compat.get_bz2_file",
        "pandas.compat.get_lzma_file",
        "pandas.compat.is_ci_environment",
        "pandas.compat.is_numpy_dev",
        "pandas.compat.is_platform_arm",
        "pandas.compat.is_platform_linux",
        "pandas.compat.is_platform_little_endian",
        "pandas.compat.is_platform_mac",
        "pandas.compat.is_platform_power",
        "pandas.compat.is_platform_windows",
        "pandas.compat.numpy.function",
        "pandas.compat.numpy.is_numpy_dev",
        "pandas.compat.numpy.np_long",
        "pandas.compat.numpy.np_version_gt2",
        "pandas.compat.numpy.np_version_gte1p24",
        "pandas.compat.numpy.np_version_gte1p24p3",
        "pandas.compat.numpy.np_version_gte1p25",
        "pandas.compat.numpy.np_version_lt1p23",
        "pandas.compat.pa_version_under10p1",
        "pandas.compat.pa_version_under11p0",
        "pandas.compat.pa_version_under13p0",
        "pandas.compat.pa_version_under14p0",
        "pandas.compat.pa_version_under14p1",
        "pandas.compat.pickle_compat",
        "pandas.compat.pickle_compat.patch_pickle",
        "pandas.compat.pyarrow.pa_version_under10p1",
        "pandas.compat.pyarrow.pa_version_under11p0",
        "pandas.compat.pyarrow.pa_version_under12p0",
        "pandas.compat.pyarrow.pa_version_under13p0",
        "pandas.compat.pyarrow.pa_version_under14p0",
        "pandas.compat.pyarrow.pa_version_under14p1",
        "pandas.compat.pyarrow.pa_version_under15p0",
        "pandas.compat.pyarrow.pa_version_under16p0",
        "pandas.compat.pyarrow.pa_version_under17p0",
        "pandas.compat.set_function_name",
        "pandas.concat",
        "pandas.core._numba.executor",
        "pandas.core._numba.executor.generate_apply_looper",
        "pandas.core._numba.extensions.maybe_cast_str",
        "pandas.core._numba.extensions.set_numba_data",
        "pandas.core._numba.kernels.grouped_mean",
        "pandas.core._numba.kernels.grouped_min_max",
        "pandas.core._numba.kernels.grouped_sum",
        "pandas.core._numba.kernels.grouped_var",
        "pandas.core._numba.kernels.mean_.grouped_mean",
        "pandas.core._numba.kernels.mean_.sliding_mean",
        "pandas.core._numba.kernels.min_max_.grouped_min_max",
        "pandas.core._numba.kernels.min_max_.sliding_min_max",
        "pandas.core._numba.kernels.shared.is_monotonic_increasing",
        "pandas.core._numba.kernels.sliding_mean",
        "pandas.core._numba.kernels.sliding_min_max",
        "pandas.core._numba.kernels.sliding_sum",
        "pandas.core._numba.kernels.sliding_var",
        "pandas.core._numba.kernels.sum_.grouped_kahan_sum",
        "pandas.core._numba.kernels.sum_.grouped_sum",
        "pandas.core._numba.kernels.sum_.sliding_sum",
        "pandas.core._numba.kernels.var_.grouped_var",
        "pandas.core._numba.kernels.var_.sliding_var",
        "pandas.core.accessor",
        "pandas.core.accessor.CachedAccessor",
        "pandas.core.accessor.DirNamesMixin",
        "pandas.core.accessor.PandasDelegate",
        "pandas.core.accessor.delegate_names",
        "pandas.core.accessor.register_dataframe_accessor",
        "pandas.core.accessor.register_index_accessor",
        "pandas.core.accessor.register_series_accessor",
        "pandas.core.algorithms",
        "pandas.core.algorithms.duplicated",
        "pandas.core.algorithms.factorize",
        "pandas.core.algorithms.factorize_array",
        "pandas.core.algorithms.isin",
        "pandas.core.algorithms.map_array",
        "pandas.core.algorithms.mode",
        "pandas.core.algorithms.rank",
        "pandas.core.algorithms.safe_sort",
        "pandas.core.algorithms.take",
        "pandas.core.algorithms.take_nd",
        "pandas.core.algorithms.unique",
        "pandas.core.algorithms.unique1d",
        "pandas.core.algorithms.value_counts",
        "pandas.core.algorithms.value_counts_internal",
        "pandas.core.api.ArrowDtype",
        "pandas.core.api.BooleanDtype",
        "pandas.core.api.Categorical",
        "pandas.core.api.CategoricalDtype",
        "pandas.core.api.CategoricalIndex",
        "pandas.core.api.DataFrame",
        "pandas.core.api.DateOffset",
        "pandas.core.api.DatetimeIndex",
        "pandas.core.api.DatetimeTZDtype",
        "pandas.core.api.Flags",
        "pandas.core.api.Float32Dtype",
        "pandas.core.api.Float64Dtype",
        "pandas.core.api.Grouper",
        "pandas.core.api.Index",
        "pandas.core.api.IndexSlice",
        "pandas.core.api.Int16Dtype",
        "pandas.core.api.Int32Dtype",
        "pandas.core.api.Int64Dtype",
        "pandas.core.api.Int8Dtype",
        "pandas.core.api.Interval",
        "pandas.core.api.IntervalDtype",
        "pandas.core.api.IntervalIndex",
        "pandas.core.api.MultiIndex",
        "pandas.core.api.NA",
        "pandas.core.api.NaT",
        "pandas.core.api.NamedAgg",
        "pandas.core.api.Period",
        "pandas.core.api.PeriodDtype",
        "pandas.core.api.PeriodIndex",
        "pandas.core.api.RangeIndex",
        "pandas.core.api.Series",
        "pandas.core.api.StringDtype",
        "pandas.core.api.Timedelta",
        "pandas.core.api.TimedeltaIndex",
        "pandas.core.api.Timestamp",
        "pandas.core.api.UInt16Dtype",
        "pandas.core.api.UInt32Dtype",
        "pandas.core.api.UInt64Dtype",
        "pandas.core.api.UInt8Dtype",
        "pandas.core.api.array",
        "pandas.core.api.bdate_range",
        "pandas.core.api.date_range",
        "pandas.core.api.factorize",
        "pandas.core.api.interval_range",
        "pandas.core.api.isna",
        "pandas.core.api.isnull",
        "pandas.core.api.notna",
        "pandas.core.api.notnull",
        "pandas.core.api.period_range",
        "pandas.core.api.set_eng_float_format",
        "pandas.core.api.timedelta_range",
        "pandas.core.api.to_datetime",
        "pandas.core.api.to_numeric",
        "pandas.core.api.to_timedelta",
        "pandas.core.api.unique",
        "pandas.core.api.value_counts",
        "pandas.core.apply.GroupByApply",
        "pandas.core.apply.ResamplerWindowApply",
        "pandas.core.apply.SeriesApply",
        "pandas.core.apply._make_unique_kwarg_list",
        "pandas.core.apply.frame_apply",
        "pandas.core.apply.maybe_mangle_lambdas",
        "pandas.core.apply.reconstruct_and_relabel_result",
        "pandas.core.apply.reconstruct_func",
        "pandas.core.apply.validate_func_kwargs",
        "pandas.core.apply.warn_alias_replacement",
        "pandas.core.array_algos.datetimelike_accumulations",
        "pandas.core.array_algos.masked_accumulations",
        "pandas.core.array_algos.masked_reductions",
        "pandas.core.array_algos.putmask.extract_bool_array",
        "pandas.core.array_algos.putmask.putmask_inplace",
        "pandas.core.array_algos.putmask.putmask_without_repeat",
        "pandas.core.array_algos.putmask.setitem_datetimelike_compat",
        "pandas.core.array_algos.putmask.validate_putmask",
        "pandas.core.array_algos.quantile.quantile_compat",
        "pandas.core.array_algos.quantile.quantile_with_mask",
        "pandas.core.array_algos.replace.compare_or_regex_search",
        "pandas.core.array_algos.replace.replace_regex",
        "pandas.core.array_algos.replace.should_use_regex",
        "pandas.core.array_algos.take.take_1d",
        "pandas.core.array_algos.take.take_2d_multi",
        "pandas.core.array_algos.take.take_nd",
        "pandas.core.array_algos.transforms.shift",
        "pandas.core.arraylike",
        "pandas.core.arraylike.OpsMixin",
        "pandas.core.arrays.ArrowExtensionArray",
        "pandas.core.arrays.ArrowStringArray",
        "pandas.core.arrays.BaseMaskedArray",
        "pandas.core.arrays.BooleanArray",
        "pandas.core.arrays.Categorical",
        "pandas.core.arrays.DatetimeArray",
        "pandas.core.arrays.ExtensionArray",
        "pandas.core.arrays.ExtensionScalarOpsMixin",
        "pandas.core.arrays.FloatingArray",
        "pandas.core.arrays.IntegerArray",
        "pandas.core.arrays.IntervalArray",
        "pandas.core.arrays.NumpyExtensionArray",
        "pandas.core.arrays.PeriodArray",
        "pandas.core.arrays.SparseArray",
        "pandas.core.arrays.StringArray",
        "pandas.core.arrays.TimedeltaArray",
        "pandas.core.arrays._arrow_string_mixins.ArrowStringArrayMixin",
        "pandas.core.arrays._mixins.NDArrayBackedExtensionArray",
        "pandas.core.arrays._mixins.ravel_compat",
        "pandas.core.arrays._ranges.generate_regular_range",
        "pandas.core.arrays._utils.to_numpy_dtype_inference",
        "pandas.core.arrays.arrow.ArrowExtensionArray",
        "pandas.core.arrays.arrow.ListAccessor",
        "pandas.core.arrays.arrow.StructAccessor",
        "pandas.core.arrays.arrow._arrow_utils.fallback_performancewarning",
        "pandas.core.arrays.arrow._arrow_utils.pyarrow_array_to_numpy_and_mask",
        "pandas.core.arrays.arrow.accessors.ListAccessor",
        "pandas.core.arrays.arrow.accessors.StructAccessor",
        "pandas.core.arrays.arrow.array.ArrowExtensionArray",
        "pandas.core.arrays.arrow.array.to_pyarrow_type",
        "pandas.core.arrays.arrow.array.transpose_homogeneous_pyarrow",
        "pandas.core.arrays.arrow.extension_types",
        "pandas.core.arrays.arrow.extension_types.ArrowIntervalType",
        "pandas.core.arrays.arrow.extension_types.ArrowPeriodType",
        "pandas.core.arrays.base.ExtensionArray",
        "pandas.core.arrays.base.ExtensionArraySupportsAnyAll",
        "pandas.core.arrays.base.ExtensionOpsMixin",
        "pandas.core.arrays.base.ExtensionScalarOpsMixin",
        "pandas.core.arrays.base._extension_array_shared_docs",
        "pandas.core.arrays.boolean.BooleanArray",
        "pandas.core.arrays.boolean.BooleanDtype",
        "pandas.core.arrays.boolean.coerce_to_array",
        "pandas.core.arrays.categorical.Categorical",
        "pandas.core.arrays.categorical.CategoricalAccessor",
        "pandas.core.arrays.categorical.CategoricalDtype",
        "pandas.core.arrays.categorical.contains",
        "pandas.core.arrays.categorical.factorize_from_iterable",
        "pandas.core.arrays.categorical.factorize_from_iterables",
        "pandas.core.arrays.categorical.recode_for_categories",
        "pandas.core.arrays.datetimelike",
        "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "pandas.core.arrays.datetimelike.dtype_to_unit",
        "pandas.core.arrays.datetimelike.validate_periods",
        "pandas.core.arrays.datetimes",
        "pandas.core.arrays.datetimes.DatetimeArray",
        "pandas.core.arrays.datetimes._generate_range",
        "pandas.core.arrays.datetimes.maybe_convert_dtype",
        "pandas.core.arrays.datetimes.objects_to_datetime64",
        "pandas.core.arrays.datetimes.tz_to_dtype",
        "pandas.core.arrays.floating.Float32Dtype",
        "pandas.core.arrays.floating.Float64Dtype",
        "pandas.core.arrays.floating.FloatingArray",
        "pandas.core.arrays.floating.FloatingDtype",
        "pandas.core.arrays.floating.NUMPY_FLOAT_TO_DTYPE",
        "pandas.core.arrays.integer.Int16Dtype",
        "pandas.core.arrays.integer.Int32Dtype",
        "pandas.core.arrays.integer.Int64Dtype",
        "pandas.core.arrays.integer.Int8Dtype",
        "pandas.core.arrays.integer.IntegerArray",
        "pandas.core.arrays.integer.IntegerDtype",
        "pandas.core.arrays.integer.NUMPY_INT_TO_DTYPE",
        "pandas.core.arrays.integer.UInt16Dtype",
        "pandas.core.arrays.integer.UInt32Dtype",
        "pandas.core.arrays.integer.UInt64Dtype",
        "pandas.core.arrays.integer.UInt8Dtype",
        "pandas.core.arrays.interval.IntervalArray",
        "pandas.core.arrays.interval.VALID_CLOSED",
        "pandas.core.arrays.interval._interval_shared_docs",
        "pandas.core.arrays.masked.BaseMaskedArray",
        "pandas.core.arrays.masked.BaseMaskedDtype",
        "pandas.core.arrays.masked.transpose_homogeneous_masked_arrays",
        "pandas.core.arrays.numeric.NumericArray",
        "pandas.core.arrays.numeric.NumericDtype",
        "pandas.core.arrays.numpy_.NumpyExtensionArray",
        "pandas.core.arrays.period.PeriodArray",
        "pandas.core.arrays.period.period_array",
        "pandas.core.arrays.period.raise_on_incompatible",
        "pandas.core.arrays.period.validate_dtype_freq",
        "pandas.core.arrays.period_array",
        "pandas.core.arrays.sparse.BlockIndex",
        "pandas.core.arrays.sparse.IntIndex",
        "pandas.core.arrays.sparse.SparseAccessor",
        "pandas.core.arrays.sparse.SparseArray",
        "pandas.core.arrays.sparse.SparseFrameAccessor",
        "pandas.core.arrays.sparse.accessor.SparseAccessor",
        "pandas.core.arrays.sparse.accessor.SparseFrameAccessor",
        "pandas.core.arrays.sparse.array.BlockIndex",
        "pandas.core.arrays.sparse.array.IntIndex",
        "pandas.core.arrays.sparse.array.SparseArray",
        "pandas.core.arrays.sparse.array.make_sparse_index",
        "pandas.core.arrays.sparse.make_sparse_index",
        "pandas.core.arrays.sparse.scipy_sparse.coo_to_sparse_series",
        "pandas.core.arrays.sparse.scipy_sparse.sparse_series_to_coo",
        "pandas.core.arrays.string_.BaseStringArray",
        "pandas.core.arrays.string_.StringArray",
        "pandas.core.arrays.string_.StringDtype",
        "pandas.core.arrays.string_arrow.ArrowStringArray",
        "pandas.core.arrays.string_arrow.ArrowStringArrayNumpySemantics",
        "pandas.core.arrays.timedeltas.TimedeltaArray",
        "pandas.core.arrays.timedeltas.sequence_to_td64ns",
        "pandas.core.base",
        "pandas.core.base.ExtensionArray",
        "pandas.core.base.IndexOpsMixin",
        "pandas.core.base.NoNewAttributesMixin",
        "pandas.core.base.PandasObject",
        "pandas.core.base.SelectionMixin",
        "pandas.core.common",
        "pandas.core.common.maybe_make_list",
        "pandas.core.computation.align.align_terms",
        "pandas.core.computation.align.reconstruct_object",
        "pandas.core.computation.api.eval",
        "pandas.core.computation.check.NUMEXPR_INSTALLED",
        "pandas.core.computation.common.ensure_decoded",
        "pandas.core.computation.common.result_type_many",
        "pandas.core.computation.engines.ENGINES",
        "pandas.core.computation.eval._check_engine",
        "pandas.core.computation.eval.eval",
        "pandas.core.computation.expr",
        "pandas.core.computation.expr.BaseExprVisitor",
        "pandas.core.computation.expr.Expr",
        "pandas.core.computation.expr.PARSERS",
        "pandas.core.computation.expr.PandasExprVisitor",
        "pandas.core.computation.expr.PythonExprVisitor",
        "pandas.core.computation.expressions",
        "pandas.core.computation.expressions.NUMEXPR_INSTALLED",
        "pandas.core.computation.expressions.USE_NUMEXPR",
        "pandas.core.computation.ops",
        "pandas.core.computation.ops.ARITH_OPS_SYMS",
        "pandas.core.computation.ops.BOOL_OPS_SYMS",
        "pandas.core.computation.ops.BinOp",
        "pandas.core.computation.ops.CMP_OPS_SYMS",
        "pandas.core.computation.ops.Constant",
        "pandas.core.computation.ops.FuncNode",
        "pandas.core.computation.ops.LOCAL_TAG",
        "pandas.core.computation.ops.MATHOPS",
        "pandas.core.computation.ops.Op",
        "pandas.core.computation.ops.REDUCTIONS",
        "pandas.core.computation.ops.SPECIAL_CASE_ARITH_OPS_SYMS",
        "pandas.core.computation.ops.Term",
        "pandas.core.computation.ops.UNARY_OPS_SYMS",
        "pandas.core.computation.ops.UnaryOp",
        "pandas.core.computation.ops._binary_math_ops",
        "pandas.core.computation.ops._binary_ops_dict",
        "pandas.core.computation.ops._unary_math_ops",
        "pandas.core.computation.ops.is_term",
        "pandas.core.computation.parsing.clean_backtick_quoted_toks",
        "pandas.core.computation.parsing.clean_column_name",
        "pandas.core.computation.parsing.tokenize_string",
        "pandas.core.computation.pytables",
        "pandas.core.computation.pytables.PyTablesExpr",
        "pandas.core.computation.pytables.maybe_expression",
        "pandas.core.computation.scope",
        "pandas.core.computation.scope.DEFAULT_GLOBALS",
        "pandas.core.computation.scope.Scope",
        "pandas.core.computation.scope.ensure_scope",
        "pandas.core.config_init",
        "pandas.core.construction.array",
        "pandas.core.construction.ensure_wrapped_if_datetimelike",
        "pandas.core.construction.extract_array",
        "pandas.core.construction.range_to_ndarray",
        "pandas.core.construction.sanitize_array",
        "pandas.core.construction.sanitize_masked_array",
        "pandas.core.dtypes.api.*",
        "pandas.core.dtypes.api.is_list_like",
        "pandas.core.dtypes.astype.astype_array",
        "pandas.core.dtypes.astype.astype_array_safe",
        "pandas.core.dtypes.astype.astype_is_view",
        "pandas.core.dtypes.base.ExtensionDtype",
        "pandas.core.dtypes.base.StorageExtensionDtype",
        "pandas.core.dtypes.base._registry",
        "pandas.core.dtypes.base.register_extension_dtype",
        "pandas.core.dtypes.cast.LossySetitemError",
        "pandas.core.dtypes.cast.can_hold_element",
        "pandas.core.dtypes.cast.coerce_indexer_dtype",
        "pandas.core.dtypes.cast.common_dtype_categorical_compat",
        "pandas.core.dtypes.cast.construct_1d_arraylike_from_scalar",
        "pandas.core.dtypes.cast.construct_1d_object_array_from_listlike",
        "pandas.core.dtypes.cast.construct_2d_arraylike_from_scalar",
        "pandas.core.dtypes.cast.convert_dtypes",
        "pandas.core.dtypes.cast.dict_compat",
        "pandas.core.dtypes.cast.ensure_dtype_can_hold_na",
        "pandas.core.dtypes.cast.find_common_type",
        "pandas.core.dtypes.cast.find_result_type",
        "pandas.core.dtypes.cast.infer_dtype_from",
        "pandas.core.dtypes.cast.infer_dtype_from_array",
        "pandas.core.dtypes.cast.infer_dtype_from_scalar",
        "pandas.core.dtypes.cast.invalidate_string_dtypes",
        "pandas.core.dtypes.cast.is_nested_object",
        "pandas.core.dtypes.cast.maybe_box_datetimelike",
        "pandas.core.dtypes.cast.maybe_box_native",
        "pandas.core.dtypes.cast.maybe_cast_pointwise_result",
        "pandas.core.dtypes.cast.maybe_cast_to_datetime",
        "pandas.core.dtypes.cast.maybe_cast_to_integer_array",
        "pandas.core.dtypes.cast.maybe_convert_platform",
        "pandas.core.dtypes.cast.maybe_downcast_numeric",
        "pandas.core.dtypes.cast.maybe_downcast_to_dtype",
        "pandas.core.dtypes.cast.maybe_infer_to_datetimelike",
        "pandas.core.dtypes.cast.maybe_promote",
        "pandas.core.dtypes.cast.maybe_upcast_numeric_to_64bit",
        "pandas.core.dtypes.cast.np_can_hold_element",
        "pandas.core.dtypes.cast.np_find_common_type",
        "pandas.core.dtypes.common",
        "pandas.core.dtypes.common.CategoricalDtype",
        "pandas.core.dtypes.common.DT64NS_DTYPE",
        "pandas.core.dtypes.common.INT64_DTYPE",
        "pandas.core.dtypes.common.TD64NS_DTYPE",
        "pandas.core.dtypes.common.ensure_float64",
        "pandas.core.dtypes.common.ensure_int16",
        "pandas.core.dtypes.common.ensure_int32",
        "pandas.core.dtypes.common.ensure_int64",
        "pandas.core.dtypes.common.ensure_int8",
        "pandas.core.dtypes.common.ensure_object",
        "pandas.core.dtypes.common.ensure_platform_int",
        "pandas.core.dtypes.common.ensure_python_int",
        "pandas.core.dtypes.common.ensure_str",
        "pandas.core.dtypes.common.ensure_uint64",
        "pandas.core.dtypes.common.infer_dtype_from_object",
        "pandas.core.dtypes.common.is_1d_only_ea_dtype",
        "pandas.core.dtypes.common.is_all_strings",
        "pandas.core.dtypes.common.is_any_real_numeric_dtype",
        "pandas.core.dtypes.common.is_array_like",
        "pandas.core.dtypes.common.is_bool",
        "pandas.core.dtypes.common.is_bool_dtype",
        "pandas.core.dtypes.common.is_categorical_dtype",
        "pandas.core.dtypes.common.is_complex",
        "pandas.core.dtypes.common.is_complex_dtype",
        "pandas.core.dtypes.common.is_dataclass",
        "pandas.core.dtypes.common.is_datetime64_any_dtype",
        "pandas.core.dtypes.common.is_datetime64_dtype",
        "pandas.core.dtypes.common.is_datetime64_ns_dtype",
        "pandas.core.dtypes.common.is_datetime64tz_dtype",
        "pandas.core.dtypes.common.is_decimal",
        "pandas.core.dtypes.common.is_dict_like",
        "pandas.core.dtypes.common.is_dtype_equal",
        "pandas.core.dtypes.common.is_ea_or_datetimelike_dtype",
        "pandas.core.dtypes.common.is_extension_array_dtype",
        "pandas.core.dtypes.common.is_file_like",
        "pandas.core.dtypes.common.is_float",
        "pandas.core.dtypes.common.is_float_dtype",
        "pandas.core.dtypes.common.is_hashable",
        "pandas.core.dtypes.common.is_int64_dtype",
        "pandas.core.dtypes.common.is_integer",
        "pandas.core.dtypes.common.is_integer_dtype",
        "pandas.core.dtypes.common.is_interval",
        "pandas.core.dtypes.common.is_interval_dtype",
        "pandas.core.dtypes.common.is_iterator",
        "pandas.core.dtypes.common.is_list_like",
        "pandas.core.dtypes.common.is_named_tuple",
        "pandas.core.dtypes.common.is_nested_list_like",
        "pandas.core.dtypes.common.is_number",
        "pandas.core.dtypes.common.is_numeric_dtype",
        "pandas.core.dtypes.common.is_numeric_v_string_like",
        "pandas.core.dtypes.common.is_object_dtype",
        "pandas.core.dtypes.common.is_period_dtype",
        "pandas.core.dtypes.common.is_re",
        "pandas.core.dtypes.common.is_re_compilable",
        "pandas.core.dtypes.common.is_scalar",
        "pandas.core.dtypes.common.is_scipy_sparse",
        "pandas.core.dtypes.common.is_sequence",
        "pandas.core.dtypes.common.is_signed_integer_dtype",
        "pandas.core.dtypes.common.is_sparse",
        "pandas.core.dtypes.common.is_string_dtype",
        "pandas.core.dtypes.common.is_string_or_object_np_dtype",
        "pandas.core.dtypes.common.is_timedelta64_dtype",
        "pandas.core.dtypes.common.is_timedelta64_ns_dtype",
        "pandas.core.dtypes.common.is_unsigned_integer_dtype",
        "pandas.core.dtypes.common.needs_i8_conversion",
        "pandas.core.dtypes.common.pandas_dtype",
        "pandas.core.dtypes.common.validate_all_hashable",
        "pandas.core.dtypes.concat",
        "pandas.core.dtypes.concat.concat_compat",
        "pandas.core.dtypes.concat.union_categoricals",
        "pandas.core.dtypes.dtypes",
        "pandas.core.dtypes.dtypes.ArrowDtype",
        "pandas.core.dtypes.dtypes.BaseMaskedDtype",
        "pandas.core.dtypes.dtypes.CategoricalDtype",
        "pandas.core.dtypes.dtypes.CategoricalDtypeType",
        "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "pandas.core.dtypes.dtypes.ExtensionDtype",
        "pandas.core.dtypes.dtypes.IntervalDtype",
        "pandas.core.dtypes.dtypes.NumpyEADtype",
        "pandas.core.dtypes.dtypes.PandasExtensionDtype",
        "pandas.core.dtypes.dtypes.PeriodDtype",
        "pandas.core.dtypes.dtypes.SparseDtype",
        "pandas.core.dtypes.dtypes.register_extension_dtype",
        "pandas.core.dtypes.generic",
        "pandas.core.dtypes.generic.ABCCategorical",
        "pandas.core.dtypes.generic.ABCCategoricalIndex",
        "pandas.core.dtypes.generic.ABCDataFrame",
        "pandas.core.dtypes.generic.ABCDatetimeArray",
        "pandas.core.dtypes.generic.ABCDatetimeIndex",
        "pandas.core.dtypes.generic.ABCExtensionArray",
        "pandas.core.dtypes.generic.ABCIndex",
        "pandas.core.dtypes.generic.ABCIntervalIndex",
        "pandas.core.dtypes.generic.ABCMultiIndex",
        "pandas.core.dtypes.generic.ABCNDFrame",
        "pandas.core.dtypes.generic.ABCNumpyExtensionArray",
        "pandas.core.dtypes.generic.ABCPeriodIndex",
        "pandas.core.dtypes.generic.ABCRangeIndex",
        "pandas.core.dtypes.generic.ABCSeries",
        "pandas.core.dtypes.generic.ABCTimedeltaArray",
        "pandas.core.dtypes.generic.ABCTimedeltaIndex",
        "pandas.core.dtypes.inference",
        "pandas.core.dtypes.inference.is_array_like",
        "pandas.core.dtypes.inference.is_bool",
        "pandas.core.dtypes.inference.is_complex",
        "pandas.core.dtypes.inference.is_dataclass",
        "pandas.core.dtypes.inference.is_decimal",
        "pandas.core.dtypes.inference.is_dict_like",
        "pandas.core.dtypes.inference.is_file_like",
        "pandas.core.dtypes.inference.is_float",
        "pandas.core.dtypes.inference.is_hashable",
        "pandas.core.dtypes.inference.is_integer",
        "pandas.core.dtypes.inference.is_interval",
        "pandas.core.dtypes.inference.is_iterator",
        "pandas.core.dtypes.inference.is_list_like",
        "pandas.core.dtypes.inference.is_named_tuple",
        "pandas.core.dtypes.inference.is_nested_list_like",
        "pandas.core.dtypes.inference.is_number",
        "pandas.core.dtypes.inference.is_re",
        "pandas.core.dtypes.inference.is_re_compilable",
        "pandas.core.dtypes.inference.is_scalar",
        "pandas.core.dtypes.inference.is_sequence",
        "pandas.core.dtypes.inference.iterable_not_string",
        "pandas.core.dtypes.missing",
        "pandas.core.dtypes.missing._use_inf_as_na",
        "pandas.core.dtypes.missing.array_equals",
        "pandas.core.dtypes.missing.array_equivalent",
        "pandas.core.dtypes.missing.construct_1d_array_from_inferred_fill_value",
        "pandas.core.dtypes.missing.infer_fill_value",
        "pandas.core.dtypes.missing.is_valid_na_for_dtype",
        "pandas.core.dtypes.missing.isna",
        "pandas.core.dtypes.missing.isna_all",
        "pandas.core.dtypes.missing.isnull",
        "pandas.core.dtypes.missing.maybe_fill",
        "pandas.core.dtypes.missing.na_value_for_dtype",
        "pandas.core.dtypes.missing.notna",
        "pandas.core.dtypes.missing.notnull",
        "pandas.core.dtypes.missing.remove_na_arraylike",
        "pandas.core.flags.Flags",
        "pandas.core.frame.DataFrame",
        "pandas.core.frame.Series",
        "pandas.core.frame._merge_doc",
        "pandas.core.frame._shared_docs",
        "pandas.core.generic.NDFrame",
        "pandas.core.generic._shared_docs",
        "pandas.core.generic.make_doc",
        "pandas.core.groupby",
        "pandas.core.groupby.DataFrameGroupBy",
        "pandas.core.groupby.GroupBy",
        "pandas.core.groupby.Grouper",
        "pandas.core.groupby.NamedAgg",
        "pandas.core.groupby.SeriesGroupBy",
        "pandas.core.groupby.base",
        "pandas.core.groupby.base.groupby_other_methods",
        "pandas.core.groupby.base.reduction_kernels",
        "pandas.core.groupby.base.transformation_kernels",
        "pandas.core.groupby.categorical.recode_for_groupby",
        "pandas.core.groupby.generic.DataFrameGroupBy",
        "pandas.core.groupby.generic.GroupBy",
        "pandas.core.groupby.generic.NamedAgg",
        "pandas.core.groupby.generic.SeriesGroupBy",
        "pandas.core.groupby.groupby",
        "pandas.core.groupby.groupby.BaseGroupBy",
        "pandas.core.groupby.groupby.DataError",
        "pandas.core.groupby.groupby.GroupBy",
        "pandas.core.groupby.groupby.GroupByPlot",
        "pandas.core.groupby.groupby._agg_template_frame",
        "pandas.core.groupby.groupby._agg_template_series",
        "pandas.core.groupby.groupby._apply_docs",
        "pandas.core.groupby.groupby._apply_groupings_depr",
        "pandas.core.groupby.groupby._pipe_template",
        "pandas.core.groupby.groupby._transform_template",
        "pandas.core.groupby.groupby.get_groupby",
        "pandas.core.groupby.grouper",
        "pandas.core.groupby.grouper.Grouper",
        "pandas.core.groupby.grouper.Grouping",
        "pandas.core.groupby.grouper.get_grouper",
        "pandas.core.groupby.indexing.GroupByIndexingMixin",
        "pandas.core.groupby.indexing.GroupByNthSelector",
        "pandas.core.groupby.numba_",
        "pandas.core.groupby.ops",
        "pandas.core.groupby.ops.BaseGrouper",
        "pandas.core.groupby.ops.BinGrouper",
        "pandas.core.groupby.ops.WrappedCythonOp",
        "pandas.core.indexers.check_array_indexer",
        "pandas.core.indexers.check_key_length",
        "pandas.core.indexers.check_setitem_lengths",
        "pandas.core.indexers.disallow_ndim_indexing",
        "pandas.core.indexers.is_list_like_indexer",
        "pandas.core.indexers.is_scalar_indexer",
        "pandas.core.indexers.is_valid_positional_slice",
        "pandas.core.indexers.length_of_indexer",
        "pandas.core.indexers.maybe_convert_indices",
        "pandas.core.indexers.objects.BaseIndexer",
        "pandas.core.indexers.objects.ExpandingIndexer",
        "pandas.core.indexers.objects.ExponentialMovingWindowIndexer",
        "pandas.core.indexers.objects.FixedForwardWindowIndexer",
        "pandas.core.indexers.objects.FixedWindowIndexer",
        "pandas.core.indexers.objects.GroupbyIndexer",
        "pandas.core.indexers.objects.VariableOffsetWindowIndexer",
        "pandas.core.indexers.objects.VariableWindowIndexer",
        "pandas.core.indexers.unpack_1tuple",
        "pandas.core.indexers.unpack_tuple_and_ellipses",
        "pandas.core.indexers.utils.check_array_indexer",
        "pandas.core.indexers.utils.check_key_length",
        "pandas.core.indexers.utils.check_setitem_lengths",
        "pandas.core.indexers.utils.disallow_ndim_indexing",
        "pandas.core.indexers.utils.is_empty_indexer",
        "pandas.core.indexers.utils.is_list_like_indexer",
        "pandas.core.indexers.utils.is_scalar_indexer",
        "pandas.core.indexers.utils.is_valid_positional_slice",
        "pandas.core.indexers.utils.length_of_indexer",
        "pandas.core.indexers.utils.maybe_convert_indices",
        "pandas.core.indexers.utils.unpack_1tuple",
        "pandas.core.indexers.utils.unpack_tuple_and_ellipses",
        "pandas.core.indexers.utils.validate_indices",
        "pandas.core.indexers.validate_indices",
        "pandas.core.indexes.accessors.CombinedDatetimelikeProperties",
        "pandas.core.indexes.accessors.DatetimeProperties",
        "pandas.core.indexes.accessors.Properties",
        "pandas.core.indexes.api.CategoricalIndex",
        "pandas.core.indexes.api.DatetimeIndex",
        "pandas.core.indexes.api.Index",
        "pandas.core.indexes.api.IntervalIndex",
        "pandas.core.indexes.api.MultiIndex",
        "pandas.core.indexes.api.PeriodIndex",
        "pandas.core.indexes.api.RangeIndex",
        "pandas.core.indexes.api.TimedeltaIndex",
        "pandas.core.indexes.api._get_combined_index",
        "pandas.core.indexes.api.all_indexes_same",
        "pandas.core.indexes.api.default_index",
        "pandas.core.indexes.api.ensure_index",
        "pandas.core.indexes.api.ensure_index_from_sequences",
        "pandas.core.indexes.api.get_objs_combined_axis",
        "pandas.core.indexes.api.get_unanimous_names",
        "pandas.core.indexes.api.safe_sort_index",
        "pandas.core.indexes.api.union_indexes",
        "pandas.core.indexes.base",
        "pandas.core.indexes.base.Index",
        "pandas.core.indexes.base._index_shared_docs",
        "pandas.core.indexes.base._new_Index",
        "pandas.core.indexes.base.ensure_index",
        "pandas.core.indexes.base.ensure_index_from_sequences",
        "pandas.core.indexes.base.get_unanimous_names",
        "pandas.core.indexes.base.get_values_for_csv",
        "pandas.core.indexes.base.maybe_extract_name",
        "pandas.core.indexes.category.CategoricalIndex",
        "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin",
        "pandas.core.indexes.datetimes.DatetimeIndex",
        "pandas.core.indexes.datetimes.Index",
        "pandas.core.indexes.datetimes.Timestamp",
        "pandas.core.indexes.datetimes.bdate_range",
        "pandas.core.indexes.datetimes.date_range",
        "pandas.core.indexes.extension.ExtensionIndex",
        "pandas.core.indexes.extension.NDArrayBackedExtensionIndex",
        "pandas.core.indexes.extension.inherit_names",
        "pandas.core.indexes.frozen.FrozenList",
        "pandas.core.indexes.interval.Interval",
        "pandas.core.indexes.interval.IntervalIndex",
        "pandas.core.indexes.interval.interval_range",
        "pandas.core.indexes.multi.MultiIndex",
        "pandas.core.indexes.multi.maybe_droplevels",
        "pandas.core.indexes.multi.sparsify_labels",
        "pandas.core.indexes.period.Period",
        "pandas.core.indexes.period.PeriodIndex",
        "pandas.core.indexes.period._new_PeriodIndex",
        "pandas.core.indexes.period.period_range",
        "pandas.core.indexes.range.RangeIndex",
        "pandas.core.indexes.timedeltas.TimedeltaIndex",
        "pandas.core.indexes.timedeltas.timedelta_range",
        "pandas.core.indexing",
        "pandas.core.indexing.IndexSlice",
        "pandas.core.indexing.IndexingError",
        "pandas.core.indexing._iLocIndexer",
        "pandas.core.indexing._one_ellipsis_message",
        "pandas.core.indexing.check_bool_indexer",
        "pandas.core.indexing.check_dict_or_set_indexers",
        "pandas.core.interchange.buffer.PandasBuffer",
        "pandas.core.interchange.buffer.PandasBufferPyarrow",
        "pandas.core.interchange.column.PandasColumn",
        "pandas.core.interchange.dataframe.PandasDataFrameXchg",
        "pandas.core.interchange.dataframe_protocol.Buffer",
        "pandas.core.interchange.dataframe_protocol.Column",
        "pandas.core.interchange.dataframe_protocol.ColumnBuffers",
        "pandas.core.interchange.dataframe_protocol.ColumnNullType",
        "pandas.core.interchange.dataframe_protocol.DataFrame",
        "pandas.core.interchange.dataframe_protocol.DlpackDeviceType",
        "pandas.core.interchange.dataframe_protocol.DtypeKind",
        "pandas.core.interchange.from_dataframe.from_dataframe",
        "pandas.core.interchange.utils.ArrowCTypes",
        "pandas.core.interchange.utils.Endianness",
        "pandas.core.interchange.utils.dtype_to_arrow_c_fmt",
        "pandas.core.interchange.utils.maybe_rechunk",
        "pandas.core.internals",
        "pandas.core.internals.ArrayManager",
        "pandas.core.internals.Block",
        "pandas.core.internals.BlockManager",
        "pandas.core.internals.SingleArrayManager",
        "pandas.core.internals.SingleBlockManager",
        "pandas.core.internals.SingleDataManager",
        "pandas.core.internals.api",
        "pandas.core.internals.api.make_block",
        "pandas.core.internals.array_manager.ArrayManager",
        "pandas.core.internals.array_manager.SingleArrayManager",
        "pandas.core.internals.base.DataManager",
        "pandas.core.internals.base.SingleDataManager",
        "pandas.core.internals.base.ensure_np_dtype",
        "pandas.core.internals.base.interleaved_dtype",
        "pandas.core.internals.blocks.Block",
        "pandas.core.internals.blocks.BlockPlacement",
        "pandas.core.internals.blocks.COW_WARNING_GENERAL_MSG",
        "pandas.core.internals.blocks.COW_WARNING_SETITEM_MSG",
        "pandas.core.internals.blocks.DatetimeTZBlock",
        "pandas.core.internals.blocks.EABackedBlock",
        "pandas.core.internals.blocks.ExtensionBlock",
        "pandas.core.internals.blocks.NumericBlock",
        "pandas.core.internals.blocks.NumpyBlock",
        "pandas.core.internals.blocks.ObjectBlock",
        "pandas.core.internals.blocks.check_ndim",
        "pandas.core.internals.blocks.ensure_block_shape",
        "pandas.core.internals.blocks.extend_blocks",
        "pandas.core.internals.blocks.external_values",
        "pandas.core.internals.blocks.extract_pandas_array",
        "pandas.core.internals.blocks.get_block_type",
        "pandas.core.internals.blocks.maybe_coerce_values",
        "pandas.core.internals.blocks.new_block",
        "pandas.core.internals.blocks.new_block_2d",
        "pandas.core.internals.concat.concatenate_managers",
        "pandas.core.internals.concatenate_managers",
        "pandas.core.internals.construction.arrays_to_mgr",
        "pandas.core.internals.construction.convert_object_array",
        "pandas.core.internals.construction.dataclasses_to_dicts",
        "pandas.core.internals.construction.dict_to_mgr",
        "pandas.core.internals.construction.mgr_to_mgr",
        "pandas.core.internals.construction.ndarray_to_mgr",
        "pandas.core.internals.construction.nested_data_to_arrays",
        "pandas.core.internals.construction.rec_array_to_mgr",
        "pandas.core.internals.construction.reorder_arrays",
        "pandas.core.internals.construction.to_arrays",
        "pandas.core.internals.construction.treat_as_nested",
        "pandas.core.internals.make_block",
        "pandas.core.internals.managers.BlockManager",
        "pandas.core.internals.managers.SingleBlockManager",
        "pandas.core.internals.managers.create_block_manager_from_blocks",
        "pandas.core.internals.managers.create_block_manager_from_column_arrays",
        "pandas.core.internals.managers.make_na_array",
        "pandas.core.internals.ops.blockwise_all",
        "pandas.core.internals.ops.operate_blockwise",
        "pandas.core.methods.describe.describe_ndframe",
        "pandas.core.methods.selectn",
        "pandas.core.methods.to_dict.to_dict",
        "pandas.core.missing",
        "pandas.core.missing._fill_limit_area_1d",
        "pandas.core.missing.clean_fill_method",
        "pandas.core.missing.clean_reindex_fill_method",
        "pandas.core.missing.find_valid_index",
        "pandas.core.missing.isna",
        "pandas.core.nanops",
        "pandas.core.nanops.check_below_min_count",
        "pandas.core.ops",
        "pandas.core.ops.array_ops.arithmetic_op",
        "pandas.core.ops.array_ops.comp_method_OBJECT_ARRAY",
        "pandas.core.ops.array_ops.comparison_op",
        "pandas.core.ops.array_ops.fill_binop",
        "pandas.core.ops.array_ops.get_array_op",
        "pandas.core.ops.array_ops.logical_op",
        "pandas.core.ops.array_ops.maybe_prepare_scalar_for_op",
        "pandas.core.ops.array_ops.na_logical_op",
        "pandas.core.ops.common.get_op_result_name",
        "pandas.core.ops.common.unpack_zerodim_and_defer",
        "pandas.core.ops.dispatch.should_extension_dispatch",
        "pandas.core.ops.docstrings.make_flex_doc",
        "pandas.core.ops.get_op_result_name",
        "pandas.core.ops.invalid.invalid_comparison",
        "pandas.core.ops.invalid.make_invalid_op",
        "pandas.core.ops.invalid_comparison",
        "pandas.core.ops.mask_ops.kleene_and",
        "pandas.core.ops.mask_ops.kleene_or",
        "pandas.core.ops.mask_ops.kleene_xor",
        "pandas.core.ops.missing",
        "pandas.core.ops.unpack_zerodim_and_defer",
        "pandas.core.resample.DatetimeIndex",
        "pandas.core.resample.DatetimeIndexResamplerGroupby",
        "pandas.core.resample.PeriodIndexResamplerGroupby",
        "pandas.core.resample.Resampler",
        "pandas.core.resample.TimeGrouper",
        "pandas.core.resample.TimedeltaIndexResamplerGroupby",
        "pandas.core.resample._asfreq_compat",
        "pandas.core.resample._get_period_range_edges",
        "pandas.core.resample._get_timestamp_range_edges",
        "pandas.core.resample.asfreq",
        "pandas.core.resample.get_resampler",
        "pandas.core.resample.get_resampler_for_grouping",
        "pandas.core.reshape.api.concat",
        "pandas.core.reshape.api.crosstab",
        "pandas.core.reshape.api.cut",
        "pandas.core.reshape.api.from_dummies",
        "pandas.core.reshape.api.get_dummies",
        "pandas.core.reshape.api.lreshape",
        "pandas.core.reshape.api.melt",
        "pandas.core.reshape.api.merge",
        "pandas.core.reshape.api.merge_asof",
        "pandas.core.reshape.api.merge_ordered",
        "pandas.core.reshape.api.pivot",
        "pandas.core.reshape.api.pivot_table",
        "pandas.core.reshape.api.qcut",
        "pandas.core.reshape.api.wide_to_long",
        "pandas.core.reshape.concat.concat",
        "pandas.core.reshape.encoding.from_dummies",
        "pandas.core.reshape.encoding.get_dummies",
        "pandas.core.reshape.melt.lreshape",
        "pandas.core.reshape.melt.melt",
        "pandas.core.reshape.melt.wide_to_long",
        "pandas.core.reshape.merge.MergeError",
        "pandas.core.reshape.merge.get_join_indexers",
        "pandas.core.reshape.merge.get_join_indexers_non_unique",
        "pandas.core.reshape.merge.merge",
        "pandas.core.reshape.merge.merge_asof",
        "pandas.core.reshape.merge.merge_ordered",
        "pandas.core.reshape.merge.restore_dropped_levels_multijoin",
        "pandas.core.reshape.pivot.crosstab",
        "pandas.core.reshape.pivot.pivot",
        "pandas.core.reshape.pivot.pivot_table",
        "pandas.core.reshape.reshape",
        "pandas.core.reshape.reshape.stack",
        "pandas.core.reshape.reshape.stack_multiple",
        "pandas.core.reshape.reshape.stack_v3",
        "pandas.core.reshape.reshape.unstack",
        "pandas.core.reshape.tile",
        "pandas.core.reshape.tile.cut",
        "pandas.core.reshape.tile.qcut",
        "pandas.core.reshape.util.cartesian_product",
        "pandas.core.reshape.util.tile_compat",
        "pandas.core.roperator",
        "pandas.core.roperator.radd",
        "pandas.core.roperator.rand_",
        "pandas.core.roperator.rdiv",
        "pandas.core.roperator.rdivmod",
        "pandas.core.roperator.rfloordiv",
        "pandas.core.roperator.rmod",
        "pandas.core.roperator.rmul",
        "pandas.core.roperator.ror_",
        "pandas.core.roperator.rpow",
        "pandas.core.roperator.rsub",
        "pandas.core.roperator.rtruediv",
        "pandas.core.roperator.rxor",
        "pandas.core.sample",
        "pandas.core.series.Series",
        "pandas.core.shared_docs._shared_docs",
        "pandas.core.sorting._decons_group_index",
        "pandas.core.sorting.compress_group_index",
        "pandas.core.sorting.decons_obs_group_ids",
        "pandas.core.sorting.ensure_key_mapped",
        "pandas.core.sorting.get_compressed_ids",
        "pandas.core.sorting.get_flattened_list",
        "pandas.core.sorting.get_group_index",
        "pandas.core.sorting.get_group_index_sorter",
        "pandas.core.sorting.get_indexer_dict",
        "pandas.core.sorting.get_indexer_indexer",
        "pandas.core.sorting.is_int64_overflow_possible",
        "pandas.core.sorting.lexsort_indexer",
        "pandas.core.sorting.nargminmax",
        "pandas.core.sorting.nargsort",
        "pandas.core.strings.accessor.StringMethods",
        "pandas.core.strings.base.BaseStringArrayMethods",
        "pandas.core.strings.object_array.ObjectStringArrayMixin",
        "pandas.core.tools.datetimes",
        "pandas.core.tools.datetimes.start_caching_at",
        "pandas.core.tools.datetimes.to_datetime",
        "pandas.core.tools.numeric.to_numeric",
        "pandas.core.tools.timedeltas.to_timedelta",
        "pandas.core.tools.times.to_time",
        "pandas.core.util.hashing._default_hash_key",
        "pandas.core.util.hashing.combine_hash_arrays",
        "pandas.core.util.hashing.hash_array",
        "pandas.core.util.hashing.hash_pandas_object",
        "pandas.core.util.hashing.hash_tuples",
        "pandas.core.util.numba_",
        "pandas.core.util.numba_.NumbaUtilError",
        "pandas.core.util.numba_.get_jit_arguments",
        "pandas.core.util.numba_.jit_user_function",
        "pandas.core.util.numba_.maybe_use_numba",
        "pandas.core.window.Expanding",
        "pandas.core.window.ExpandingGroupby",
        "pandas.core.window.ExponentialMovingWindow",
        "pandas.core.window.ExponentialMovingWindowGroupby",
        "pandas.core.window.Rolling",
        "pandas.core.window.RollingGroupby",
        "pandas.core.window.Window",
        "pandas.core.window.common.flex_binary_moment",
        "pandas.core.window.common.zsqrt",
        "pandas.core.window.doc._shared_docs",
        "pandas.core.window.doc.create_section_header",
        "pandas.core.window.doc.kwargs_numeric_only",
        "pandas.core.window.doc.kwargs_scipy",
        "pandas.core.window.doc.numba_notes",
        "pandas.core.window.doc.template_header",
        "pandas.core.window.doc.template_returns",
        "pandas.core.window.doc.template_see_also",
        "pandas.core.window.doc.window_agg_numba_parameters",
        "pandas.core.window.doc.window_apply_parameters",
        "pandas.core.window.ewm.ExponentialMovingWindow",
        "pandas.core.window.ewm.ExponentialMovingWindowGroupby",
        "pandas.core.window.expanding.Expanding",
        "pandas.core.window.expanding.ExpandingGroupby",
        "pandas.core.window.numba_.generate_manual_numpy_nan_agg_with_axis",
        "pandas.core.window.numba_.generate_numba_apply_func",
        "pandas.core.window.numba_.generate_numba_ewm_func",
        "pandas.core.window.numba_.generate_numba_ewm_table_func",
        "pandas.core.window.numba_.generate_numba_table_func",
        "pandas.core.window.online.EWMMeanState",
        "pandas.core.window.online.generate_online_numba_ewma_func",
        "pandas.core.window.rolling.BaseWindow",
        "pandas.core.window.rolling.BaseWindowGroupby",
        "pandas.core.window.rolling.Rolling",
        "pandas.core.window.rolling.RollingAndExpandingMixin",
        "pandas.core.window.rolling.RollingGroupby",
        "pandas.core.window.rolling.Window",
        "pandas.crosstab",
        "pandas.cut",
        "pandas.date_range",
        "pandas.errors",
        "pandas.errors.AbstractMethodError",
        "pandas.errors.AttributeConflictWarning",
        "pandas.errors.CSSWarning",
        "pandas.errors.CategoricalConversionWarning",
        "pandas.errors.ChainedAssignmentError",
        "pandas.errors.ClosedFileError",
        "pandas.errors.DataError",
        "pandas.errors.DatabaseError",
        "pandas.errors.DtypeWarning",
        "pandas.errors.DuplicateLabelError",
        "pandas.errors.EmptyDataError",
        "pandas.errors.IncompatibilityWarning",
        "pandas.errors.IndexingError",
        "pandas.errors.IntCastingNaNError",
        "pandas.errors.InvalidColumnName",
        "pandas.errors.InvalidComparison",
        "pandas.errors.InvalidIndexError",
        "pandas.errors.LossySetitemError",
        "pandas.errors.MergeError",
        "pandas.errors.NoBufferPresent",
        "pandas.errors.NullFrequencyError",
        "pandas.errors.NumExprClobberingError",
        "pandas.errors.NumbaUtilError",
        "pandas.errors.OutOfBoundsDatetime",
        "pandas.errors.OutOfBoundsTimedelta",
        "pandas.errors.ParserError",
        "pandas.errors.ParserWarning",
        "pandas.errors.PerformanceWarning",
        "pandas.errors.PossibleDataLossError",
        "pandas.errors.PossiblePrecisionLoss",
        "pandas.errors.PyperclipException",
        "pandas.errors.PyperclipWindowsException",
        "pandas.errors.SettingWithCopyError",
        "pandas.errors.SettingWithCopyWarning",
        "pandas.errors.SpecificationError",
        "pandas.errors.UndefinedVariableError",
        "pandas.errors.UnsortedIndexError",
        "pandas.errors.UnsupportedFunctionCall",
        "pandas.errors.ValueLabelTypeMismatch",
        "pandas.errors._chained_assignment_method_msg",
        "pandas.errors._chained_assignment_msg",
        "pandas.errors._chained_assignment_warning_method_msg",
        "pandas.errors._chained_assignment_warning_msg",
        "pandas.errors._check_cacher",
        "pandas.eval",
        "pandas.factorize",
        "pandas.from_dummies",
        "pandas.get_dummies",
        "pandas.get_option",
        "pandas.interval_range",
        "pandas.io",
        "pandas.io._util._arrow_dtype_mapping",
        "pandas.io._util.arrow_string_types_mapper",
        "pandas.io.api.ExcelFile",
        "pandas.io.api.ExcelWriter",
        "pandas.io.api.HDFStore",
        "pandas.io.api.read_clipboard",
        "pandas.io.api.read_csv",
        "pandas.io.api.read_excel",
        "pandas.io.api.read_feather",
        "pandas.io.api.read_fwf",
        "pandas.io.api.read_gbq",
        "pandas.io.api.read_hdf",
        "pandas.io.api.read_html",
        "pandas.io.api.read_json",
        "pandas.io.api.read_orc",
        "pandas.io.api.read_parquet",
        "pandas.io.api.read_pickle",
        "pandas.io.api.read_sas",
        "pandas.io.api.read_spss",
        "pandas.io.api.read_sql",
        "pandas.io.api.read_sql_query",
        "pandas.io.api.read_sql_table",
        "pandas.io.api.read_stata",
        "pandas.io.api.read_table",
        "pandas.io.api.read_xml",
        "pandas.io.api.to_pickle",
        "pandas.io.clipboard.CheckedCall",
        "pandas.io.clipboard._stringifyText",
        "pandas.io.clipboard.clipboard_get",
        "pandas.io.clipboard.clipboard_set",
        "pandas.io.clipboard.init_qt_clipboard",
        "pandas.io.clipboards",
        "pandas.io.clipboards.read_clipboard",
        "pandas.io.common",
        "pandas.io.common.IOHandles",
        "pandas.io.common.check_parent_directory",
        "pandas.io.common.dedup_names",
        "pandas.io.common.extension_to_compression",
        "pandas.io.common.file_exists",
        "pandas.io.common.file_path_to_url",
        "pandas.io.common.get_handle",
        "pandas.io.common.infer_compression",
        "pandas.io.common.is_file_like",
        "pandas.io.common.is_fsspec_url",
        "pandas.io.common.is_potential_multi_index",
        "pandas.io.common.is_url",
        "pandas.io.common.stringify_path",
        "pandas.io.common.urlopen",
        "pandas.io.common.validate_header_arg",
        "pandas.io.excel.ExcelFile",
        "pandas.io.excel.ExcelWriter",
        "pandas.io.excel._OpenpyxlWriter",
        "pandas.io.excel._XlsxWriter",
        "pandas.io.excel._base.BaseExcelReader",
        "pandas.io.excel._base.ExcelFile",
        "pandas.io.excel._base.ExcelWriter",
        "pandas.io.excel._base.inspect_excel_format",
        "pandas.io.excel._base.read_excel",
        "pandas.io.excel._calamine.CalamineReader",
        "pandas.io.excel._odfreader.ODFReader",
        "pandas.io.excel._odswriter.ODSWriter",
        "pandas.io.excel._openpyxl.OpenpyxlReader",
        "pandas.io.excel._openpyxl.OpenpyxlWriter",
        "pandas.io.excel._pyxlsb.PyxlsbReader",
        "pandas.io.excel._util._writers",
        "pandas.io.excel._util.combine_kwargs",
        "pandas.io.excel._util.fill_mi_header",
        "pandas.io.excel._util.get_default_engine",
        "pandas.io.excel._util.get_writer",
        "pandas.io.excel._util.maybe_convert_usecols",
        "pandas.io.excel._util.pop_header_name",
        "pandas.io.excel._util.register_writer",
        "pandas.io.excel._util.validate_freeze_panes",
        "pandas.io.excel._xlrd.XlrdReader",
        "pandas.io.excel._xlsxwriter.XlsxWriter",
        "pandas.io.excel.read_excel",
        "pandas.io.excel.register_writer",
        "pandas.io.feather_format.read_feather",
        "pandas.io.feather_format.to_feather",
        "pandas.io.formats",
        "pandas.io.formats._color_data.CSS4_COLORS",
        "pandas.io.formats.console",
        "pandas.io.formats.console.get_console_size",
        "pandas.io.formats.css.CSSResolver",
        "pandas.io.formats.css.CSSWarning",
        "pandas.io.formats.csvs.CSVFormatter",
        "pandas.io.formats.excel.CSSToExcelConverter",
        "pandas.io.formats.excel.CssExcelCell",
        "pandas.io.formats.excel.ExcelCell",
        "pandas.io.formats.excel.ExcelFormatter",
        "pandas.io.formats.format",
        "pandas.io.formats.format.DataFrameFormatter",
        "pandas.io.formats.format.DataFrameRenderer",
        "pandas.io.formats.format.EngFormatter",
        "pandas.io.formats.format.FloatArrayFormatter",
        "pandas.io.formats.format.format_array",
        "pandas.io.formats.format.format_percentiles",
        "pandas.io.formats.format.get_format_datetime64",
        "pandas.io.formats.format.get_format_timedelta64",
        "pandas.io.formats.format.get_level_lengths",
        "pandas.io.formats.format.save_to_buffer",
        "pandas.io.formats.format.set_eng_float_format",
        "pandas.io.formats.html.HTMLFormatter",
        "pandas.io.formats.html.NotebookFormatter",
        "pandas.io.formats.info.DataFrameInfo",
        "pandas.io.formats.info.INFO_DOCSTRING",
        "pandas.io.formats.info.SeriesInfo",
        "pandas.io.formats.info.frame_sub_kwargs",
        "pandas.io.formats.info.series_sub_kwargs",
        "pandas.io.formats.printing",
        "pandas.io.formats.printing.PrettyDict",
        "pandas.io.formats.printing.adjoin",
        "pandas.io.formats.printing.default_pprint",
        "pandas.io.formats.printing.enable_data_resource_formatter",
        "pandas.io.formats.printing.format_object_summary",
        "pandas.io.formats.printing.get_adjustment",
        "pandas.io.formats.printing.pprint_thing",
        "pandas.io.formats.printing.pprint_thing_encoded",
        "pandas.io.formats.string.StringFormatter",
        "pandas.io.formats.style",
        "pandas.io.formats.style.Styler",
        "pandas.io.formats.style_render.CSSProperties",
        "pandas.io.formats.style_render.CSSStyles",
        "pandas.io.formats.style_render.ExtFormatter",
        "pandas.io.formats.style_render.StylerRenderer",
        "pandas.io.formats.style_render.Subset",
        "pandas.io.formats.style_render.Tooltips",
        "pandas.io.formats.style_render._get_level_lengths",
        "pandas.io.formats.style_render._get_trimming_maximums",
        "pandas.io.formats.style_render._parse_latex_cell_styles",
        "pandas.io.formats.style_render._parse_latex_css_conversion",
        "pandas.io.formats.style_render._parse_latex_header_span",
        "pandas.io.formats.style_render._parse_latex_table_styles",
        "pandas.io.formats.style_render._parse_latex_table_wrapping",
        "pandas.io.formats.style_render._str_escape",
        "pandas.io.formats.style_render.format_table_styles",
        "pandas.io.formats.style_render.maybe_convert_css_to_tuples",
        "pandas.io.formats.style_render.non_reducing_slice",
        "pandas.io.formats.style_render.refactor_levels",
        "pandas.io.formats.xml.EtreeXMLFormatter",
        "pandas.io.formats.xml.LxmlXMLFormatter",
        "pandas.io.gbq",
        "pandas.io.gbq.read_gbq",
        "pandas.io.html._remove_whitespace",
        "pandas.io.html.read_html",
        "pandas.io.json",
        "pandas.io.json._json.JsonReader",
        "pandas.io.json._json.read_json",
        "pandas.io.json._json.to_json",
        "pandas.io.json._json.ujson_dumps",
        "pandas.io.json._json.ujson_loads",
        "pandas.io.json._normalize.convert_to_line_delimits",
        "pandas.io.json._normalize.json_normalize",
        "pandas.io.json._normalize.nested_to_record",
        "pandas.io.json._table_schema.as_json_table_type",
        "pandas.io.json._table_schema.build_table_schema",
        "pandas.io.json._table_schema.convert_json_field_to_pandas_type",
        "pandas.io.json._table_schema.convert_pandas_type_to_json_field",
        "pandas.io.json._table_schema.parse_table_schema",
        "pandas.io.json._table_schema.set_default_names",
        "pandas.io.json.read_json",
        "pandas.io.json.ujson_dumps",
        "pandas.io.orc.read_orc",
        "pandas.io.orc.to_orc",
        "pandas.io.parquet.FastParquetImpl",
        "pandas.io.parquet.PyArrowImpl",
        "pandas.io.parquet.get_engine",
        "pandas.io.parquet.read_parquet",
        "pandas.io.parquet.to_parquet",
        "pandas.io.parsers.TextFileReader",
        "pandas.io.parsers.TextParser",
        "pandas.io.parsers.arrow_parser_wrapper.ArrowParserWrapper",
        "pandas.io.parsers.base_parser.ParserBase",
        "pandas.io.parsers.base_parser.ParserError",
        "pandas.io.parsers.base_parser.is_index_col",
        "pandas.io.parsers.base_parser.parser_defaults",
        "pandas.io.parsers.c_parser_wrapper.CParserWrapper",
        "pandas.io.parsers.c_parser_wrapper._concatenate_chunks",
        "pandas.io.parsers.c_parser_wrapper.ensure_dtype_objs",
        "pandas.io.parsers.python_parser.FixedWidthFieldParser",
        "pandas.io.parsers.python_parser.PythonParser",
        "pandas.io.parsers.read_csv",
        "pandas.io.parsers.read_fwf",
        "pandas.io.parsers.read_table",
        "pandas.io.parsers.readers",
        "pandas.io.parsers.readers.TextFileReader",
        "pandas.io.parsers.readers.TextParser",
        "pandas.io.parsers.readers._pyarrow_unsupported",
        "pandas.io.parsers.readers._python_unsupported",
        "pandas.io.parsers.readers.read_csv",
        "pandas.io.parsers.readers.read_fwf",
        "pandas.io.parsers.readers.read_table",
        "pandas.io.parsers.readers.validate_integer",
        "pandas.io.pickle.read_pickle",
        "pandas.io.pickle.to_pickle",
        "pandas.io.pytables",
        "pandas.io.pytables.HDFStore",
        "pandas.io.pytables.TableIterator",
        "pandas.io.pytables.Term",
        "pandas.io.pytables._maybe_adjust_name",
        "pandas.io.pytables.read_hdf",
        "pandas.io.sas.read_sas",
        "pandas.io.sas.sas7bdat.SAS7BDATReader",
        "pandas.io.sas.sas_constants",
        "pandas.io.sas.sas_xport.XportReader",
        "pandas.io.sas.sasreader.ReaderBase",
        "pandas.io.sas.sasreader.read_sas",
        "pandas.io.spss.read_spss",
        "pandas.io.sql",
        "pandas.io.sql.SQLAlchemyEngine",
        "pandas.io.sql.SQLDatabase",
        "pandas.io.sql.SQLiteDatabase",
        "pandas.io.sql.get_engine",
        "pandas.io.sql.pandasSQL_builder",
        "pandas.io.sql.read_sql",
        "pandas.io.sql.read_sql_query",
        "pandas.io.sql.read_sql_table",
        "pandas.io.stata",
        "pandas.io.stata.CategoricalConversionWarning",
        "pandas.io.stata.InvalidColumnName",
        "pandas.io.stata.PossiblePrecisionLoss",
        "pandas.io.stata.StataMissingValue",
        "pandas.io.stata.StataReader",
        "pandas.io.stata.StataWriter",
        "pandas.io.stata.StataWriter117",
        "pandas.io.stata.StataWriterUTF8",
        "pandas.io.stata.ValueLabelTypeMismatch",
        "pandas.io.stata.read_stata",
        "pandas.io.xml.get_data_from_filepath",
        "pandas.io.xml.preprocess_data",
        "pandas.io.xml.read_xml",
        "pandas.isna",
        "pandas.isnull",
        "pandas.json_normalize",
        "pandas.lreshape",
        "pandas.melt",
        "pandas.merge",
        "pandas.merge_asof",
        "pandas.merge_ordered",
        "pandas.notna",
        "pandas.offsets",
        "pandas.option_context",
        "pandas.options",
        "pandas.period_range",
        "pandas.plotting",
        "pandas.plotting._core.PlotAccessor",
        "pandas.plotting._core._get_plot_backend",
        "pandas.plotting._core.boxplot",
        "pandas.plotting._core.boxplot_frame",
        "pandas.plotting._core.boxplot_frame_groupby",
        "pandas.plotting._core.hist_frame",
        "pandas.plotting._core.hist_series",
        "pandas.plotting._matplotlib.PLOT_CLASSES",
        "pandas.plotting._matplotlib.boxplot.BoxPlot",
        "pandas.plotting._matplotlib.boxplot.boxplot",
        "pandas.plotting._matplotlib.boxplot.boxplot_frame",
        "pandas.plotting._matplotlib.boxplot.boxplot_frame_groupby",
        "pandas.plotting._matplotlib.converter",
        "pandas.plotting._matplotlib.converter.DatetimeConverter",
        "pandas.plotting._matplotlib.converter.TimeSeries_DateFormatter",
        "pandas.plotting._matplotlib.converter.TimeSeries_DateLocator",
        "pandas.plotting._matplotlib.converter.TimeSeries_TimedeltaFormatter",
        "pandas.plotting._matplotlib.converter.deregister",
        "pandas.plotting._matplotlib.converter.get_datevalue",
        "pandas.plotting._matplotlib.converter.register",
        "pandas.plotting._matplotlib.converter.register_pandas_matplotlib_converters",
        "pandas.plotting._matplotlib.core.AreaPlot",
        "pandas.plotting._matplotlib.core.BarPlot",
        "pandas.plotting._matplotlib.core.BarhPlot",
        "pandas.plotting._matplotlib.core.HexBinPlot",
        "pandas.plotting._matplotlib.core.LinePlot",
        "pandas.plotting._matplotlib.core.MPLPlot",
        "pandas.plotting._matplotlib.core.PiePlot",
        "pandas.plotting._matplotlib.core.ScatterPlot",
        "pandas.plotting._matplotlib.groupby.create_iter_data_given_by",
        "pandas.plotting._matplotlib.groupby.reconstruct_data_with_by",
        "pandas.plotting._matplotlib.groupby.reformat_hist_y_given_by",
        "pandas.plotting._matplotlib.hist.HistPlot",
        "pandas.plotting._matplotlib.hist.KdePlot",
        "pandas.plotting._matplotlib.hist._grouped_hist",
        "pandas.plotting._matplotlib.hist.hist_frame",
        "pandas.plotting._matplotlib.hist.hist_series",
        "pandas.plotting._matplotlib.misc.andrews_curves",
        "pandas.plotting._matplotlib.misc.autocorrelation_plot",
        "pandas.plotting._matplotlib.misc.bootstrap_plot",
        "pandas.plotting._matplotlib.misc.lag_plot",
        "pandas.plotting._matplotlib.misc.parallel_coordinates",
        "pandas.plotting._matplotlib.misc.radviz",
        "pandas.plotting._matplotlib.misc.scatter_matrix",
        "pandas.plotting._matplotlib.misc.unpack_single_str_list",
        "pandas.plotting._matplotlib.style.get_standard_colors",
        "pandas.plotting._matplotlib.timeseries.decorate_axes",
        "pandas.plotting._matplotlib.timeseries.format_dateaxis",
        "pandas.plotting._matplotlib.timeseries.maybe_convert_index",
        "pandas.plotting._matplotlib.timeseries.maybe_resample",
        "pandas.plotting._matplotlib.timeseries.use_dynamic_x",
        "pandas.plotting._matplotlib.tools",
        "pandas.plotting._matplotlib.tools.create_subplots",
        "pandas.plotting._matplotlib.tools.do_adjust_figure",
        "pandas.plotting._matplotlib.tools.flatten_axes",
        "pandas.plotting._matplotlib.tools.format_date_labels",
        "pandas.plotting._matplotlib.tools.get_all_lines",
        "pandas.plotting._matplotlib.tools.get_xlim",
        "pandas.plotting._matplotlib.tools.handle_shared_axes",
        "pandas.plotting._matplotlib.tools.maybe_adjust_figure",
        "pandas.plotting._matplotlib.tools.set_ticks_props",
        "pandas.plotting._matplotlib.tools.table",
        "pandas.plotting._misc.andrews_curves",
        "pandas.plotting._misc.autocorrelation_plot",
        "pandas.plotting._misc.bootstrap_plot",
        "pandas.plotting._misc.deregister",
        "pandas.plotting._misc.lag_plot",
        "pandas.plotting._misc.parallel_coordinates",
        "pandas.plotting._misc.plot_params",
        "pandas.plotting._misc.radviz",
        "pandas.plotting._misc.register",
        "pandas.plotting._misc.scatter_matrix",
        "pandas.plotting._misc.table",
        "pandas.plotting.andrews_curves",
        "pandas.plotting.autocorrelation_plot",
        "pandas.plotting.bootstrap_plot",
        "pandas.plotting.boxplot_frame_groupby",
        "pandas.plotting.deregister_matplotlib_converters",
        "pandas.plotting.lag_plot",
        "pandas.plotting.parallel_coordinates",
        "pandas.plotting.plot_params",
        "pandas.plotting.radviz",
        "pandas.plotting.register_matplotlib_converters",
        "pandas.qcut",
        "pandas.read_clipboard",
        "pandas.read_csv",
        "pandas.read_excel",
        "pandas.read_feather",
        "pandas.read_hdf",
        "pandas.read_html",
        "pandas.read_json",
        "pandas.read_orc",
        "pandas.read_parquet",
        "pandas.read_pickle",
        "pandas.read_sas",
        "pandas.read_stata",
        "pandas.read_table",
        "pandas.reset_option",
        "pandas.set_eng_float_format",
        "pandas.set_option",
        "pandas.testing",
        "pandas.tests.api.test_api.Base",
        "pandas.tests.apply.common.frame_transform_kernels",
        "pandas.tests.apply.common.series_transform_kernels",
        "pandas.tests.arithmetic.common.assert_cannot_add",
        "pandas.tests.arithmetic.common.assert_invalid_addsub_type",
        "pandas.tests.arithmetic.common.assert_invalid_comparison",
        "pandas.tests.arithmetic.common.get_upcast_box",
        "pandas.tests.arrays.masked_shared.ComparisonOps",
        "pandas.tests.arrays.masked_shared.NumericOps",
        "pandas.tests.base.common.allow_na_ops",
        "pandas.tests.copy_view.util.get_array",
        "pandas.tests.extension.array_with_attr.FloatAttrArray",
        "pandas.tests.extension.array_with_attr.array.FloatAttrArray",
        "pandas.tests.extension.array_with_attr.array.FloatAttrDtype",
        "pandas.tests.extension.base",
        "pandas.tests.extension.base.BaseOpsUtil",
        "pandas.tests.extension.base.accumulate.BaseAccumulateTests",
        "pandas.tests.extension.base.casting.BaseCastingTests",
        "pandas.tests.extension.base.constructors.BaseConstructorsTests",
        "pandas.tests.extension.base.dim2.Dim2CompatTests",
        "pandas.tests.extension.base.dim2.NDArrayBacked2DTests",
        "pandas.tests.extension.base.dtype.BaseDtypeTests",
        "pandas.tests.extension.base.getitem.BaseGetitemTests",
        "pandas.tests.extension.base.groupby.BaseGroupbyTests",
        "pandas.tests.extension.base.index.BaseIndexTests",
        "pandas.tests.extension.base.interface.BaseInterfaceTests",
        "pandas.tests.extension.base.io.BaseParsingTests",
        "pandas.tests.extension.base.methods.BaseMethodsTests",
        "pandas.tests.extension.base.missing.BaseMissingTests",
        "pandas.tests.extension.base.ops.BaseArithmeticOpsTests",
        "pandas.tests.extension.base.ops.BaseComparisonOpsTests",
        "pandas.tests.extension.base.ops.BaseOpsUtil",
        "pandas.tests.extension.base.ops.BaseUnaryOpsTests",
        "pandas.tests.extension.base.printing.BasePrintingTests",
        "pandas.tests.extension.base.reduce.BaseBooleanReduceTests",
        "pandas.tests.extension.base.reduce.BaseNoReduceTests",
        "pandas.tests.extension.base.reduce.BaseNumericReduceTests",
        "pandas.tests.extension.base.reduce.BaseReduceTests",
        "pandas.tests.extension.base.reshaping.BaseReshapingTests",
        "pandas.tests.extension.base.setitem.BaseSetitemTests",
        "pandas.tests.extension.date.DateArray",
        "pandas.tests.extension.date.DateDtype",
        "pandas.tests.extension.date.array.DateArray",
        "pandas.tests.extension.date.array.DateDtype",
        "pandas.tests.extension.decimal.DecimalArray",
        "pandas.tests.extension.decimal.DecimalDtype",
        "pandas.tests.extension.decimal.array.DecimalArray",
        "pandas.tests.extension.decimal.array.DecimalDtype",
        "pandas.tests.extension.decimal.array.make_data",
        "pandas.tests.extension.decimal.array.to_decimal",
        "pandas.tests.extension.decimal.to_decimal",
        "pandas.tests.extension.json.array.JSONArray",
        "pandas.tests.extension.json.array.JSONDtype",
        "pandas.tests.extension.json.array.make_data",
        "pandas.tests.extension.list.array.ListArray",
        "pandas.tests.extension.list.array.ListDtype",
        "pandas.tests.extension.list.array.make_data",
        "pandas.tests.frame.common._check_mixed_float",
        "pandas.tests.frame.common._check_mixed_int",
        "pandas.tests.frame.common.zip_frames",
        "pandas.tests.groupby.get_groupby_method_args",
        "pandas.tests.indexes.datetimes.test_timezones.FixedOffset",
        "pandas.tests.indexes.datetimes.test_timezones.fixed_off_no_name",
        "pandas.tests.indexing.common._mklbl",
        "pandas.tests.indexing.common.check_indexing_smoketest_or_raises",
        "pandas.tests.indexing.test_floats.gen_obj",
        "pandas.tests.io.generate_legacy_storage_files.create_pickle_data",
        "pandas.tests.io.pytables.common._maybe_remove",
        "pandas.tests.io.pytables.common.ensure_clean_store",
        "pandas.tests.io.pytables.common.tables",
        "pandas.tests.plotting.common._check_ax_scales",
        "pandas.tests.plotting.common._check_axes_shape",
        "pandas.tests.plotting.common._check_box_return_type",
        "pandas.tests.plotting.common._check_colors",
        "pandas.tests.plotting.common._check_data",
        "pandas.tests.plotting.common._check_grid_settings",
        "pandas.tests.plotting.common._check_has_errorbars",
        "pandas.tests.plotting.common._check_legend_labels",
        "pandas.tests.plotting.common._check_legend_marker",
        "pandas.tests.plotting.common._check_patches_all_filled",
        "pandas.tests.plotting.common._check_plot_works",
        "pandas.tests.plotting.common._check_text_labels",
        "pandas.tests.plotting.common._check_ticks_props",
        "pandas.tests.plotting.common._check_visible",
        "pandas.tests.plotting.common._flatten_visible",
        "pandas.tests.plotting.common._gen_two_subplots",
        "pandas.tests.plotting.common._unpack_cycler",
        "pandas.tests.plotting.common.get_x_axis",
        "pandas.tests.plotting.common.get_y_axis",
        "pandas.tests.strings._convert_na_value",
        "pandas.tests.strings.object_pyarrow_numpy",
        "pandas.tests.tseries.offsets.common.WeekDay",
        "pandas.tests.tseries.offsets.common.assert_is_on_offset",
        "pandas.tests.tseries.offsets.common.assert_offset_equal",
        "pandas.timedelta_range",
        "pandas.to_datetime",
        "pandas.to_numeric",
        "pandas.to_timedelta",
        "pandas.tseries",
        "pandas.tseries.api.infer_freq",
        "pandas.tseries.frequencies",
        "pandas.tseries.frequencies.get_period_alias",
        "pandas.tseries.frequencies.infer_freq",
        "pandas.tseries.frequencies.is_subperiod",
        "pandas.tseries.frequencies.is_superperiod",
        "pandas.tseries.frequencies.to_offset",
        "pandas.tseries.holiday.AbstractHolidayCalendar",
        "pandas.tseries.holiday.DateOffset",
        "pandas.tseries.holiday.EasterMonday",
        "pandas.tseries.holiday.GoodFriday",
        "pandas.tseries.holiday.Holiday",
        "pandas.tseries.holiday.HolidayCalendarFactory",
        "pandas.tseries.holiday.MO",
        "pandas.tseries.holiday.SA",
        "pandas.tseries.holiday.Timestamp",
        "pandas.tseries.holiday.USColumbusDay",
        "pandas.tseries.holiday.USFederalHolidayCalendar",
        "pandas.tseries.holiday.USLaborDay",
        "pandas.tseries.holiday.USMartinLutherKingJr",
        "pandas.tseries.holiday.USMemorialDay",
        "pandas.tseries.holiday.USPresidentsDay",
        "pandas.tseries.holiday.USThanksgivingDay",
        "pandas.tseries.holiday.after_nearest_workday",
        "pandas.tseries.holiday.before_nearest_workday",
        "pandas.tseries.holiday.get_calendar",
        "pandas.tseries.holiday.nearest_workday",
        "pandas.tseries.holiday.next_monday",
        "pandas.tseries.holiday.next_monday_or_tuesday",
        "pandas.tseries.holiday.next_workday",
        "pandas.tseries.holiday.previous_friday",
        "pandas.tseries.holiday.previous_workday",
        "pandas.tseries.holiday.sunday_to_monday",
        "pandas.tseries.holiday.weekend_to_monday",
        "pandas.tseries.offsets",
        "pandas.tseries.offsets.BDay",
        "pandas.tseries.offsets.BMonthBegin",
        "pandas.tseries.offsets.BMonthEnd",
        "pandas.tseries.offsets.BQuarterBegin",
        "pandas.tseries.offsets.BQuarterEnd",
        "pandas.tseries.offsets.BYearBegin",
        "pandas.tseries.offsets.BYearEnd",
        "pandas.tseries.offsets.BusinessDay",
        "pandas.tseries.offsets.BusinessHour",
        "pandas.tseries.offsets.CBMonthBegin",
        "pandas.tseries.offsets.CBMonthEnd",
        "pandas.tseries.offsets.CDay",
        "pandas.tseries.offsets.CustomBusinessDay",
        "pandas.tseries.offsets.CustomBusinessHour",
        "pandas.tseries.offsets.CustomBusinessMonthBegin",
        "pandas.tseries.offsets.CustomBusinessMonthEnd",
        "pandas.tseries.offsets.DateOffset",
        "pandas.tseries.offsets.Day",
        "pandas.tseries.offsets.Easter",
        "pandas.tseries.offsets.FY5253",
        "pandas.tseries.offsets.FY5253Quarter",
        "pandas.tseries.offsets.Hour",
        "pandas.tseries.offsets.LastWeekOfMonth",
        "pandas.tseries.offsets.Micro",
        "pandas.tseries.offsets.Milli",
        "pandas.tseries.offsets.Minute",
        "pandas.tseries.offsets.MonthBegin",
        "pandas.tseries.offsets.MonthEnd",
        "pandas.tseries.offsets.Nano",
        "pandas.tseries.offsets.QuarterBegin",
        "pandas.tseries.offsets.QuarterEnd",
        "pandas.tseries.offsets.Second",
        "pandas.tseries.offsets.SemiMonthBegin",
        "pandas.tseries.offsets.SemiMonthEnd",
        "pandas.tseries.offsets.Tick",
        "pandas.tseries.offsets.Week",
        "pandas.tseries.offsets.WeekOfMonth",
        "pandas.tseries.offsets.YearBegin",
        "pandas.tseries.offsets.YearEnd",
        "pandas.util._decorators.Appender",
        "pandas.util._decorators.Substitution",
        "pandas.util._decorators.cache_readonly",
        "pandas.util._decorators.deprecate",
        "pandas.util._decorators.deprecate_kwarg",
        "pandas.util._decorators.deprecate_nonkeyword_arguments",
        "pandas.util._decorators.doc",
        "pandas.util._exceptions.find_stack_level",
        "pandas.util._exceptions.rewrite_exception",
        "pandas.util._exceptions.rewrite_warning",
        "pandas.util._print_versions._get_dependency_info",
        "pandas.util._print_versions._get_sys_info",
        "pandas.util._print_versions.show_versions",
        "pandas.util._test_decorators",
        "pandas.util._tester.test",
        "pandas.util._validators.check_dtype_backend",
        "pandas.util._validators.validate_args",
        "pandas.util._validators.validate_args_and_kwargs",
        "pandas.util._validators.validate_ascending",
        "pandas.util._validators.validate_bool_kwarg",
        "pandas.util._validators.validate_endpoints",
        "pandas.util._validators.validate_fillna_kwargs",
        "pandas.util._validators.validate_inclusive",
        "pandas.util._validators.validate_insert_loc",
        "pandas.util._validators.validate_kwargs",
        "pandas.util._validators.validate_percentile",
        "pandas.util.capitalize_first_letter",
        "pandas.util.hash_array",
        "pandas.util.hash_pandas_object",
        "pandas.util.version.InvalidVersion",
        "pandas.util.version.Version",
        "pandas.wide_to_long",
        "panel.Panel",
        "parse.parse_distributions_h",
        "parser.Binding",
        "parser.OptionParser",
        "parser.Parser",
        "parser._flag_needs_value",
        "parser.parse_stream",
        "parser.split_arg_string",
        "parser.split_opt",
        "pathlib",
        "pathlib.Path",
        "pathlib.PurePath",
        "pickle",
        "pickle.PickleBuffer",
        "pickle5",
        "pickletools",
        "picture.PictureFrame",
        "picture.PictureOptions",
        "pie_chart.DoughnutChart",
        "pie_chart.PieChart",
        "pie_chart.PieChart3D",
        "pie_chart.ProjectedPieChart",
        "pip.__file__",
        "pip.__version__",
        "pip._internal.build_env.BuildEnvironment",
        "pip._internal.build_env.NoOpBuildEnvironment",
        "pip._internal.build_env.get_runnable_pip",
        "pip._internal.cache.CacheEntry",
        "pip._internal.cache.WheelCache",
        "pip._internal.cli.autocompletion.autocomplete",
        "pip._internal.cli.base_command.Command",
        "pip._internal.cli.cmdoptions",
        "pip._internal.cli.cmdoptions.make_target_python",
        "pip._internal.cli.command_context.CommandContextMixIn",
        "pip._internal.cli.index_command.IndexGroupCommand",
        "pip._internal.cli.index_command.SessionCommandMixin",
        "pip._internal.cli.main.main",
        "pip._internal.cli.main_parser.create_main_parser",
        "pip._internal.cli.main_parser.parse_command",
        "pip._internal.cli.parser.ConfigOptionParser",
        "pip._internal.cli.parser.UpdatingDefaultsHelpFormatter",
        "pip._internal.cli.progress_bars.get_download_progress_renderer",
        "pip._internal.cli.req_command.IndexGroupCommand",
        "pip._internal.cli.req_command.RequirementCommand",
        "pip._internal.cli.req_command.SessionCommandMixin",
        "pip._internal.cli.req_command.with_cleanup",
        "pip._internal.cli.spinners.RateLimiter",
        "pip._internal.cli.spinners.SpinnerInterface",
        "pip._internal.cli.spinners.open_spinner",
        "pip._internal.cli.status_codes.ERROR",
        "pip._internal.cli.status_codes.NO_MATCHES_FOUND",
        "pip._internal.cli.status_codes.PREVIOUS_BUILD_DIR_ERROR",
        "pip._internal.cli.status_codes.SUCCESS",
        "pip._internal.cli.status_codes.UNKNOWN_ERROR",
        "pip._internal.cli.status_codes.VIRTUALENV_NOT_FOUND",
        "pip._internal.commands.commands_dict",
        "pip._internal.commands.create_command",
        "pip._internal.commands.get_similar_commands",
        "pip._internal.commands.search.print_dist_installation_info",
        "pip._internal.configuration.Configuration",
        "pip._internal.configuration.ConfigurationError",
        "pip._internal.configuration.Kind",
        "pip._internal.configuration.get_configuration_files",
        "pip._internal.configuration.kinds",
        "pip._internal.distributions.base.AbstractDistribution",
        "pip._internal.distributions.installed.InstalledDistribution",
        "pip._internal.distributions.make_distribution_for_install_requirement",
        "pip._internal.distributions.sdist.SourceDistribution",
        "pip._internal.distributions.wheel.WheelDistribution",
        "pip._internal.exceptions.BadCommand",
        "pip._internal.exceptions.BestVersionAlreadyInstalled",
        "pip._internal.exceptions.CommandError",
        "pip._internal.exceptions.ConfigurationError",
        "pip._internal.exceptions.ConfigurationFileCouldNotBeLoaded",
        "pip._internal.exceptions.DiagnosticPipError",
        "pip._internal.exceptions.DirectoryUrlHashUnsupported",
        "pip._internal.exceptions.DistributionNotFound",
        "pip._internal.exceptions.ExternallyManagedEnvironment",
        "pip._internal.exceptions.HashError",
        "pip._internal.exceptions.HashErrors",
        "pip._internal.exceptions.HashMismatch",
        "pip._internal.exceptions.HashMissing",
        "pip._internal.exceptions.HashUnpinned",
        "pip._internal.exceptions.InstallationError",
        "pip._internal.exceptions.InstallationSubprocessError",
        "pip._internal.exceptions.InvalidInstalledPackage",
        "pip._internal.exceptions.InvalidPyProjectBuildRequires",
        "pip._internal.exceptions.InvalidSchemeCombination",
        "pip._internal.exceptions.InvalidWheel",
        "pip._internal.exceptions.InvalidWheelFilename",
        "pip._internal.exceptions.LegacyDistutilsInstall",
        "pip._internal.exceptions.MetadataGenerationFailed",
        "pip._internal.exceptions.MetadataInconsistent",
        "pip._internal.exceptions.MetadataInvalid",
        "pip._internal.exceptions.MissingPyProjectBuildRequires",
        "pip._internal.exceptions.NetworkConnectionError",
        "pip._internal.exceptions.NoneMetadataError",
        "pip._internal.exceptions.PipError",
        "pip._internal.exceptions.PreviousBuildDirError",
        "pip._internal.exceptions.RequirementsFileParseError",
        "pip._internal.exceptions.UninstallMissingRecord",
        "pip._internal.exceptions.UnsupportedPythonVersion",
        "pip._internal.exceptions.UnsupportedWheel",
        "pip._internal.exceptions.UserInstallationInvalid",
        "pip._internal.exceptions.VcsHashUnsupported",
        "pip._internal.index.collector.IndexContent",
        "pip._internal.index.collector.LinkCollector",
        "pip._internal.index.collector.parse_links",
        "pip._internal.index.package_finder.PackageFinder",
        "pip._internal.locations.USER_CACHE_DIR",
        "pip._internal.locations.get_bin_prefix",
        "pip._internal.locations.get_bin_user",
        "pip._internal.locations.get_major_minor_version",
        "pip._internal.locations.get_platlib",
        "pip._internal.locations.get_purelib",
        "pip._internal.locations.get_scheme",
        "pip._internal.locations.get_src_prefix",
        "pip._internal.locations.site_packages",
        "pip._internal.locations.user_site",
        "pip._internal.metadata.BaseDistribution",
        "pip._internal.metadata.FilesystemWheel",
        "pip._internal.metadata.MemoryWheel",
        "pip._internal.metadata.base.BaseDistribution",
        "pip._internal.metadata.base.BaseEntryPoint",
        "pip._internal.metadata.base.BaseEnvironment",
        "pip._internal.metadata.base.FilesystemWheel",
        "pip._internal.metadata.base.InfoPath",
        "pip._internal.metadata.base.Wheel",
        "pip._internal.metadata.get_default_environment",
        "pip._internal.metadata.get_directory_distribution",
        "pip._internal.metadata.get_environment",
        "pip._internal.metadata.get_metadata_distribution",
        "pip._internal.metadata.get_wheel_distribution",
        "pip._internal.metadata.pkg_resources",
        "pip._internal.models.candidate.InstallationCandidate",
        "pip._internal.models.direct_url.ArchiveInfo",
        "pip._internal.models.direct_url.DIRECT_URL_METADATA_NAME",
        "pip._internal.models.direct_url.DirInfo",
        "pip._internal.models.direct_url.DirectUrl",
        "pip._internal.models.direct_url.DirectUrlValidationError",
        "pip._internal.models.direct_url.VcsInfo",
        "pip._internal.models.format_control.FormatControl",
        "pip._internal.models.index.PyPI",
        "pip._internal.models.index.TestPyPI",
        "pip._internal.models.installation_report.InstallationReport",
        "pip._internal.models.link.Link",
        "pip._internal.models.link.links_equivalent",
        "pip._internal.models.scheme.SCHEME_KEYS",
        "pip._internal.models.scheme.Scheme",
        "pip._internal.models.search_scope.SearchScope",
        "pip._internal.models.selection_prefs.SelectionPreferences",
        "pip._internal.models.target_python.TargetPython",
        "pip._internal.models.wheel.Wheel",
        "pip._internal.network.auth.MultiDomainBasicAuth",
        "pip._internal.network.cache.SafeFileCache",
        "pip._internal.network.cache.is_from_cache",
        "pip._internal.network.download.BatchDownloader",
        "pip._internal.network.download.Downloader",
        "pip._internal.network.lazy_wheel.HTTPRangeRequestUnsupported",
        "pip._internal.network.lazy_wheel.dist_from_wheel_url",
        "pip._internal.network.session.PipSession",
        "pip._internal.network.utils.HEADERS",
        "pip._internal.network.utils.raise_for_status",
        "pip._internal.network.utils.response_chunks",
        "pip._internal.network.xmlrpc.PipXmlrpcTransport",
        "pip._internal.operations.build.build_tracker.BuildTracker",
        "pip._internal.operations.build.build_tracker.get_build_tracker",
        "pip._internal.operations.build.metadata.generate_metadata",
        "pip._internal.operations.build.metadata_editable.generate_editable_metadata",
        "pip._internal.operations.build.metadata_legacy.generate_metadata",
        "pip._internal.operations.build.wheel.build_wheel_pep517",
        "pip._internal.operations.build.wheel_editable.build_wheel_editable",
        "pip._internal.operations.build.wheel_legacy.build_wheel_legacy",
        "pip._internal.operations.check.ConflictDetails",
        "pip._internal.operations.check.check_install_conflicts",
        "pip._internal.operations.check.check_package_set",
        "pip._internal.operations.check.check_unsupported",
        "pip._internal.operations.check.create_package_set_from_installed",
        "pip._internal.operations.freeze.freeze",
        "pip._internal.operations.install.editable_legacy.install_editable",
        "pip._internal.operations.install.wheel.install_wheel",
        "pip._internal.operations.prepare.RequirementPreparer",
        "pip._internal.pyproject.load_pyproject_toml",
        "pip._internal.pyproject.make_pyproject_path",
        "pip._internal.req.InstallRequirement",
        "pip._internal.req.constructors.install_req_drop_extras",
        "pip._internal.req.constructors.install_req_extend_extras",
        "pip._internal.req.constructors.install_req_from_editable",
        "pip._internal.req.constructors.install_req_from_line",
        "pip._internal.req.constructors.install_req_from_link_and_ireq",
        "pip._internal.req.constructors.install_req_from_parsed_requirement",
        "pip._internal.req.constructors.install_req_from_req_string",
        "pip._internal.req.install_given_reqs",
        "pip._internal.req.parse_requirements",
        "pip._internal.req.req_file.COMMENT_RE",
        "pip._internal.req.req_file.ParsedRequirement",
        "pip._internal.req.req_file.parse_requirements",
        "pip._internal.req.req_install.InstallRequirement",
        "pip._internal.req.req_install.check_invalid_constraint_type",
        "pip._internal.req.req_install.check_legacy_setup_py_options",
        "pip._internal.req.req_set.RequirementSet",
        "pip._internal.req.req_uninstall.UninstallPathSet",
        "pip._internal.resolution.base.BaseResolver",
        "pip._internal.resolution.base.InstallRequirementProvider",
        "pip._internal.resolution.legacy.resolver",
        "pip._internal.resolution.resolvelib.provider.PipProvider",
        "pip._internal.resolution.resolvelib.reporter.PipDebuggingReporter",
        "pip._internal.resolution.resolvelib.reporter.PipReporter",
        "pip._internal.resolution.resolvelib.resolver",
        "pip._internal.self_outdated_check",
        "pip._internal.self_outdated_check.pip_self_version_check",
        "pip._internal.utils._jaraco_text.drop_comment",
        "pip._internal.utils._jaraco_text.join_continuation",
        "pip._internal.utils._jaraco_text.yield_lines",
        "pip._internal.utils._log",
        "pip._internal.utils._log.VERBOSE",
        "pip._internal.utils._log.getLogger",
        "pip._internal.utils.appdirs",
        "pip._internal.utils.compat.WINDOWS",
        "pip._internal.utils.compat.get_path_uid",
        "pip._internal.utils.compat.has_tls",
        "pip._internal.utils.compat.open_text_resource",
        "pip._internal.utils.compat.stdlib_pkgs",
        "pip._internal.utils.compatibility_tags",
        "pip._internal.utils.compatibility_tags.get_supported",
        "pip._internal.utils.compatibility_tags.version_info_to_nodot",
        "pip._internal.utils.deprecation",
        "pip._internal.utils.deprecation.DEPRECATION_MSG_PREFIX",
        "pip._internal.utils.deprecation.deprecated",
        "pip._internal.utils.direct_url_helpers.direct_url_as_pep440_direct_reference",
        "pip._internal.utils.direct_url_helpers.direct_url_for_editable",
        "pip._internal.utils.direct_url_helpers.direct_url_from_link",
        "pip._internal.utils.egg_link.egg_link_path_from_location",
        "pip._internal.utils.egg_link.egg_link_path_from_sys_path",
        "pip._internal.utils.entrypoints._wrapper",
        "pip._internal.utils.entrypoints.get_best_invocation_for_this_pip",
        "pip._internal.utils.entrypoints.get_best_invocation_for_this_python",
        "pip._internal.utils.filesystem",
        "pip._internal.utils.filesystem.adjacent_tmp_file",
        "pip._internal.utils.filesystem.check_path_owner",
        "pip._internal.utils.filesystem.replace",
        "pip._internal.utils.filesystem.test_writable_dir",
        "pip._internal.utils.filetypes.BZ2_EXTENSIONS",
        "pip._internal.utils.filetypes.TAR_EXTENSIONS",
        "pip._internal.utils.filetypes.WHEEL_EXTENSION",
        "pip._internal.utils.filetypes.XZ_EXTENSIONS",
        "pip._internal.utils.filetypes.ZIP_EXTENSIONS",
        "pip._internal.utils.filetypes.is_archive_file",
        "pip._internal.utils.glibc.libc_ver",
        "pip._internal.utils.hashes.FAVORITE_HASH",
        "pip._internal.utils.hashes.Hashes",
        "pip._internal.utils.hashes.MissingHashes",
        "pip._internal.utils.hashes.STRONG_HASHES",
        "pip._internal.utils.logging.BrokenStdoutLoggingError",
        "pip._internal.utils.logging.VERBOSE",
        "pip._internal.utils.logging.getLogger",
        "pip._internal.utils.logging.get_indentation",
        "pip._internal.utils.logging.indent_log",
        "pip._internal.utils.logging.setup_logging",
        "pip._internal.utils.logging.subprocess_logger",
        "pip._internal.utils.misc.ConfiguredBuildBackendHookCaller",
        "pip._internal.utils.misc.ExternallyManagedEnvironment",
        "pip._internal.utils.misc.HiddenText",
        "pip._internal.utils.misc.StreamWrapper",
        "pip._internal.utils.misc.ask",
        "pip._internal.utils.misc.ask_input",
        "pip._internal.utils.misc.ask_password",
        "pip._internal.utils.misc.ask_path_exists",
        "pip._internal.utils.misc.backup_dir",
        "pip._internal.utils.misc.build_netloc",
        "pip._internal.utils.misc.build_url_from_netloc",
        "pip._internal.utils.misc.check_externally_managed",
        "pip._internal.utils.misc.display_path",
        "pip._internal.utils.misc.ensure_dir",
        "pip._internal.utils.misc.enum",
        "pip._internal.utils.misc.format_size",
        "pip._internal.utils.misc.get_pip_version",
        "pip._internal.utils.misc.get_prog",
        "pip._internal.utils.misc.hash_file",
        "pip._internal.utils.misc.hide_url",
        "pip._internal.utils.misc.hide_value",
        "pip._internal.utils.misc.is_console_interactive",
        "pip._internal.utils.misc.is_installable_dir",
        "pip._internal.utils.misc.is_local",
        "pip._internal.utils.misc.normalize_path",
        "pip._internal.utils.misc.normalize_version_info",
        "pip._internal.utils.misc.pairwise",
        "pip._internal.utils.misc.parse_netloc",
        "pip._internal.utils.misc.partition",
        "pip._internal.utils.misc.protect_pip_from_modification_on_windows",
        "pip._internal.utils.misc.read_chunks",
        "pip._internal.utils.misc.redact_auth_from_requirement",
        "pip._internal.utils.misc.redact_auth_from_url",
        "pip._internal.utils.misc.remove_auth_from_url",
        "pip._internal.utils.misc.renames",
        "pip._internal.utils.misc.rmtree",
        "pip._internal.utils.misc.split_auth_from_netloc",
        "pip._internal.utils.misc.split_auth_netloc_from_url",
        "pip._internal.utils.misc.splitext",
        "pip._internal.utils.misc.strtobool",
        "pip._internal.utils.misc.tabulate",
        "pip._internal.utils.misc.warn_if_run_as_root",
        "pip._internal.utils.misc.write_output",
        "pip._internal.utils.packaging.check_requires_python",
        "pip._internal.utils.packaging.get_requirement",
        "pip._internal.utils.retry.retry",
        "pip._internal.utils.setuptools_build.make_setuptools_bdist_wheel_args",
        "pip._internal.utils.setuptools_build.make_setuptools_clean_args",
        "pip._internal.utils.setuptools_build.make_setuptools_develop_args",
        "pip._internal.utils.setuptools_build.make_setuptools_egg_info_args",
        "pip._internal.utils.subprocess.CommandArgs",
        "pip._internal.utils.subprocess.call_subprocess",
        "pip._internal.utils.subprocess.format_command_args",
        "pip._internal.utils.subprocess.make_command",
        "pip._internal.utils.subprocess.runner_with_spinner_message",
        "pip._internal.utils.temp_dir.AdjacentTempDirectory",
        "pip._internal.utils.temp_dir.TempDirectory",
        "pip._internal.utils.temp_dir.TempDirectoryTypeRegistry",
        "pip._internal.utils.temp_dir.global_tempdir_manager",
        "pip._internal.utils.temp_dir.tempdir_kinds",
        "pip._internal.utils.temp_dir.tempdir_registry",
        "pip._internal.utils.unpacking.SUPPORTED_EXTENSIONS",
        "pip._internal.utils.unpacking.current_umask",
        "pip._internal.utils.unpacking.is_within_directory",
        "pip._internal.utils.unpacking.set_extracted_file_to_default_mode_plus_executable",
        "pip._internal.utils.unpacking.unpack_file",
        "pip._internal.utils.unpacking.zip_item_is_executable",
        "pip._internal.utils.urls.path_to_url",
        "pip._internal.utils.urls.url_to_path",
        "pip._internal.utils.virtualenv.running_under_virtualenv",
        "pip._internal.utils.virtualenv.virtualenv_no_global",
        "pip._internal.utils.wheel.parse_wheel",
        "pip._internal.utils.wheel.read_wheel_metadata_file",
        "pip._internal.vcs.RemoteNotFoundError",
        "pip._internal.vcs.RemoteNotValidError",
        "pip._internal.vcs.bazaar",
        "pip._internal.vcs.git",
        "pip._internal.vcs.is_url",
        "pip._internal.vcs.mercurial",
        "pip._internal.vcs.subversion",
        "pip._internal.vcs.vcs",
        "pip._internal.vcs.versioncontrol.AuthInfo",
        "pip._internal.vcs.versioncontrol.RemoteNotFoundError",
        "pip._internal.vcs.versioncontrol.RemoteNotValidError",
        "pip._internal.vcs.versioncontrol.RevOptions",
        "pip._internal.vcs.versioncontrol.VersionControl",
        "pip._internal.vcs.versioncontrol.find_path_to_project_root_from_repo_root",
        "pip._internal.vcs.versioncontrol.is_url",
        "pip._internal.vcs.versioncontrol.make_vcs_requirement_url",
        "pip._internal.vcs.versioncontrol.vcs",
        "pip._internal.wheel_builder.build",
        "pip._internal.wheel_builder.should_build_for_install_command",
        "pip._internal.wheel_builder.should_build_for_wheel_command",
        "pip._vendor",
        "pip._vendor.cachecontrol.CacheControlAdapter",
        "pip._vendor.cachecontrol.adapter.CacheControlAdapter",
        "pip._vendor.cachecontrol.cache.BaseCache",
        "pip._vendor.cachecontrol.cache.DictCache",
        "pip._vendor.cachecontrol.cache.SeparateBodyBaseCache",
        "pip._vendor.cachecontrol.caches.SeparateBodyFileCache",
        "pip._vendor.cachecontrol.caches.file_cache.FileCache",
        "pip._vendor.cachecontrol.caches.file_cache.SeparateBodyFileCache",
        "pip._vendor.cachecontrol.caches.redis_cache.RedisCache",
        "pip._vendor.cachecontrol.controller.CacheController",
        "pip._vendor.cachecontrol.controller.PERMANENT_REDIRECT_STATUSES",
        "pip._vendor.cachecontrol.controller.logger",
        "pip._vendor.cachecontrol.filewrapper.CallbackFileWrapper",
        "pip._vendor.cachecontrol.heuristics.BaseHeuristic",
        "pip._vendor.cachecontrol.serialize.Serializer",
        "pip._vendor.cachecontrol.wrapper.CacheControl",
        "pip._vendor.certifi",
        "pip._vendor.certifi.contents",
        "pip._vendor.certifi.where",
        "pip._vendor.distlib.scripts.ScriptMaker",
        "pip._vendor.distlib.util.get_export_entry",
        "pip._vendor.distro",
        "pip._vendor.idna",
        "pip._vendor.msgpack",
        "pip._vendor.packaging.licenses._spdx.EXCEPTIONS",
        "pip._vendor.packaging.licenses._spdx.LICENSES",
        "pip._vendor.packaging.markers",
        "pip._vendor.packaging.markers.Marker",
        "pip._vendor.packaging.markers.default_environment",
        "pip._vendor.packaging.requirements",
        "pip._vendor.packaging.requirements.InvalidRequirement",
        "pip._vendor.packaging.requirements.Requirement",
        "pip._vendor.packaging.specifiers",
        "pip._vendor.packaging.specifiers.InvalidSpecifier",
        "pip._vendor.packaging.specifiers.Specifier",
        "pip._vendor.packaging.specifiers.SpecifierSet",
        "pip._vendor.packaging.tags.PythonVersion",
        "pip._vendor.packaging.tags.Tag",
        "pip._vendor.packaging.tags.compatible_tags",
        "pip._vendor.packaging.tags.cpython_tags",
        "pip._vendor.packaging.tags.generic_tags",
        "pip._vendor.packaging.tags.interpreter_name",
        "pip._vendor.packaging.tags.interpreter_version",
        "pip._vendor.packaging.tags.ios_platforms",
        "pip._vendor.packaging.tags.mac_platforms",
        "pip._vendor.packaging.tags.parse_tag",
        "pip._vendor.packaging.utils",
        "pip._vendor.packaging.utils.InvalidSdistFilename",
        "pip._vendor.packaging.utils.InvalidWheelFilename",
        "pip._vendor.packaging.utils.NormalizedName",
        "pip._vendor.packaging.utils.canonicalize_name",
        "pip._vendor.packaging.utils.canonicalize_version",
        "pip._vendor.packaging.utils.parse_sdist_filename",
        "pip._vendor.packaging.utils.parse_wheel_filename",
        "pip._vendor.packaging.version",
        "pip._vendor.packaging.version.InvalidVersion",
        "pip._vendor.packaging.version.Version",
        "pip._vendor.packaging.version._BaseVersion",
        "pip._vendor.packaging.version.parse",
        "pip._vendor.pkg_resources",
        "pip._vendor.pkg_resources.find_distributions",
        "pip._vendor.pkg_resources.find_eggs_in_zip",
        "pip._vendor.platformdirs",
        "pip._vendor.platformdirs.PlatformDirs",
        "pip._vendor.platformdirs.__version__",
        "pip._vendor.platformdirs.android.Android",
        "pip._vendor.platformdirs.android._android_folder",
        "pip._vendor.platformdirs.macos.MacOS",
        "pip._vendor.platformdirs.unix.Unix",
        "pip._vendor.platformdirs.user_cache_dir",
        "pip._vendor.platformdirs.windows.Windows",
        "pip._vendor.pygments",
        "pip._vendor.pygments.__version__",
        "pip._vendor.pygments.cmdline.main",
        "pip._vendor.pygments.console.ansiformat",
        "pip._vendor.pygments.console.codes",
        "pip._vendor.pygments.console.colorize",
        "pip._vendor.pygments.filter.Filter",
        "pip._vendor.pygments.filter.apply_filters",
        "pip._vendor.pygments.filters.FILTERS",
        "pip._vendor.pygments.filters.find_filter_class",
        "pip._vendor.pygments.filters.get_all_filters",
        "pip._vendor.pygments.filters.get_filter_by_name",
        "pip._vendor.pygments.formatter.Formatter",
        "pip._vendor.pygments.formatters.FORMATTERS",
        "pip._vendor.pygments.formatters._mapping.FORMATTERS",
        "pip._vendor.pygments.formatters.find_formatter_class",
        "pip._vendor.pygments.formatters.get_all_formatters",
        "pip._vendor.pygments.formatters.get_formatter_by_name",
        "pip._vendor.pygments.formatters.get_formatter_for_filename",
        "pip._vendor.pygments.formatters.latex.LatexEmbeddedLexer",
        "pip._vendor.pygments.formatters.latex.LatexFormatter",
        "pip._vendor.pygments.formatters.load_formatter_from_file",
        "pip._vendor.pygments.formatters.terminal.TerminalFormatter",
        "pip._vendor.pygments.formatters.terminal256.Terminal256Formatter",
        "pip._vendor.pygments.formatters.terminal256.TerminalTrueColorFormatter",
        "pip._vendor.pygments.highlight",
        "pip._vendor.pygments.lexer.DelegatingLexer",
        "pip._vendor.pygments.lexer.Lexer",
        "pip._vendor.pygments.lexer.RegexLexer",
        "pip._vendor.pygments.lexer.bygroups",
        "pip._vendor.pygments.lexer.combined",
        "pip._vendor.pygments.lexer.default",
        "pip._vendor.pygments.lexer.do_insertions",
        "pip._vendor.pygments.lexer.include",
        "pip._vendor.pygments.lexer.this",
        "pip._vendor.pygments.lexer.using",
        "pip._vendor.pygments.lexer.words",
        "pip._vendor.pygments.lexers._mapping.LEXERS",
        "pip._vendor.pygments.lexers.find_lexer_class",
        "pip._vendor.pygments.lexers.find_lexer_class_for_filename",
        "pip._vendor.pygments.lexers.get_all_lexers",
        "pip._vendor.pygments.lexers.get_lexer_by_name",
        "pip._vendor.pygments.lexers.get_lexer_for_filename",
        "pip._vendor.pygments.lexers.guess_lexer",
        "pip._vendor.pygments.lexers.guess_lexer_for_filename",
        "pip._vendor.pygments.lexers.load_lexer_from_file",
        "pip._vendor.pygments.lexers.special.TextLexer",
        "pip._vendor.pygments.modeline.get_filetype_from_buffer",
        "pip._vendor.pygments.plugin.find_plugin_filters",
        "pip._vendor.pygments.plugin.find_plugin_formatters",
        "pip._vendor.pygments.plugin.find_plugin_lexers",
        "pip._vendor.pygments.plugin.find_plugin_styles",
        "pip._vendor.pygments.regexopt.regex_opt",
        "pip._vendor.pygments.style.Style",
        "pip._vendor.pygments.style._ansimap",
        "pip._vendor.pygments.style.ansicolors",
        "pip._vendor.pygments.styles._mapping.STYLES",
        "pip._vendor.pygments.styles.get_all_styles",
        "pip._vendor.pygments.styles.get_style_by_name",
        "pip._vendor.pygments.token.Comment",
        "pip._vendor.pygments.token.Error",
        "pip._vendor.pygments.token.Generic",
        "pip._vendor.pygments.token.Keyword",
        "pip._vendor.pygments.token.Name",
        "pip._vendor.pygments.token.Number",
        "pip._vendor.pygments.token.Operator",
        "pip._vendor.pygments.token.Other",
        "pip._vendor.pygments.token.Punctuation",
        "pip._vendor.pygments.token.STANDARD_TYPES",
        "pip._vendor.pygments.token.String",
        "pip._vendor.pygments.token.Text",
        "pip._vendor.pygments.token.Token",
        "pip._vendor.pygments.token.Whitespace",
        "pip._vendor.pygments.token._TokenType",
        "pip._vendor.pygments.token.string_to_tokentype",
        "pip._vendor.pygments.unistring",
        "pip._vendor.pygments.util.ClassNotFound",
        "pip._vendor.pygments.util.Future",
        "pip._vendor.pygments.util.OptionError",
        "pip._vendor.pygments.util.UnclosingTextIOWrapper",
        "pip._vendor.pygments.util.docstring_headline",
        "pip._vendor.pygments.util.get_bool_opt",
        "pip._vendor.pygments.util.get_choice_opt",
        "pip._vendor.pygments.util.get_int_opt",
        "pip._vendor.pygments.util.get_list_opt",
        "pip._vendor.pygments.util.guess_decode",
        "pip._vendor.pygments.util.guess_decode_from_terminal",
        "pip._vendor.pygments.util.make_analysator",
        "pip._vendor.pygments.util.shebang_matches",
        "pip._vendor.pygments.util.surrogatepair",
        "pip._vendor.pygments.util.terminal_encoding",
        "pip._vendor.pyproject_hooks.BuildBackendHookCaller",
        "pip._vendor.pyproject_hooks.HookMissing",
        "pip._vendor.requests",
        "pip._vendor.requests.PreparedRequest",
        "pip._vendor.requests.Response",
        "pip._vendor.requests.adapters.BaseAdapter",
        "pip._vendor.requests.adapters.DEFAULT_POOLBLOCK",
        "pip._vendor.requests.adapters.HTTPAdapter",
        "pip._vendor.requests.auth.AuthBase",
        "pip._vendor.requests.auth.HTTPBasicAuth",
        "pip._vendor.requests.exceptions.RetryError",
        "pip._vendor.requests.exceptions.SSLError",
        "pip._vendor.requests.models.CONTENT_CHUNK_SIZE",
        "pip._vendor.requests.models.PreparedRequest",
        "pip._vendor.requests.models.Request",
        "pip._vendor.requests.models.Response",
        "pip._vendor.requests.structures.CaseInsensitiveDict",
        "pip._vendor.requests.utils.get_netrc_auth",
        "pip._vendor.resolvelib.BaseReporter",
        "pip._vendor.resolvelib.ResolutionImpossible",
        "pip._vendor.resolvelib.Resolver",
        "pip._vendor.resolvelib.providers.AbstractProvider",
        "pip._vendor.resolvelib.providers.Preference",
        "pip._vendor.resolvelib.reporters.BaseReporter",
        "pip._vendor.resolvelib.resolvers.RequirementInformation",
        "pip._vendor.resolvelib.resolvers.Result",
        "pip._vendor.resolvelib.structs.DirectedGraph",
        "pip._vendor.rich._IMPORT_CWD",
        "pip._vendor.rich._inspect.Inspect",
        "pip._vendor.rich._null_file.NULL_FILE",
        "pip._vendor.rich._null_file.NullFile",
        "pip._vendor.rich._win32_console.ENABLE_VIRTUAL_TERMINAL_PROCESSING",
        "pip._vendor.rich._win32_console.GetConsoleMode",
        "pip._vendor.rich._win32_console.GetStdHandle",
        "pip._vendor.rich._win32_console.LegacyWindowsError",
        "pip._vendor.rich._win32_console.LegacyWindowsTerm",
        "pip._vendor.rich._win32_console.WindowsCoordinates",
        "pip._vendor.rich._windows_renderer.legacy_windows_render",
        "pip._vendor.rich.box",
        "pip._vendor.rich.cells.cell_len",
        "pip._vendor.rich.color.Color",
        "pip._vendor.rich.color.ColorSystem",
        "pip._vendor.rich.columns.Columns",
        "pip._vendor.rich.console.Console",
        "pip._vendor.rich.console.ConsoleOptions",
        "pip._vendor.rich.console.ConsoleRenderable",
        "pip._vendor.rich.console.Group",
        "pip._vendor.rich.console.RenderResult",
        "pip._vendor.rich.console.RenderableType",
        "pip._vendor.rich.console.RichCast",
        "pip._vendor.rich.console.get_windows_console_features",
        "pip._vendor.rich.containers.Lines",
        "pip._vendor.rich.get_console",
        "pip._vendor.rich.highlighter.NullHighlighter",
        "pip._vendor.rich.highlighter.ReprHighlighter",
        "pip._vendor.rich.inspect",
        "pip._vendor.rich.json.JSON",
        "pip._vendor.rich.logging.RichHandler",
        "pip._vendor.rich.markdown.Markdown",
        "pip._vendor.rich.markup.escape",
        "pip._vendor.rich.measure.Measurement",
        "pip._vendor.rich.padding.Padding",
        "pip._vendor.rich.padding.PaddingDimensions",
        "pip._vendor.rich.panel.Panel",
        "pip._vendor.rich.pretty.Pretty",
        "pip._vendor.rich.pretty.install",
        "pip._vendor.rich.print",
        "pip._vendor.rich.print_json",
        "pip._vendor.rich.progress.BarColumn",
        "pip._vendor.rich.progress.DownloadColumn",
        "pip._vendor.rich.progress.FileSizeColumn",
        "pip._vendor.rich.progress.Progress",
        "pip._vendor.rich.progress.ProgressColumn",
        "pip._vendor.rich.progress.SpinnerColumn",
        "pip._vendor.rich.progress.TextColumn",
        "pip._vendor.rich.progress.TimeElapsedColumn",
        "pip._vendor.rich.progress.TimeRemainingColumn",
        "pip._vendor.rich.progress.TransferSpeedColumn",
        "pip._vendor.rich.reconfigure",
        "pip._vendor.rich.repr.RichReprResult",
        "pip._vendor.rich.segment.ControlCode",
        "pip._vendor.rich.segment.ControlType",
        "pip._vendor.rich.segment.Segment",
        "pip._vendor.rich.style.Style",
        "pip._vendor.rich.styled.Styled",
        "pip._vendor.rich.syntax.Syntax",
        "pip._vendor.rich.table.Table",
        "pip._vendor.rich.text.Text",
        "pip._vendor.rich.traceback",
        "pip._vendor.rich.traceback.install",
        "pip._vendor.rich.tree.Tree",
        "pip._vendor.tomli",
        "pip._vendor.truststore",
        "pip._vendor.typing_extensions.Buffer",
        "pip._vendor.typing_extensions.Final",
        "pip._vendor.typing_extensions.Literal",
        "pip._vendor.typing_extensions.ParamSpec",
        "pip._vendor.typing_extensions.Protocol",
        "pip._vendor.typing_extensions.Self",
        "pip._vendor.typing_extensions.TypeGuard",
        "pip._vendor.typing_extensions.runtime_checkable",
        "pip._vendor.urllib3",
        "pip._vendor.urllib3.HTTPResponse",
        "pip._vendor.urllib3.connectionpool.ConnectionPool",
        "pip._vendor.urllib3.contrib.pyopenssl",
        "pip._vendor.urllib3.contrib.socks.SOCKSProxyManager",
        "pip._vendor.urllib3.exceptions.ClosedPoolError",
        "pip._vendor.urllib3.exceptions.ConnectTimeoutError",
        "pip._vendor.urllib3.exceptions.DecodeError",
        "pip._vendor.urllib3.exceptions.DependencyWarning",
        "pip._vendor.urllib3.exceptions.HTTPError",
        "pip._vendor.urllib3.exceptions.InsecureRequestWarning",
        "pip._vendor.urllib3.exceptions.InvalidHeader",
        "pip._vendor.urllib3.exceptions.LocationParseError",
        "pip._vendor.urllib3.exceptions.LocationValueError",
        "pip._vendor.urllib3.exceptions.MaxRetryError",
        "pip._vendor.urllib3.exceptions.NewConnectionError",
        "pip._vendor.urllib3.exceptions.ProtocolError",
        "pip._vendor.urllib3.exceptions.ProxyError",
        "pip._vendor.urllib3.exceptions.ReadTimeoutError",
        "pip._vendor.urllib3.exceptions.ResponseError",
        "pip._vendor.urllib3.exceptions.SSLError",
        "pip._vendor.urllib3.fields.RequestField",
        "pip._vendor.urllib3.filepost.encode_multipart_formdata",
        "pip._vendor.urllib3.poolmanager.PoolManager",
        "pip._vendor.urllib3.poolmanager.proxy_from_url",
        "pip._vendor.urllib3.util.IS_PYOPENSSL",
        "pip._vendor.urllib3.util.Timeout",
        "pip._vendor.urllib3.util.make_headers",
        "pip._vendor.urllib3.util.parse_url",
        "pip._vendor.urllib3.util.retry.Retry",
        "pip._vendor.urllib3.util.ssl_",
        "pip._vendor.urllib3.util.ssl_.create_urllib3_context",
        "pivot.PivotFormat",
        "pivot.PivotSource",
        "pkg_resources",
        "pkg_resources.resource_stream",
        "pkgutil",
        "pkgutil.get_data",
        "pkgutil.get_importer",
        "platform",
        "platform.python_implementation",
        "plistlib",
        "plotarea.PlotArea",
        "polynomial.Polynomial",
        "polynomial.polyadd",
        "polynomial.polymulx",
        "polynomial.polysub",
        "poolmanager.PoolManager",
        "poolmanager.ProxyManager",
        "poolmanager.proxy_from_url",
        "posixpath",
        "pprint",
        "pprint.pformat",
        "pprint.pprint",
        "pretty.Pretty",
        "pretty.is_expandable",
        "print_settings.ColRange",
        "print_settings.PrintArea",
        "print_settings.PrintSettings",
        "print_settings.PrintTitles",
        "print_settings.RowRange",
        "printoptions.format_options",
        "profile.Profile",
        "progress_bar.ProgressBar",
        "properties.CalcProperties",
        "properties.ChartsheetProperties",
        "properties.GroupShapeProperties",
        "properties.NonVisualDrawingProps",
        "properties.NonVisualDrawingShapeProps",
        "properties.NonVisualGroupShape",
        "properties.WorksheetProperties",
        "protection.ChartsheetProtection",
        "protection.DocumentSecurity",
        "protection.Protection",
        "protection.SheetProtection",
        "protocol.is_renderable",
        "protocol.rich_cast",
        "provider._default",
        "providers.AbstractProvider",
        "providers.AbstractResolver",
        "proxy.StyleProxy",
        "pstats.Stats",
        "psutil",
        "pty",
        "publish.WebPublishItems",
        "py.path.local",
        "py3k.*",
        "py_compile",
        "pyarrow",
        "pyarrow.compute",
        "pyarrow.dataset",
        "pyarrow.feather",
        "pyarrow.fs",
        "pyarrow.interchange",
        "pyarrow.interchange.from_dataframe",
        "pyarrow.parquet",
        "pydoc",
        "pylab.figure",
        "pytest",
        "pytest.param",
        "python_calamine.CalamineError",
        "python_calamine.CalamineSheet",
        "python_calamine.CalamineWorkbook",
        "python_calamine.SheetTypeEnum",
        "python_calamine.load_workbook",
        "pytz",
        "pytz.FixedOffset",
        "pytz.HOUR",
        "pytz.UTC",
        "pytz.ZERO",
        "pytz.exceptions.AmbiguousTimeError",
        "pytz.exceptions.InvalidTimeError",
        "pytz.exceptions.NonExistentTimeError",
        "pytz.exceptions.UnknownTimeZoneError",
        "pytz.lazy.LazyDict",
        "pytz.lazy.LazyList",
        "pytz.lazy.LazySet",
        "pytz.timezone",
        "pytz.tzfile.build_tzinfo",
        "pytz.tzinfo.BaseTzInfo",
        "pytz.tzinfo.DstTzInfo",
        "pytz.tzinfo.StaticTzInfo",
        "pytz.tzinfo.memorized_datetime",
        "pytz.tzinfo.memorized_timedelta",
        "pytz.tzinfo.memorized_ttinfo",
        "pytz.tzinfo.unpickler",
        "pytz.utc",
        "pyxlsb.Workbook",
        "pyxlsb.open_workbook",
        "qtpy",
        "qtpy.QtWidgets.QApplication",
        "queue",
        "radar_chart.RadarChart",
        "random",
        "random.choice",
        "random.randint",
        "random.random",
        "random.randrange",
        "range.ContentRange",
        "range.IfRange",
        "range.Range",
        "re",
        "re.Pattern",
        "re.escape",
        "read_only.ReadOnlyCell",
        "readline",
        "records.recarray",
        "records.record",
        "redis.Redis",
        "reference.Reference",
        "region.Region",
        "related.Related",
        "relation.ChartRelation",
        "relation.DrawingHF",
        "relation.SheetBackgroundPicture",
        "reporters.BaseReporter",
        "repr.Result",
        "repr.debug_repr",
        "repr.dump",
        "repr.helper",
        "repr.rich_repr",
        "reprlib",
        "reprlib.recursive_repr",
        "req_file.parse_requirements",
        "req_install.InstallRequirement",
        "req_set.RequirementSet",
        "request.Request",
        "request.RequestMethods",
        "request.SKIPPABLE_HEADERS",
        "request.SKIP_HEADER",
        "request.make_headers",
        "requirements.ExplicitRequirement",
        "requirements.RequiresPythonRequirement",
        "requirements.SpecifierRequirement",
        "requirements.SpecifierWithoutExtrasRequirement",
        "requirements.UnsatisfiableRequirement",
        "resolvers.InconsistentCandidate",
        "resolvers.RequirementsConflicted",
        "resolvers.ResolutionError",
        "resolvers.ResolutionImpossible",
        "resolvers.ResolutionTooDeep",
        "resolvers.Resolver",
        "resource",
        "resources.finder",
        "response.HTTPResponse",
        "response.Response",
        "response.ResponseStream",
        "response.is_fp_closed",
        "retry.Retry",
        "rlcompleter.Completer",
        "rule.Rule",
        "rules.EndpointPrefix",
        "rules.Rule",
        "rules.RuleFactory",
        "rules.RulePart",
        "rules.RuleTemplate",
        "rules.RuleTemplateFactory",
        "rules.Subdomain",
        "rules.Submount",
        "rules._simple_rule_re",
        "rules.parse_converter_args",
        "runpy",
        "runtime.ChainableUndefined",
        "runtime.Context",
        "runtime.DebugUndefined",
        "runtime.StrictUndefined",
        "runtime.Undefined",
        "runtime.async_exported",
        "runtime.concat",
        "runtime.exported",
        "runtime.make_logging_undefined",
        "runtime.new_context",
        "s3fs",
        "sandbox.SandboxedEnvironment",
        "sansio.app.App",
        "sansio.blueprints.Blueprint",
        "sansio.blueprints.BlueprintSetupState",
        "sansio.http",
        "sansio.multipart.Data",
        "sansio.multipart.Epilogue",
        "sansio.multipart.Field",
        "sansio.multipart.File",
        "sansio.multipart.MultipartDecoder",
        "sansio.multipart.MultipartEncoder",
        "sansio.multipart.NeedData",
        "sansio.multipart.Preamble",
        "sansio.request.Request",
        "sansio.response.Response",
        "sansio.scaffold.Scaffold",
        "sansio.scaffold._sentinel",
        "sansio.utils",
        "sansio.utils.host_is_trusted",
        "scaffold.Scaffold",
        "scaffold._endpoint_from_view_func",
        "scaffold._sentinel",
        "scaffold.find_package",
        "scaffold.setupmethod",
        "scatter_chart.ScatterChart",
        "scenario.ScenarioList",
        "scipy.interpolate",
        "scipy.sparse",
        "scipy.sparse.coo_matrix",
        "scipy.sparse.issparse",
        "scipy.sparse.spmatrix",
        "scipy.stats.gaussian_kde",
        "scipy.stats.kendalltau",
        "scipy.stats.sem",
        "scipy.stats.spearmanr",
        "scipy_doctest.conftest.dt_config",
        "scope.render_scope",
        "screen.Screen",
        "secrets",
        "security.gen_salt",
        "security.safe_join",
        "segment.ControlCode",
        "segment.ControlType",
        "segment.Segment",
        "segment.Segments",
        "select",
        "selectors",
        "sequence.MultiSequencePart",
        "sequence.NestedSequence",
        "sequence.Sequence",
        "serialisable.Serialisable",
        "serializer.Serializer",
        "serializer._PDataSerializer",
        "serializer._TSerialized",
        "series.Series",
        "series.SeriesLabel",
        "series.StrRef",
        "series.XYSeries",
        "series.attribute_mapping",
        "series_factory.SeriesFactory",
        "serving.run_simple",
        "sessions.SecureCookieSessionInterface",
        "sessions.Session",
        "sessions.SessionInterface",
        "sessions.SessionMixin",
        "sessions.session",
        "sets.Set",
        "setuptools.Extension",
        "setuptools.extension.Extension",
        "setuptools.find_packages",
        "setuptools.setup",
        "shape_base.*",
        "shape_writer.ShapeWriter",
        "shapes.*",
        "shapes.GraphicalProperties",
        "shell_completion.CompletionItem",
        "shell_completion.shell_complete",
        "shlex",
        "shutil",
        "shutil.copyfileobj",
        "shutil.get_terminal_size",
        "shutil.rmtree",
        "shutil.which",
        "signal",
        "signals.appcontext_popped",
        "signals.appcontext_pushed",
        "signals.appcontext_tearing_down",
        "signals.before_render_template",
        "signals.got_request_exception",
        "signals.message_flashed",
        "signals.request_finished",
        "signals.request_started",
        "signals.request_tearing_down",
        "signals.template_rendered",
        "signer.HMACAlgorithm",
        "signer.NoneAlgorithm",
        "signer.Signer",
        "signer._make_keys_list",
        "site",
        "six",
        "six.PY2",
        "six.advance_iterator",
        "six.integer_types",
        "six.moves._thread",
        "six.moves.range",
        "six.moves.winreg",
        "six.string_types",
        "six.text_type",
        "sklearn.datasets",
        "sklearn.svm",
        "socket",
        "socket.SocketIO",
        "socket._GLOBAL_DEFAULT_TIMEOUT",
        "socket._fileobject",
        "socket.error",
        "socket.getdefaulttimeout",
        "socket.timeout",
        "socketserver",
        "socks",
        "sources.CandidatesFromPage",
        "sources.LinkSource",
        "sources.build_source",
        "specifiers.InvalidSpecifier",
        "specifiers.Specifier",
        "specifiers.SpecifierSet",
        "sphinx.util.nodes.nested_parse_with_titles",
        "spinner.Spinner",
        "spreadsheet_drawing.AbsoluteAnchor",
        "spreadsheet_drawing.OneCellAnchor",
        "spreadsheet_drawing.TwoCellAnchor",
        "sqlalchemy",
        "sqlalchemy.BigInteger",
        "sqlalchemy.Boolean",
        "sqlalchemy.Column",
        "sqlalchemy.DateTime",
        "sqlalchemy.Double",
        "sqlalchemy.Float",
        "sqlalchemy.Integer",
        "sqlalchemy.MetaData",
        "sqlalchemy.Numeric",
        "sqlalchemy.PrimaryKeyConstraint",
        "sqlalchemy.String",
        "sqlalchemy.TEXT",
        "sqlalchemy.TIMESTAMP",
        "sqlalchemy.Table",
        "sqlalchemy.Unicode",
        "sqlalchemy.bindparam",
        "sqlalchemy.create_engine",
        "sqlalchemy.dialects.mysql.insert",
        "sqlalchemy.dialects.postgresql.insert",
        "sqlalchemy.engine.Engine",
        "sqlalchemy.exc",
        "sqlalchemy.insert",
        "sqlalchemy.inspect",
        "sqlalchemy.orm.Session",
        "sqlalchemy.orm.declarative_base",
        "sqlalchemy.orm.sessionmaker",
        "sqlalchemy.schema.CreateTable",
        "sqlalchemy.schema.MetaData",
        "sqlalchemy.select",
        "sqlalchemy.sql.expression.Select",
        "sqlalchemy.sql.expression.TextClause",
        "sqlalchemy.sql.text",
        "sqlalchemy.text",
        "sqlalchemy.types.BigInteger",
        "sqlalchemy.types.Boolean",
        "sqlalchemy.types.Date",
        "sqlalchemy.types.DateTime",
        "sqlalchemy.types.Float",
        "sqlalchemy.types.Integer",
        "sqlalchemy.types.SmallInteger",
        "sqlalchemy.types.TIMESTAMP",
        "sqlalchemy.types.Text",
        "sqlalchemy.types.Time",
        "sqlalchemy.types.TypeEngine",
        "sqlite3",
        "ssl",
        "ssl.CERT_REQUIRED",
        "ssl.CertificateError",
        "ssl.HAS_SNI",
        "ssl.OP_NO_COMPRESSION",
        "ssl.OP_NO_SSLv2",
        "ssl.OP_NO_SSLv3",
        "ssl.OP_NO_TICKET",
        "ssl.PROTOCOL_SSLv23",
        "ssl.PROTOCOL_TLS",
        "ssl.PROTOCOL_TLS_CLIENT",
        "ssl.SSLContext",
        "ssl.match_hostname",
        "ssl.wrap_socket",
        "ssl_.ALPN_PROTOCOLS",
        "ssl_.HAS_SNI",
        "ssl_.IS_PYOPENSSL",
        "ssl_.IS_SECURETRANSPORT",
        "ssl_.PROTOCOL_TLS",
        "ssl_.SSLContext",
        "ssl_.assert_fingerprint",
        "ssl_.create_urllib3_context",
        "ssl_.resolve_cert_reqs",
        "ssl_.resolve_ssl_version",
        "ssl_.ssl_wrap_socket",
        "ssltransport.SSLTransport",
        "stat",
        "stat.S_ISDIR",
        "stat.S_ISLNK",
        "stat.S_ISREG",
        "status.Status",
        "status_codes.codes",
        "stock_chart.StockChart",
        "string",
        "string.Formatter",
        "string.Template",
        "string.ascii_letters",
        "string.ascii_lowercase",
        "string.ascii_uppercase",
        "string.digits",
        "strings.read_rich_text",
        "strings.read_string_table",
        "strings.safe_string",
        "struct",
        "struct.calcsize",
        "struct.unpack",
        "structs.DirectedGraph",
        "structs.IteratorMapping",
        "structs.build_iter_view",
        "structures.CallbackDict",
        "structures.CaseInsensitiveDict",
        "structures.CombinedMultiDict",
        "structures.HeaderSet",
        "structures.ImmutableDict",
        "structures.ImmutableList",
        "structures.ImmutableMultiDict",
        "structures.ImmutableTypeConversionDict",
        "structures.LookupDict",
        "structures.MultiDict",
        "structures.TypeConversionDict",
        "structures._ImmutableOrderedMultiDict",
        "structures._OrderedMultiDict",
        "structures.iter_multi_items",
        "style.Style",
        "style.StyleStack",
        "style.StyleType",
        "styled.Styled",
        "subprocess",
        "subprocess.PIPE",
        "subprocess.Popen",
        "subprocess.STDOUT",
        "subprocess.check_call",
        "subprocess.check_output",
        "surface_chart.SurfaceChart",
        "surface_chart.SurfaceChart3D",
        "syntax.Syntax",
        "sys",
        "sys.byteorder",
        "sys.getsizeof",
        "sys.intern",
        "sysconfig",
        "sysconfig.get_platform",
        "table.Column",
        "table.PivotArea",
        "table.Reference",
        "table.Table",
        "table.TableList",
        "table.TablePartList",
        "table.TableStyleList",
        "tables",
        "tables.Col",
        "tables.File",
        "tables.Node",
        "tags.Tag",
        "tags.parse_tag",
        "tarfile",
        "tarfile.ReadError",
        "tarfile.TarFile",
        "tbtools.DebugFrameSummary",
        "tbtools.DebugTraceback",
        "tbtools.render_console_html",
        "tempfile",
        "tempfile.NamedTemporaryFile",
        "tempfile.SpooledTemporaryFile",
        "tempfile.TemporaryFile",
        "tempfile.mkdtemp",
        "tempfile.mkstemp",
        "templating.DispatchingJinjaLoader",
        "templating.Environment",
        "templating._default_template_ctx_processor",
        "templating.render_template",
        "templating.render_template_string",
        "templating.stream_template",
        "templating.stream_template_string",
        "terminal_theme.DEFAULT_TERMINAL_THEME",
        "terminal_theme.SVG_EXPORT_THEME",
        "terminal_theme.TerminalTheme",
        "termios",
        "termui.clear",
        "termui.confirm",
        "termui.echo_via_pager",
        "termui.edit",
        "termui.getchar",
        "termui.launch",
        "termui.pause",
        "termui.progressbar",
        "termui.prompt",
        "termui.secho",
        "termui.style",
        "termui.unstyle",
        "test.Client",
        "test.EnvironBuilder",
        "test.run_wsgi_app",
        "testing.EnvironBuilder",
        "testing.FlaskCliRunner",
        "testing.FlaskClient",
        "tests.KEEP_VBA",
        "tests.TESTS",
        "text.*",
        "text.Hyperlink",
        "text.RichText",
        "text.Span",
        "text.Text",
        "text.TextType",
        "textwrap",
        "textwrap.dedent",
        "textwrap.fill",
        "textwrap.indent",
        "textwrap.wrap",
        "theme.Theme",
        "theme.ThemeStack",
        "theme.theme_xml",
        "thread.get_ident",
        "threading",
        "threading.Event",
        "threading.Lock",
        "threading.RLock",
        "threading.Thread",
        "threading.local",
        "threadpoolctl.threadpool_info",
        "time",
        "time.mktime",
        "time.monotonic",
        "time.perf_counter",
        "time.process_time",
        "time.sleep",
        "time.struct_time",
        "time.time",
        "timed.TimedSerializer",
        "timed.TimestampSigner",
        "timeit",
        "timeit.timeit",
        "timeout.Timeout",
        "timeout.current_time",
        "title.Title",
        "title.TitleDescriptor",
        "token",
        "tokenize",
        "tokenize.detect_encoding",
        "tokenizer.Token",
        "tokenizer.Tokenizer",
        "tomllib",
        "traceback",
        "traceback.Traceback",
        "traceback.format_exception_only",
        "traceback.walk_tb",
        "tracemalloc",
        "traitlets.ObjectName",
        "traitlets.config.Config",
        "trendline.Trendline",
        "tty",
        "types",
        "types.BOOL",
        "types.Choice",
        "types.CodeType",
        "types.DateTime",
        "types.FLOAT",
        "types.File",
        "types.FileType",
        "types.FloatRange",
        "types.FrameType",
        "types.FunctionType",
        "types.GeneratorType",
        "types.INT",
        "types.IntRange",
        "types.MappingProxyType",
        "types.MethodType",
        "types.ModuleType",
        "types.ParamType",
        "types.Path",
        "types.STRING",
        "types.SimpleNamespace",
        "types.TracebackType",
        "types.Tuple",
        "types.UNPROCESSED",
        "types.UUID",
        "types.convert_type",
        "typing",
        "typing.AbstractSet",
        "typing.Any",
        "typing.AnyStr",
        "typing.AsyncContextManager",
        "typing.AsyncGenerator",
        "typing.BinaryIO",
        "typing.Callable",
        "typing.ClassVar",
        "typing.Collection",
        "typing.Container",
        "typing.ContextManager",
        "typing.DefaultDict",
        "typing.Deque",
        "typing.Dict",
        "typing.Final",
        "typing.FrozenSet",
        "typing.Generator",
        "typing.Generic",
        "typing.GenericAlias",
        "typing.IO",
        "typing.Iterable",
        "typing.Iterator",
        "typing.List",
        "typing.Literal",
        "typing.Mapping",
        "typing.Match",
        "typing.MutableMapping",
        "typing.MutableSequence",
        "typing.NamedTuple",
        "typing.Never",
        "typing.NewType",
        "typing.NoReturn",
        "typing.Optional",
        "typing.ParamSpec",
        "typing.Pattern",
        "typing.Protocol",
        "typing.Self",
        "typing.Sequence",
        "typing.Set",
        "typing.SupportsIndex",
        "typing.SupportsInt",
        "typing.TYPE_CHECKING",
        "typing.TextIO",
        "typing.Tuple",
        "typing.Type",
        "typing.TypeAlias",
        "typing.TypeGuard",
        "typing.TypeVar",
        "typing.TypeVarTuple",
        "typing.TypedDict",
        "typing.Union",
        "typing._BaseGenericAlias",
        "typing.cast",
        "typing.final",
        "typing.get_args",
        "typing.get_origin",
        "typing.get_type_hints",
        "typing.no_type_check",
        "typing.overload",
        "typing.runtime_checkable",
        "typing_extensions",
        "typing_extensions.Self",
        "typing_extensions.TypeGuard",
        "typing_extensions.assert_type",
        "tz.*",
        "tz.__doc__",
        "tz.win.*",
        "umath.*",
        "umath.NAN",
        "umath.PINF",
        "umath._extobj_contextvar",
        "umath._get_extobj_dict",
        "umath._make_extobj",
        "umath.absolute",
        "umath.exp2",
        "umath.invert",
        "umath.isfinite",
        "umath.isinf",
        "umath.isnan",
        "umath.isnat",
        "umath.log10",
        "umath.multiply",
        "umath.nextafter",
        "umath.sin",
        "unicodedata",
        "unicodedata.east_asian_width",
        "unittest",
        "unittest.TestCase",
        "unittest.case.SkipTest",
        "unittest.main",
        "unittest.mock",
        "unittest.mock.MagicMock",
        "unittest.mock.Mock",
        "unittest.mock.patch",
        "unittest.skipUnless",
        "updown_bars.UpDownBars",
        "url.BRACELESS_IPV6_ADDRZ_RE",
        "url.IPV4_RE",
        "url.Url",
        "url.get_host",
        "url.parse_url",
        "url.split_first",
        "url_safe.URLSafeSerializer",
        "url_safe.URLSafeTimedSerializer",
        "urllib.ContentTooShortError",
        "urllib.error.ContentTooShortError",
        "urllib.error.HTTPError",
        "urllib.error.URLError",
        "urllib.parse",
        "urllib.parse.parse_qsl",
        "urllib.parse.quote",
        "urllib.parse.quote_from_bytes",
        "urllib.parse.quote_plus",
        "urllib.parse.splittype",
        "urllib.parse.unquote",
        "urllib.parse.unquote_plus",
        "urllib.parse.urldefrag",
        "urllib.parse.urlencode",
        "urllib.parse.urljoin",
        "urllib.parse.urlparse",
        "urllib.parse.urlsplit",
        "urllib.parse.urlunparse",
        "urllib.parse.urlunsplit",
        "urllib.parse.uses_netloc",
        "urllib.parse.uses_params",
        "urllib.parse.uses_relative",
        "urllib.pathname2url",
        "urllib.quote",
        "urllib.request",
        "urllib.request.HTTPBasicAuthHandler",
        "urllib.request.HTTPHandler",
        "urllib.request.HTTPPasswordMgr",
        "urllib.request.HTTPRedirectHandler",
        "urllib.request.HTTPSHandler",
        "urllib.request.Request",
        "urllib.request.build_opener",
        "urllib.request.getproxies",
        "urllib.request.getproxies_environment",
        "urllib.request.parse_http_list",
        "urllib.request.pathname2url",
        "urllib.request.proxy_bypass",
        "urllib.request.proxy_bypass_environment",
        "urllib.request.url2pathname",
        "urllib.request.urlopen",
        "urllib.request.urlretrieve",
        "urllib.splittype",
        "urllib.unquote",
        "urllib.url2pathname",
        "urllib.urlretrieve",
        "urllib2",
        "urllib2.HTTPBasicAuthHandler",
        "urllib2.HTTPError",
        "urllib2.HTTPHandler",
        "urllib2.HTTPPasswordMgr",
        "urllib2.HTTPRedirectHandler",
        "urllib2.HTTPSHandler",
        "urllib2.Request",
        "urllib2.URLError",
        "urllib2.build_opener",
        "urllib2.urlopen",
        "urllib3_secure_extra",
        "urlparse.urljoin",
        "urlparse.urlparse",
        "urlparse.urlsplit",
        "urlparse.urlunparse",
        "urlparse.urlunsplit",
        "urls._urlencode",
        "urls.iri_to_uri",
        "urls.uri_to_iri",
        "user_agent.UserAgent",
        "util.CSVReader",
        "util.CSVWriter",
        "util.Cache",
        "util.FileOperator",
        "util.SKIPPABLE_HEADERS",
        "util.SKIP_HEADER",
        "util.ServerProxy",
        "util._get_pypirc_command",
        "util._load_pypirc",
        "util._store_pypirc",
        "util.cached_property",
        "util.connection",
        "util.connection.is_connection_dropped",
        "util.convert_path",
        "util.ensure_slash",
        "util.extract_by_key",
        "util.get_cache_base",
        "util.get_executable",
        "util.get_export_entry",
        "util.get_extras",
        "util.get_platform",
        "util.get_project_data",
        "util.in_venv",
        "util.normalize_name",
        "util.parse_marker",
        "util.parse_name_and_version",
        "util.parse_requirement",
        "util.proxy.connection_requires_http_tunnel",
        "util.proxy.create_proxy_ssl_context",
        "util.queue.LifoQueue",
        "util.read_exports",
        "util.request.make_headers",
        "util.request.set_file_position",
        "util.response.assert_header_parsing",
        "util.response.is_fp_closed",
        "util.response.is_response_to_head",
        "util.retry.Retry",
        "util.split_filename",
        "util.ssl_.PROTOCOL_TLS_CLIENT",
        "util.ssl_.assert_fingerprint",
        "util.ssl_.create_urllib3_context",
        "util.ssl_.is_ipaddress",
        "util.ssl_.resolve_cert_reqs",
        "util.ssl_.resolve_ssl_version",
        "util.ssl_.ssl_wrap_socket",
        "util.ssl_match_hostname.CertificateError",
        "util.ssl_match_hostname.match_hostname",
        "util.tempdir",
        "util.timeout.Timeout",
        "util.url.Url",
        "util.url._encode_target",
        "util.url._normalize_host",
        "util.url.get_host",
        "util.url.parse_url",
        "util.write_exports",
        "util.zip_dir",
        "uts46data.uts46data",
        "uuid",
        "uuid.UUID",
        "uuid.uuid4",
        "variables.parse_variables",
        "version.InvalidVersion",
        "version.LegacyVersion",
        "version.NormalizedVersion",
        "version.PEP440_VERSION_RE",
        "version.UnsupportedVersionError",
        "version.Version",
        "version._TrimmedRelease",
        "version.__version__",
        "version.__version_tuple__",
        "version.get_scheme",
        "views.BookView",
        "views.ChartsheetViewList",
        "views.Pane",
        "views.Selection",
        "views.SheetViewList",
        "visitor.NodeTransformer",
        "visitor.NodeVisitor",
        "wait.NoWayToWaitForSocketError",
        "wait.wait_for_read",
        "wait.wait_for_write",
        "warnings",
        "warnings.WarningMessage",
        "warnings.catch_warnings",
        "warnings.warn",
        "watchdog.events.EVENT_TYPE_CLOSED",
        "watchdog.events.EVENT_TYPE_CREATED",
        "watchdog.events.EVENT_TYPE_DELETED",
        "watchdog.events.EVENT_TYPE_MODIFIED",
        "watchdog.events.EVENT_TYPE_MOVED",
        "watchdog.events.FileModifiedEvent",
        "watchdog.events.PatternMatchingEventHandler",
        "watchdog.observers.Observer",
        "weakref",
        "weakref.WeakKeyDictionary",
        "weakref.WeakMethod",
        "weakref.ref",
        "web.routes.ota_routes.ota_bp",
        "web.routes.rate_routes.rate_bp",
        "webbrowser",
        "werkzeug.datastructures.CallbackDict",
        "werkzeug.datastructures.Headers",
        "werkzeug.datastructures.ImmutableDict",
        "werkzeug.datastructures.MultiDict",
        "werkzeug.exceptions.Aborter",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.exceptions.InternalServerError",
        "werkzeug.exceptions.abort",
        "werkzeug.exceptions.default_exceptions",
        "werkzeug.http.http_date",
        "werkzeug.http.parse_date",
        "werkzeug.local.LocalProxy",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.Map",
        "werkzeug.routing.MapAdapter",
        "werkzeug.routing.RequestRedirect",
        "werkzeug.routing.RoutingException",
        "werkzeug.routing.Rule",
        "werkzeug.run_simple",
        "werkzeug.sansio.response.Response",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.serving.run_simple",
        "werkzeug.test",
        "werkzeug.test.Client",
        "werkzeug.test.TestResponse",
        "werkzeug.utils",
        "werkzeug.utils.cached_property",
        "werkzeug.utils.import_string",
        "werkzeug.utils.redirect",
        "werkzeug.wrappers.Request",
        "werkzeug.wrappers.Response",
        "wheel.Wheel",
        "wheel.is_compatible",
        "win.tzwin",
        "win.tzwinlocal",
        "win32.ENABLE_VIRTUAL_TERMINAL_PROCESSING",
        "win32.winapi_test",
        "win32.windll",
        "win32pdh",
        "winreg",
        "winterm.WinColor",
        "winterm.WinStyle",
        "winterm.WinTerm",
        "winterm.enable_vt_processing",
        "workbook.Workbook",
        "workbook.WorkbookParser",
        "worksheet.Worksheet",
        "wrappers.Request",
        "wrappers.Response",
        "wrappers.request.Request",
        "wrappers.response.Response",
        "wsgi.ClosingIterator",
        "wsgi.FileWrapper",
        "wsgi._RangeWrapper",
        "wsgi._get_server",
        "wsgi.get_content_length",
        "wsgi.get_current_url",
        "wsgi.get_host",
        "wsgi.get_input_stream",
        "wsgi.get_path_info",
        "wsgi.wrap_file",
        "xarray",
        "xarray.DataArray",
        "xarray.Dataset",
        "xdr.XDRPoint2D",
        "xdr.XDRPositiveSize2D",
        "xdr.XDRTransform2D",
        "xlrd",
        "xlrd.Book",
        "xlrd.XLRDError",
        "xlrd.XL_CELL_BOOLEAN",
        "xlrd.XL_CELL_DATE",
        "xlrd.XL_CELL_ERROR",
        "xlrd.XL_CELL_NUMBER",
        "xlrd.biffh.XLRDError",
        "xlrd.open_workbook",
        "xlrd.xldate",
        "xlsxwriter.Workbook",
        "xml.dom.minidom.parseString",
        "xml.etree.ElementTree",
        "xml.etree.ElementTree.Element",
        "xml.etree.ElementTree.ParseError",
        "xml.etree.ElementTree.QName",
        "xml.etree.ElementTree.SubElement",
        "xml.etree.ElementTree.XMLParser",
        "xml.etree.ElementTree._escape_cdata",
        "xml.etree.ElementTree.fromstring",
        "xml.etree.ElementTree.iterparse",
        "xml.etree.ElementTree.parse",
        "xml.etree.ElementTree.register_namespace",
        "xml.etree.ElementTree.tostring",
        "xmlfile.xmlfile",
        "xmlrpc.client",
        "xmlrpc.client._HostType",
        "xmlrpc.client._Marshallable",
        "xmlrpclib",
        "yaml",
        "zipfile",
        "zipfile.BadZipFile",
        "zipfile.ZIP_DEFLATED",
        "zipfile.ZIP_STORED",
        "zipfile.ZipExtFile",
        "zipfile.ZipFile",
        "zipfile.ZipInfo",
        "zipimport",
        "zlib",
        "zlib.adler32",
        "zoneinfo",
        "zoneinfo.ZoneInfo"
      ]
    },
    "web_app": {
      "frontend": {},
      "backend": {},
      "routes": [],
      "templates": []
    }
  },
  "data_models": {
    "Modality": {
      "file": "core\\models\\clinical_intent.py",
      "methods": [],
      "docstring": "Imaging or procedure modality.",
      "inheritance": [
        "Enum"
      ]
    },
    "BodyRegion": {
      "file": "core\\models\\clinical_intent.py",
      "methods": [],
      "docstring": "Body region for procedures.",
      "inheritance": [
        "Enum"
      ]
    },
    "BodyPart": {
      "file": "core\\models\\clinical_intent.py",
      "methods": [],
      "docstring": "Specific body part.",
      "inheritance": [
        "Enum"
      ]
    },
    "IntentCategory": {
      "file": "core\\models\\clinical_intent.py",
      "methods": [],
      "docstring": "Clinical intent category.",
      "inheritance": [
        "Enum"
      ]
    },
    "ClinicalIntent": {
      "file": "core\\models\\clinical_intent.py",
      "methods": [
        {
          "name": "from_cpt_codes",
          "args": [
            "cls",
            "cpt_codes",
            "intent_mapper"
          ],
          "docstring": "Create a ClinicalIntent instance from a set of CPT codes.\n\nArgs:\n    cpt_codes: Set of CPT codes to analyze\n    intent_mapper: Optional mapper to assist with classification\n    \nReturns:\n    ClinicalIntent: Classified clinical intent",
          "line_count": 16,
          "decorators": [
            "classmethod"
          ]
        },
        {
          "name": "detect_contrast_from_cpt",
          "args": [
            "cpt_code"
          ],
          "docstring": "Determine contrast status from a CPT code.\n\nArgs:\n    cpt_code: CPT code to analyze\n    \nReturns:\n    bool: True if with contrast, False if without, None if undetermined",
          "line_count": 3,
          "decorators": [
            "staticmethod"
          ]
        },
        {
          "name": "matches",
          "args": [
            "self",
            "other",
            "threshold"
          ],
          "docstring": "Determine if this clinical intent matches another one.\n\nArgs:\n    other: Another ClinicalIntent to compare to\n    threshold: Confidence threshold for matching\n    \nReturns:\n    bool: True if intents match, False otherwise",
          "line_count": 13,
          "decorators": []
        },
        {
          "name": "to_dict",
          "args": [
            "self"
          ],
          "docstring": "Convert to dictionary for serialization.",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "from_dict",
          "args": [
            "cls",
            "data"
          ],
          "docstring": "Create from dictionary.",
          "line_count": 2,
          "decorators": [
            "classmethod"
          ]
        }
      ],
      "docstring": "Represents the clinical intent of a procedure or set of procedures.\nUsed to determine if different CPT codes have the same clinical purpose.",
      "inheritance": []
    },
    "ProcedureStatus": {
      "file": "core\\models\\procedures.py",
      "methods": [],
      "docstring": "Procedure status.",
      "inheritance": [
        "Enum"
      ]
    },
    "ProcedureCode": {
      "file": "core\\models\\procedures.py",
      "methods": [
        {
          "name": "matches",
          "args": [
            "self",
            "other",
            "modifier_match"
          ],
          "docstring": "Compare two procedure codes for matching.\n\nArgs:\n    other: Another ProcedureCode to compare to\n    modifier_match: Whether modifiers must match exactly\n    \nReturns:\n    bool: True if codes match based on criteria",
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "to_dict",
          "args": [
            "self"
          ],
          "docstring": "Convert to dictionary for serialization.",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "from_dict",
          "args": [
            "cls",
            "data"
          ],
          "docstring": "Create from dictionary.",
          "line_count": 2,
          "decorators": [
            "classmethod"
          ]
        }
      ],
      "docstring": "Represents a procedure code with its modifiers and units.",
      "inheritance": []
    },
    "ProcedureBundle": {
      "file": "core\\models\\procedures.py",
      "methods": [
        {
          "name": "contains_code",
          "args": [
            "self",
            "code"
          ],
          "docstring": "Check if this bundle contains a specific code.",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "matches",
          "args": [
            "self",
            "codes",
            "partial_match"
          ],
          "docstring": "Check if a list of procedure codes matches this bundle.\n\nArgs:\n    codes: List of procedure codes to check\n    partial_match: Whether to allow partial matches (missing optional codes)\n    \nReturns:\n    Dict: Matching result with details",
          "line_count": 8,
          "decorators": []
        },
        {
          "name": "to_dict",
          "args": [
            "self"
          ],
          "docstring": "Convert to dictionary for serialization.",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "from_dict",
          "args": [
            "cls",
            "data"
          ],
          "docstring": "Create from dictionary.",
          "line_count": 2,
          "decorators": [
            "classmethod"
          ]
        }
      ],
      "docstring": "Represents a bundle of procedures that are typically performed together.\nUsed for recognizing and validating procedure bundles.",
      "inheritance": []
    },
    "Procedure": {
      "file": "core\\models\\procedures.py",
      "methods": [
        {
          "name": "to_dict",
          "args": [
            "self"
          ],
          "docstring": "Convert to dictionary for serialization.",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "from_dict",
          "args": [
            "cls",
            "data"
          ],
          "docstring": "Create from dictionary.",
          "line_count": 2,
          "decorators": [
            "classmethod"
          ]
        },
        {
          "name": "from_line_item",
          "args": [
            "cls",
            "line_item",
            "context"
          ],
          "docstring": "Create a Procedure from a line item dictionary.\n\nArgs:\n    line_item: Dictionary containing line item data\n    context: Optional context with additional information\n    \nReturns:\n    Procedure: Created procedure instance",
          "line_count": 8,
          "decorators": [
            "classmethod"
          ]
        }
      ],
      "docstring": "Represents a medical procedure with detailed information.\nUsed for representing both ordered and billed procedures.",
      "inheritance": []
    },
    "ValidationContext": {
      "file": "core\\models\\validation.py",
      "methods": [],
      "docstring": "Context information for a validation operation.\nContains basic information about the file being validated.",
      "inheritance": []
    },
    "ValidationResult": {
      "file": "core\\models\\validation.py",
      "methods": [
        {
          "name": "create_base_result",
          "args": [
            "cls",
            "file_path"
          ],
          "docstring": "Create a base result dictionary with default values.\n\nArgs:\n    file_path: Path to the file being validated\n    \nReturns:\n    Dict: Base result dictionary",
          "line_count": 2,
          "decorators": [
            "classmethod"
          ]
        },
        {
          "name": "to_dict",
          "args": [
            "self"
          ],
          "docstring": "Convert the validation result to a dictionary.\n\nReturns:\n    Dict: Dictionary representation of the validation result",
          "line_count": 2,
          "decorators": []
        }
      ],
      "docstring": "Result of a validation operation.\nContains detailed information about the validation outcome.",
      "inheritance": []
    },
    "ValidationSession": {
      "file": "core\\models\\validation.py",
      "methods": [
        {
          "name": "add_result",
          "args": [
            "self",
            "result"
          ],
          "docstring": "Add a validation result to the session.\n\nArgs:\n    result: Validation result to add",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "complete",
          "args": [
            "self"
          ],
          "docstring": "Mark the session as complete.",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "get_summary",
          "args": [
            "self"
          ],
          "docstring": "Get a summary of the validation session.\n\nReturns:\n    Dict: Summary information",
          "line_count": 4,
          "decorators": []
        }
      ],
      "docstring": "A session for performing multiple validations.\nKeeps track of all validation results.",
      "inheritance": []
    }
  },
  "services": {
    "DatabaseService": {
      "file": "core\\services\\database.py",
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "docstring": "Initialize database connection parameters.",
          "line_count": 3,
          "decorators": []
        },
        {
          "name": "connect_db",
          "args": [
            "self"
          ],
          "docstring": "Establish a connection to the database.",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "get_line_items",
          "args": [
            "order_id",
            "conn"
          ],
          "docstring": "Get line items for an order with error handling.\n\nArgs:\n    order_id: Order ID to get line items for\n    conn: Database connection\n    \nReturns:\n    pd.DataFrame: DataFrame containing line items",
          "line_count": 2,
          "decorators": [
            "staticmethod"
          ]
        },
        {
          "name": "get_provider_details",
          "args": [
            "order_id",
            "conn"
          ],
          "docstring": "Get provider details through the orders-providers relationship.\n\nArgs:\n    order_id: Order ID to get provider details for\n    conn: Database connection\n    \nReturns:\n    Dict: Provider details or None if not found",
          "line_count": 2,
          "decorators": [
            "staticmethod"
          ]
        },
        {
          "name": "get_full_details",
          "args": [
            "self",
            "order_id",
            "conn"
          ],
          "docstring": "Get full order details including provider and line items.\n\nArgs:\n    order_id: Order ID to get details for\n    conn: Optional database connection to use\n    \nReturns:\n    Dict: Full order details",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "check_bundle",
          "args": [
            "order_id",
            "conn"
          ],
          "docstring": "Check if order is bundled.\n\nArgs:\n    order_id: Order ID to check\n    conn: Database connection\n    \nReturns:\n    bool: True if the order is bundled, False otherwise",
          "line_count": 2,
          "decorators": [
            "staticmethod"
          ]
        },
        {
          "name": "get_procedure_categories",
          "args": [
            "self",
            "cpt_codes",
            "conn"
          ],
          "docstring": "Get procedure categories for multiple CPT codes.\n\nArgs:\n    cpt_codes: List of CPT codes\n    conn: Database connection (optional)\n    \nReturns:\n    Dict: Mapping of CPT codes to categories",
          "line_count": 5,
          "decorators": []
        },
        {
          "name": "get_ppo_rates",
          "args": [
            "self",
            "provider_tin",
            "cpt_codes",
            "conn"
          ],
          "docstring": "Get PPO rates for a provider and multiple CPT codes.\n\nArgs:\n    provider_tin: Provider TIN\n    cpt_codes: List of CPT codes\n    conn: Database connection (optional)\n    \nReturns:\n    Dict: Mapping of CPT codes to rates",
          "line_count": 5,
          "decorators": []
        },
        {
          "name": "get_ota_rates",
          "args": [
            "self",
            "order_id",
            "cpt_codes",
            "conn"
          ],
          "docstring": "Get OTA rates for an order and multiple CPT codes.\n\nArgs:\n    order_id: Order ID\n    cpt_codes: List of CPT codes\n    conn: Database connection (optional)\n    \nReturns:\n    Dict: Mapping of CPT codes to rates",
          "line_count": 5,
          "decorators": []
        },
        {
          "name": "get_bundle_info",
          "args": [
            "self",
            "order_id",
            "conn"
          ],
          "docstring": "Get bundle information for an order.\n\nArgs:\n    order_id: Order ID\n    conn: Database connection (optional)\n    \nReturns:\n    Dict: Bundle information or None if not a bundle",
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "save_validation_result",
          "args": [
            "self",
            "validation_result",
            "conn"
          ],
          "docstring": "Save a validation result to the database.\n\nArgs:\n    validation_result: Validation result to save\n    conn: Database connection (optional)\n    \nReturns:\n    bool: True if successful, False otherwise",
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "get_ancillary_codes",
          "args": [
            "self",
            "conn"
          ],
          "docstring": "Get a set of all CPT codes categorized as ancillary.\n\nArgs:\n    conn: Database connection (optional)\n    \nReturns:\n    Set[str]: Set of ancillary CPT codes",
          "line_count": 6,
          "decorators": []
        },
        {
          "name": "get_dim_proc_df",
          "args": [
            "self",
            "conn"
          ],
          "docstring": "Get the dim_proc table as a DataFrame.\n\nArgs:\n    conn: Database connection (optional)\n    \nReturns:\n    pd.DataFrame: DataFrame containing the dim_proc table",
          "line_count": 6,
          "decorators": []
        },
        {
          "name": "clear_cache",
          "args": [
            "self"
          ],
          "docstring": "Clear the internal cache.",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "get_validation_failures",
          "args": [
            "self",
            "limit",
            "offset",
            "status",
            "validation_type",
            "conn"
          ],
          "docstring": "Get validation failures from the database.\n\nArgs:\n    limit: Maximum number of results to return\n    offset: Number of results to skip\n    status: Filter by status (e.g., 'FAIL')\n    validation_type: Filter by validation type\n    conn: Database connection (optional)\n    \nReturns:\n    pd.DataFrame: DataFrame containing validation failures",
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "get_validation_summary",
          "args": [
            "self",
            "start_date",
            "end_date",
            "conn"
          ],
          "docstring": "Get a summary of validation results.\n\nArgs:\n    start_date: Start date (YYYY-MM-DD)\n    end_date: End date (YYYY-MM-DD)\n    conn: Database connection (optional)\n    \nReturns:\n    Dict: Summary of validation results",
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "update_order_details",
          "args": [
            "self",
            "order_id",
            "data"
          ],
          "docstring": "Update order details, provider details, and line items in the database.\n\nArgs:\n    order_id: Order ID to update\n    data: Dictionary containing updated data\n    \nReturns:\n    bool: True if successful, False otherwise",
          "line_count": 2,
          "decorators": []
        }
      ],
      "docstring": "Database service for the Bill Review System.\nProvides data access methods with proper error handling and logging.",
      "inheritance": []
    },
    "HCFAService": {
      "file": "core\\services\\hcfa.py",
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "docstring": "Initialize the HCFA service.",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "get_failed_files",
          "args": [
            "self"
          ],
          "docstring": "Get all failed validation files with their details.\n\nReturns:\n    List[Dict]: List of failed files with their details",
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "get_hcfa_details",
          "args": [
            "self",
            "filename"
          ],
          "docstring": "Get detailed HCFA information for a specific file.\n\nArgs:\n    filename: Name of the HCFA file\n    \nReturns:\n    Optional[Dict]: HCFA details or None if not found",
          "line_count": 3,
          "decorators": []
        },
        {
          "name": "_read_hcfa_file",
          "args": [
            "self",
            "file_path"
          ],
          "docstring": "Read and validate a HCFA JSON file.\n\nArgs:\n    file_path: Path to the HCFA file\n    \nReturns:\n    Optional[Dict]: Validated HCFA data or None if invalid",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "_get_first_dos",
          "args": [
            "self",
            "data"
          ],
          "docstring": "Get the first date of service from service lines.\n\nArgs:\n    data: HCFA data dictionary\n    \nReturns:\n    str: First date of service or 'N/A' if not found",
          "line_count": 4,
          "decorators": []
        }
      ],
      "docstring": "Service for handling HCFA (CMS-1500) data operations.",
      "inheritance": []
    },
    "OTAService": {
      "file": "core\\services\\ota_service.py",
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "db_path"
          ],
          "docstring": "Initialize the OTA service with a database path.\n\nArgs:\n    db_path: Path to the SQLite database",
          "line_count": 5,
          "decorators": []
        },
        {
          "name": "_verify_current_otas_table",
          "args": [
            "self"
          ],
          "docstring": "Verify that the current_otas table exists in the database.\nCreates the table if it doesn't exist.",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "_get_connection",
          "args": [
            "self"
          ],
          "docstring": "Get a SQLite database connection with row factory enabled.\n\nReturns:\n    sqlite3.Connection: Database connection",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "get_order_otas",
          "args": [
            "self",
            "order_id"
          ],
          "docstring": "Get all OTA rates for an order.\n\nArgs:\n    order_id: Order ID\n\nReturns:\n    List of dictionaries containing OTA rate information",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "update_ota_rates",
          "args": [
            "self",
            "order_id",
            "line_items"
          ],
          "docstring": "Update OTA rates for specific line items.\n\nArgs:\n    order_id: Order ID\n    line_items: List of dictionaries with cpt_code and rate\n\nReturns:\n    Tuple of (success, message, updated_items)",
          "line_count": 5,
          "decorators": []
        }
      ],
      "docstring": "Service for managing OTA (One Time Agreement) rates in the database.\nHandles OTA rate lookups and updates for out-of-network providers.",
      "inheritance": []
    },
    "RateService": {
      "file": "core\\services\\rate_service.py",
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "db_path"
          ],
          "docstring": "Initialize the rate service with a database path.\n\nArgs:\n    db_path: Path to the SQLite database",
          "line_count": 5,
          "decorators": []
        },
        {
          "name": "_verify_ppo_table",
          "args": [
            "self"
          ],
          "docstring": "Verify that the ppo table exists in the database.\nCreates the table if it doesn't exist.",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "_get_connection",
          "args": [
            "self"
          ],
          "docstring": "Get a SQLite database connection with row factory enabled.\n\nReturns:\n    sqlite3.Connection: Database connection",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "get_provider_rates",
          "args": [
            "self",
            "tin"
          ],
          "docstring": "Get all rates for a provider by TIN.\n\nArgs:\n    tin: Provider's Tax ID Number\n\nReturns:\n    List of dictionaries containing rate information",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "get_provider_info",
          "args": [
            "self",
            "tin"
          ],
          "docstring": "Get provider information by TIN.\n\nArgs:\n    tin: Provider's Tax ID Number\n\nReturns:\n    Dictionary with provider information or empty dict if not found",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "update_line_item_rates",
          "args": [
            "self",
            "tin",
            "line_items",
            "state"
          ],
          "docstring": "Update rates for specific line items.\n\nArgs:\n    tin: Provider's Tax ID Number\n    line_items: List of dictionaries with cpt_code and rate\n    state: State code (default: 'XX')\n\nReturns:\n    Tuple of (success, message, updated_items)",
          "line_count": 8,
          "decorators": []
        },
        {
          "name": "update_category_rates",
          "args": [
            "self",
            "tin",
            "category_rates",
            "state"
          ],
          "docstring": "Update rates for entire categories of CPT codes.\n\nArgs:\n    tin: Provider's Tax ID Number\n    category_rates: Dictionary mapping categories to rates\n    state: State code (default: 'XX')\n\nReturns:\n    Tuple of (success, message, updated_categories)",
          "line_count": 9,
          "decorators": []
        },
        {
          "name": "_get_category_for_code",
          "args": [
            "self",
            "cpt_code"
          ],
          "docstring": "Determine which category a CPT code belongs to.\n\nArgs:\n    cpt_code: CPT code to categorize\n\nReturns:\n    Category name or 'Uncategorized'",
          "line_count": 5,
          "decorators": []
        }
      ],
      "docstring": "Service for managing provider rates in the database.\nHandles rate lookups and updates for individual CPT codes and categories.",
      "inheritance": []
    },
    "ValidationReporter": {
      "file": "core\\services\\reporter.py",
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "log_dir"
          ],
          "docstring": "Initialize the validation reporter.\n\nArgs:\n    log_dir: Directory for validation logs",
          "line_count": 6,
          "decorators": []
        },
        {
          "name": "add_result",
          "args": [
            "self",
            "result"
          ],
          "docstring": "Add a validation result to the report.\n\nArgs:\n    result: Validation result dictionary",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "add_results",
          "args": [
            "self",
            "results"
          ],
          "docstring": "Add multiple validation results to the report.\n\nArgs:\n    results: List of validation result dictionaries",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "generate_summary",
          "args": [
            "self"
          ],
          "docstring": "Generate summary statistics from validation results.\n\nReturns:\n    Dict: Summary statistics",
          "line_count": 13,
          "decorators": []
        },
        {
          "name": "generate_html_report",
          "args": [
            "self"
          ],
          "docstring": "Generate an HTML report for validation results.\n\nReturns:\n    str: Path to the HTML report file",
          "line_count": 32,
          "decorators": []
        },
        {
          "name": "save_report",
          "args": [
            "self",
            "include_html"
          ],
          "docstring": "Save validation report to files.\n\nArgs:\n    include_html: Whether to generate HTML report\n    \nReturns:\n    Dict: Paths to created report files",
          "line_count": 10,
          "decorators": []
        },
        {
          "name": "export_to_excel",
          "args": [
            "self"
          ],
          "docstring": "Export validation results to Excel.\n\nReturns:\n    str: Path to the Excel file",
          "line_count": 15,
          "decorators": []
        }
      ],
      "docstring": "Enhanced reporting service for generating detailed validation reports.\nProvides insights and statistics about validation results.",
      "inheritance": []
    }
  },
  "utilities": {
    "CodeMapper": {
      "file": "utils\\code_mapper.py",
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "clinical_equiv_path"
          ],
          "docstring": "Initialize the code mapper.\n\nArgs:\n    clinical_equiv_path: Path to clinical equivalence JSON file",
          "line_count": 5,
          "decorators": []
        },
        {
          "name": "_load_equivalence_map",
          "args": [
            "self",
            "config_path"
          ],
          "docstring": "Load clinical equivalence mapping from JSON file.\n\nArgs:\n    config_path: Path to the configuration file\n    \nReturns:\n    Dict: Clinical equivalence mapping",
          "line_count": 3,
          "decorators": []
        },
        {
          "name": "get_procedure_category",
          "args": [
            "self",
            "cpt_code"
          ],
          "docstring": "Get categories for a CPT code.\n\nArgs:\n    cpt_code: CPT code to categorize\n    \nReturns:\n    List[str]: Categories for the CPT code",
          "line_count": 5,
          "decorators": []
        },
        {
          "name": "get_body_part",
          "args": [
            "self",
            "cpt_code"
          ],
          "docstring": "Determine the body part from a CPT code.\n\nArgs:\n    cpt_code: CPT code to analyze\n    \nReturns:\n    Optional[str]: Body part or None if undetermined",
          "line_count": 6,
          "decorators": []
        },
        {
          "name": "find_equivalent_codes",
          "args": [
            "self",
            "cpt_code",
            "provider_tin"
          ],
          "docstring": "Find clinically equivalent CPT codes.\n\nArgs:\n    cpt_code: CPT code to find equivalents for\n    provider_tin: Optional provider TIN for provider-specific mappings\n    \nReturns:\n    List[str]: Equivalent CPT codes",
          "line_count": 6,
          "decorators": []
        },
        {
          "name": "is_similar_procedure",
          "args": [
            "self",
            "cpt_code1",
            "cpt_code2"
          ],
          "docstring": "Determine if two CPT codes represent similar procedures.\n\nArgs:\n    cpt_code1: First CPT code\n    cpt_code2: Second CPT code\n    \nReturns:\n    Tuple[bool, float]: (is_similar, similarity_score)",
          "line_count": 15,
          "decorators": []
        },
        {
          "name": "_get_common_prefix_length",
          "args": [
            "self",
            "code1",
            "code2"
          ],
          "docstring": "Get length of common prefix between two codes.",
          "line_count": 3,
          "decorators": []
        },
        {
          "name": "categorize_cpt_codes",
          "args": [
            "self",
            "cpt_codes"
          ],
          "docstring": "Categorize a set of CPT codes by procedure type and body part.\n\nArgs:\n    cpt_codes: Set of CPT codes to categorize\n    \nReturns:\n    Dict: Categorization by procedure type and body part",
          "line_count": 4,
          "decorators": []
        }
      ],
      "docstring": "Utility for mapping between CPT codes, finding equivalents, and categorizing procedures.",
      "inheritance": []
    },
    "LazyFile": {
      "file": "venv\\Lib\\site-packages\\click\\utils.py",
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "filename",
            "mode",
            "encoding",
            "errors",
            "atomic"
          ],
          "docstring": null,
          "line_count": 8,
          "decorators": []
        },
        {
          "name": "__getattr__",
          "args": [
            "self",
            "name"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__repr__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "open",
          "args": [
            "self"
          ],
          "docstring": "Opens the file if it's not yet open.  This call might fail with\na :exc:`FileError`.  Not handling this error will produce an error\nthat Click shows.",
          "line_count": 5,
          "decorators": []
        },
        {
          "name": "close",
          "args": [
            "self"
          ],
          "docstring": "Closes the underlying file, no matter what.",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "close_intelligently",
          "args": [
            "self"
          ],
          "docstring": "This function only closes the file if it was opened by the lazy\nfile wrapper.  For instance this will never close stdin.",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "__enter__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__exit__",
          "args": [
            "self",
            "exc_type",
            "exc_value",
            "tb"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__iter__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        }
      ],
      "docstring": "A lazy file works like a regular file but it does not fully open\nthe file but it does perform some basic checks early to see if the\nfilename parameter does make sense.  This is useful for safely opening\nfiles for writing.",
      "inheritance": []
    },
    "KeepOpenFile": {
      "file": "venv\\Lib\\site-packages\\click\\utils.py",
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "file"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__getattr__",
          "args": [
            "self",
            "name"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__enter__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__exit__",
          "args": [
            "self",
            "exc_type",
            "exc_value",
            "tb"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__repr__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__iter__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        }
      ],
      "docstring": null,
      "inheritance": []
    },
    "PacifyFlushWrapper": {
      "file": "venv\\Lib\\site-packages\\click\\utils.py",
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "wrapped"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "flush",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__getattr__",
          "args": [
            "self",
            "attr"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        }
      ],
      "docstring": "This wrapper is used to catch and suppress BrokenPipeErrors resulting\nfrom ``.flush()`` being called on broken pipe during the shutdown/final-GC\nof the Python interpreter. Notably ``.flush()`` is always called on\n``sys.stdout`` and ``sys.stderr``. So as to have minimal impact on any\nother cleanup code, and the case where the underlying file is not a broken\npipe, all calls and attributes are proxied.",
      "inheritance": []
    },
    "_IteratorToAsyncIterator": {
      "file": "venv\\Lib\\site-packages\\jinja2\\async_utils.py",
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "iterator"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__aiter__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        }
      ],
      "docstring": null,
      "inheritance": []
    },
    "_MissingType": {
      "file": "venv\\Lib\\site-packages\\jinja2\\utils.py",
      "methods": [
        {
          "name": "__repr__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__reduce__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        }
      ],
      "docstring": null,
      "inheritance": []
    },
    "_PassArg": {
      "file": "venv\\Lib\\site-packages\\jinja2\\utils.py",
      "methods": [
        {
          "name": "from_obj",
          "args": [
            "cls",
            "obj"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": [
            "classmethod"
          ]
        }
      ],
      "docstring": null,
      "inheritance": []
    },
    "LRUCache": {
      "file": "venv\\Lib\\site-packages\\jinja2\\utils.py",
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "capacity"
          ],
          "docstring": null,
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "_postinit",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 5,
          "decorators": []
        },
        {
          "name": "__getstate__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__setstate__",
          "args": [
            "self",
            "d"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "__getnewargs__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "copy",
          "args": [
            "self"
          ],
          "docstring": "Return a shallow copy of the instance.",
          "line_count": 5,
          "decorators": []
        },
        {
          "name": "get",
          "args": [
            "self",
            "key",
            "default"
          ],
          "docstring": "Return an item from the cache dict or `default`",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "setdefault",
          "args": [
            "self",
            "key",
            "default"
          ],
          "docstring": "Set `default` if the key is not in the cache otherwise\nleave unchanged. Return the value of this key.",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "clear",
          "args": [
            "self"
          ],
          "docstring": "Clear the cache.",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "__contains__",
          "args": [
            "self",
            "key"
          ],
          "docstring": "Check if a key exists in this cache.",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "__len__",
          "args": [
            "self"
          ],
          "docstring": "Return the current size of the cache.",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "__repr__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__getitem__",
          "args": [
            "self",
            "key"
          ],
          "docstring": "Get an item from the cache. Moves the item up so that it has the\nhighest priority then.\n\nRaise a `KeyError` if it does not exist.",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "__setitem__",
          "args": [
            "self",
            "key",
            "value"
          ],
          "docstring": "Sets the value for an item. Moves the item up so that it\nhas the highest priority then.",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "__delitem__",
          "args": [
            "self",
            "key"
          ],
          "docstring": "Remove an item from the cache dict.\nRaise a `KeyError` if it does not exist.",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "items",
          "args": [
            "self"
          ],
          "docstring": "Return a list of items.",
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "values",
          "args": [
            "self"
          ],
          "docstring": "Return a list of all values.",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "keys",
          "args": [
            "self"
          ],
          "docstring": "Return a list of all keys ordered by most recent usage.",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "__iter__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__reversed__",
          "args": [
            "self"
          ],
          "docstring": "Iterate over the keys in the cache dict, oldest items\ncoming first.",
          "line_count": 2,
          "decorators": []
        }
      ],
      "docstring": "A simple LRU Cache implementation.",
      "inheritance": []
    },
    "Cycler": {
      "file": "venv\\Lib\\site-packages\\jinja2\\utils.py",
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 3,
          "decorators": []
        },
        {
          "name": "reset",
          "args": [
            "self"
          ],
          "docstring": "Resets the current item to the first item.",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "current",
          "args": [
            "self"
          ],
          "docstring": "Return the current item. Equivalent to the item that will be\nreturned next time :meth:`next` is called.",
          "line_count": 2,
          "decorators": [
            "property"
          ]
        },
        {
          "name": "next",
          "args": [
            "self"
          ],
          "docstring": "Return the current item, then advance :attr:`current` to the\nnext item.",
          "line_count": 4,
          "decorators": []
        }
      ],
      "docstring": "Cycle through values by yield them one at a time, then restarting\nonce the end is reached. Available as ``cycler`` in templates.\n\nSimilar to ``loop.cycle``, but can be used outside loops or across\nmultiple loops. For example, render a list of folders and files in a\nlist, alternating giving them \"odd\" and \"even\" classes.\n\n.. code-block:: html+jinja\n\n    {% set row_class = cycler(\"odd\", \"even\") %}\n    <ul class=\"browser\">\n    {% for folder in folders %}\n      <li class=\"folder {{ row_class.next() }}\">{{ folder }}\n    {% endfor %}\n    {% for file in files %}\n      <li class=\"file {{ row_class.next() }}\">{{ file }}\n    {% endfor %}\n    </ul>\n\n:param items: Each positional argument will be yielded in the order\n    given for each cycle.\n\n.. versionadded:: 2.1",
      "inheritance": []
    },
    "Joiner": {
      "file": "venv\\Lib\\site-packages\\jinja2\\utils.py",
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "sep"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "__call__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        }
      ],
      "docstring": "A joining helper for templates.",
      "inheritance": []
    },
    "Namespace": {
      "file": "venv\\Lib\\site-packages\\jinja2\\utils.py",
      "methods": [
        {
          "name": "__init__",
          "args": [],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "__getattribute__",
          "args": [
            "self",
            "name"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "__setitem__",
          "args": [
            "self",
            "name",
            "value"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__repr__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        }
      ],
      "docstring": "A namespace object that can hold arbitrary attributes.  It may be\ninitialized from a dictionary or with keyword arguments.",
      "inheritance": []
    },
    "cached_property": {
      "file": "venv\\Lib\\site-packages\\werkzeug\\utils.py",
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "fget",
            "name",
            "doc"
          ],
          "docstring": null,
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "__set__",
          "args": [
            "self",
            "obj",
            "value"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__get__",
          "args": [
            "self",
            "obj",
            "type"
          ],
          "docstring": null,
          "line_count": 5,
          "decorators": []
        },
        {
          "name": "__delete__",
          "args": [
            "self",
            "obj"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        }
      ],
      "docstring": "A :func:`property` that is only evaluated once. Subsequent access\nreturns the cached value. Setting the property sets the cached\nvalue. Deleting the property clears the cached value, accessing it\nagain will evaluate it again.\n\n.. code-block:: python\n\n    class Example:\n        @cached_property\n        def value(self):\n            # calculate something important here\n            return 42\n\n    e = Example()\n    e.value  # evaluates\n    e.value  # uses cache\n    e.value = 16  # sets cache\n    del e.value  # clears cache\n\nIf the class defines ``__slots__``, it must add ``_cache_{name}`` as\na slot. Alternatively, it can add ``__dict__``, but that's usually\nnot desirable.\n\n.. versionchanged:: 2.1\n    Works with ``__slots__``.\n\n.. versionchanged:: 2.0\n    ``del obj.name`` clears the cached value.",
      "inheritance": [
        "property"
      ]
    },
    "environ_property": {
      "file": "venv\\Lib\\site-packages\\werkzeug\\utils.py",
      "methods": [
        {
          "name": "lookup",
          "args": [
            "self",
            "obj"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        }
      ],
      "docstring": "Maps request attributes to environment variables. This works not only\nfor the Werkzeug request object, but also any other class with an\nenviron attribute:\n\n>>> class Test(object):\n...     environ = {'key': 'value'}\n...     test = environ_property('key')\n>>> var = Test()\n>>> var.test\n'value'\n\nIf you pass it a second value it's used as default if the key does not\nexist, the third one can be a converter that takes a value and converts\nit.  If it raises :exc:`ValueError` or :exc:`TypeError` the default value\nis used. If no default value is provided `None` is used.\n\nPer default the property is read only.  You have to explicitly enable it\nby passing ``read_only=False`` to the constructor.",
      "inheritance": []
    },
    "header_property": {
      "file": "venv\\Lib\\site-packages\\werkzeug\\utils.py",
      "methods": [
        {
          "name": "lookup",
          "args": [
            "self",
            "obj"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        }
      ],
      "docstring": "Like `environ_property` but for headers.",
      "inheritance": []
    },
    "ImportStringError": {
      "file": "venv\\Lib\\site-packages\\werkzeug\\utils.py",
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "import_name",
            "exception"
          ],
          "docstring": null,
          "line_count": 7,
          "decorators": []
        },
        {
          "name": "__repr__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        }
      ],
      "docstring": "Provides information about a failed :func:`import_string` attempt.",
      "inheritance": [
        "ImportError"
      ]
    },
    "InvalidName": {
      "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\utils.py",
      "methods": [],
      "docstring": "An invalid distribution name; users should refer to the packaging user guide.",
      "inheritance": [
        "ValueError"
      ]
    },
    "InvalidWheelFilename": {
      "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\utils.py",
      "methods": [],
      "docstring": "An invalid wheel filename was found, users should refer to PEP 427.",
      "inheritance": [
        "ValueError"
      ]
    },
    "InvalidSdistFilename": {
      "file": "venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\utils.py",
      "methods": [],
      "docstring": "An invalid sdist filename was found, users should refer to the packaging user guide.",
      "inheritance": [
        "ValueError"
      ]
    },
    "PipDeprecationWarning": {
      "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\deprecation.py",
      "methods": [],
      "docstring": null,
      "inheritance": [
        "Warning"
      ]
    },
    "Hashes": {
      "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\hashes.py",
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "hashes"
          ],
          "docstring": ":param hashes: A dict of algorithm names pointing to lists of allowed\n    hex digests",
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "__and__",
          "args": [
            "self",
            "other"
          ],
          "docstring": null,
          "line_count": 6,
          "decorators": []
        },
        {
          "name": "digest_count",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": [
            "property"
          ]
        },
        {
          "name": "is_hash_allowed",
          "args": [
            "self",
            "hash_name",
            "hex_digest"
          ],
          "docstring": "Return whether the given hex digest is allowed.",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "check_against_chunks",
          "args": [
            "self",
            "chunks"
          ],
          "docstring": "Check good hashes against ones built from iterable of chunks of\ndata.\n\nRaise HashMismatch if none match.",
          "line_count": 6,
          "decorators": []
        },
        {
          "name": "_raise",
          "args": [
            "self",
            "gots"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "check_against_file",
          "args": [
            "self",
            "file"
          ],
          "docstring": "Check good hashes against a file-like object\n\nRaise HashMismatch if none match.",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "check_against_path",
          "args": [
            "self",
            "path"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "has_one_of",
          "args": [
            "self",
            "hashes"
          ],
          "docstring": "Return whether any of the given hashes are allowed.",
          "line_count": 3,
          "decorators": []
        },
        {
          "name": "__bool__",
          "args": [
            "self"
          ],
          "docstring": "Return whether I know any known-good hashes.",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "__eq__",
          "args": [
            "self",
            "other"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "__hash__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        }
      ],
      "docstring": "A wrapper that builds multiple hashes at once and checks them against\nknown-good values",
      "inheritance": []
    },
    "MissingHashes": {
      "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\hashes.py",
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "docstring": "Don't offer the ``hashes`` kwarg.",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "_raise",
          "args": [
            "self",
            "gots"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        }
      ],
      "docstring": "A workalike for Hashes used when we're missing a hash for a requirement\n\nIt computes the actual hash of the requirement and raises a HashMissing\nexception showing it to the user.",
      "inheritance": [
        "Hashes"
      ]
    },
    "BrokenStdoutLoggingError": {
      "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\logging.py",
      "methods": [],
      "docstring": "Raised if BrokenPipeError occurs for the stdout stream while logging.",
      "inheritance": [
        "Exception"
      ]
    },
    "IndentingFormatter": {
      "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\logging.py",
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "docstring": "A logging.Formatter that obeys the indent_log() context manager.\n\n:param add_timestamp: A bool indicating output lines should be prefixed\n    with their record's timestamp.",
          "line_count": 3,
          "decorators": []
        },
        {
          "name": "get_message_start",
          "args": [
            "self",
            "formatted",
            "levelno"
          ],
          "docstring": "Return the start of the formatted log message (not counting the\nprefix to add to each line).",
          "line_count": 5,
          "decorators": []
        },
        {
          "name": "format",
          "args": [
            "self",
            "record"
          ],
          "docstring": "Calls the standard formatter, but will indent all of the log message\nlines by our current indentation level.",
          "line_count": 9,
          "decorators": []
        }
      ],
      "docstring": null,
      "inheritance": []
    },
    "IndentedRenderable": {
      "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\logging.py",
      "methods": [
        {
          "name": "__rich_console__",
          "args": [
            "self",
            "console",
            "options"
          ],
          "docstring": null,
          "line_count": 3,
          "decorators": []
        }
      ],
      "docstring": null,
      "inheritance": []
    },
    "PipConsole": {
      "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\logging.py",
      "methods": [
        {
          "name": "on_broken_pipe",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        }
      ],
      "docstring": null,
      "inheritance": [
        "Console"
      ]
    },
    "RichPipStreamHandler": {
      "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\logging.py",
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "stream",
            "no_color"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "emit",
          "args": [
            "self",
            "record"
          ],
          "docstring": null,
          "line_count": 3,
          "decorators": []
        },
        {
          "name": "handleError",
          "args": [
            "self",
            "record"
          ],
          "docstring": "Called when logging is unable to log some output.",
          "line_count": 4,
          "decorators": []
        }
      ],
      "docstring": null,
      "inheritance": [
        "RichHandler"
      ]
    },
    "BetterRotatingFileHandler": {
      "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\logging.py",
      "methods": [
        {
          "name": "_open",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        }
      ],
      "docstring": null,
      "inheritance": []
    },
    "MaxLevelFilter": {
      "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\logging.py",
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "level"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "filter",
          "args": [
            "self",
            "record"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        }
      ],
      "docstring": null,
      "inheritance": [
        "Filter"
      ]
    },
    "ExcludeLoggerFilter": {
      "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\logging.py",
      "methods": [
        {
          "name": "filter",
          "args": [
            "self",
            "record"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        }
      ],
      "docstring": "A logging Filter that excludes records from a logger (or its children).",
      "inheritance": [
        "Filter"
      ]
    },
    "StreamWrapper": {
      "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\misc.py",
      "methods": [
        {
          "name": "from_stream",
          "args": [
            "cls",
            "orig_stream"
          ],
          "docstring": null,
          "line_count": 3,
          "decorators": [
            "classmethod"
          ]
        },
        {
          "name": "encoding",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": [
            "property"
          ]
        }
      ],
      "docstring": null,
      "inheritance": [
        "StringIO"
      ]
    },
    "HiddenText": {
      "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\misc.py",
      "methods": [
        {
          "name": "__repr__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__str__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__eq__",
          "args": [
            "self",
            "other"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        }
      ],
      "docstring": null,
      "inheritance": []
    },
    "ConfiguredBuildBackendHookCaller": {
      "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\misc.py",
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "config_holder",
            "source_dir",
            "build_backend",
            "backend_path",
            "runner",
            "python_executable"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "build_wheel",
          "args": [
            "self",
            "wheel_directory",
            "config_settings",
            "metadata_directory"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "build_sdist",
          "args": [
            "self",
            "sdist_directory",
            "config_settings"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "build_editable",
          "args": [
            "self",
            "wheel_directory",
            "config_settings",
            "metadata_directory"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "get_requires_for_build_wheel",
          "args": [
            "self",
            "config_settings"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "get_requires_for_build_sdist",
          "args": [
            "self",
            "config_settings"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "get_requires_for_build_editable",
          "args": [
            "self",
            "config_settings"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "prepare_metadata_for_build_wheel",
          "args": [
            "self",
            "metadata_directory",
            "config_settings",
            "_allow_fallback"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "prepare_metadata_for_build_editable",
          "args": [
            "self",
            "metadata_directory",
            "config_settings",
            "_allow_fallback"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        }
      ],
      "docstring": null,
      "inheritance": [
        "BuildBackendHookCaller"
      ]
    },
    "TempDirectoryTypeRegistry": {
      "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\temp_dir.py",
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "set_delete",
          "args": [
            "self",
            "kind",
            "value"
          ],
          "docstring": "Indicate whether a TempDirectory of the given kind should be\nauto-deleted.",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "get_delete",
          "args": [
            "self",
            "kind"
          ],
          "docstring": "Get configured auto-delete flag for a given TempDirectory type,\ndefault True.",
          "line_count": 2,
          "decorators": []
        }
      ],
      "docstring": "Manages temp directory behavior",
      "inheritance": []
    },
    "_Default": {
      "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\temp_dir.py",
      "methods": [],
      "docstring": null,
      "inheritance": []
    },
    "TempDirectory": {
      "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\temp_dir.py",
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "path",
            "delete",
            "kind",
            "globally_managed",
            "ignore_cleanup_errors"
          ],
          "docstring": null,
          "line_count": 9,
          "decorators": []
        },
        {
          "name": "path",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": [
            "property"
          ]
        },
        {
          "name": "__repr__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__enter__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__exit__",
          "args": [
            "self",
            "exc",
            "value",
            "tb"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "_create",
          "args": [
            "self",
            "kind"
          ],
          "docstring": "Create a temporary directory and store its path in self.path",
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "cleanup",
          "args": [
            "self"
          ],
          "docstring": "Remove the temporary directory created and reset state",
          "line_count": 6,
          "decorators": []
        }
      ],
      "docstring": "Helper class that owns and cleans up a temporary directory.\n\nThis class can be used as a context manager or as an OO representation of a\ntemporary directory.\n\nAttributes:\n    path\n        Location to the created temporary directory\n    delete\n        Whether the directory should be deleted when exiting\n        (when used as a contextmanager)\n\nMethods:\n    cleanup()\n        Deletes the temporary directory\n\nWhen used as a context manager, if the delete attribute is True, on\nexiting the context the temporary directory is deleted.",
      "inheritance": []
    },
    "AdjacentTempDirectory": {
      "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\temp_dir.py",
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "original",
            "delete"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "_generate_names",
          "args": [
            "cls",
            "name"
          ],
          "docstring": "Generates a series of temporary names.\n\nThe algorithm replaces the leading characters in the name\nwith ones that are valid filesystem characters, but are not\nvalid package names (for both Python and pip definitions of\npackage).",
          "line_count": 3,
          "decorators": [
            "classmethod"
          ]
        },
        {
          "name": "_create",
          "args": [
            "self",
            "kind"
          ],
          "docstring": null,
          "line_count": 4,
          "decorators": []
        }
      ],
      "docstring": "Helper class that creates a temporary directory adjacent to a real one.\n\nAttributes:\n    original\n        The original directory to create a temp directory for.\n    path\n        After calling create() or entering, contains the full\n        path to the temporary directory.\n    delete\n        Whether the directory should be deleted when exiting\n        (when used as a contextmanager)",
      "inheritance": [
        "TempDirectory"
      ]
    },
    "VerboseLogger": {
      "file": "venv\\Lib\\site-packages\\pip\\_internal\\utils\\_log.py",
      "methods": [
        {
          "name": "verbose",
          "args": [
            "self",
            "msg"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        }
      ],
      "docstring": "Custom Logger, defining a verbose log-level\n\nVERBOSE is between INFO and DEBUG.",
      "inheritance": []
    },
    "BoundDictionary": {
      "file": "venv\\Lib\\site-packages\\openpyxl\\utils\\bound_dictionary.py",
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "reference"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "__getitem__",
          "args": [
            "self",
            "key"
          ],
          "docstring": null,
          "line_count": 3,
          "decorators": []
        }
      ],
      "docstring": "A default dictionary where elements are tightly coupled.\n\nThe factory method is responsible for binding the parent object to the child.\n\nIf a reference attribute is assigned then child objects will have the key assigned to this.\n\nOtherwise it's just a defaultdict.",
      "inheritance": [
        "defaultdict"
      ]
    },
    "CellCoordinatesException": {
      "file": "venv\\Lib\\site-packages\\openpyxl\\utils\\exceptions.py",
      "methods": [],
      "docstring": "Error for converting between numeric and A1-style cell references.",
      "inheritance": [
        "Exception"
      ]
    },
    "IllegalCharacterError": {
      "file": "venv\\Lib\\site-packages\\openpyxl\\utils\\exceptions.py",
      "methods": [],
      "docstring": "The data submitted which cannot be used directly in Excel files. It\nmust be removed or escaped.",
      "inheritance": [
        "Exception"
      ]
    },
    "NamedRangeException": {
      "file": "venv\\Lib\\site-packages\\openpyxl\\utils\\exceptions.py",
      "methods": [],
      "docstring": "Error for badly formatted named ranges.",
      "inheritance": [
        "Exception"
      ]
    },
    "SheetTitleException": {
      "file": "venv\\Lib\\site-packages\\openpyxl\\utils\\exceptions.py",
      "methods": [],
      "docstring": "Error for bad sheet names.",
      "inheritance": [
        "Exception"
      ]
    },
    "InvalidFileException": {
      "file": "venv\\Lib\\site-packages\\openpyxl\\utils\\exceptions.py",
      "methods": [],
      "docstring": "Error for trying to open a non-ooxml file.",
      "inheritance": [
        "Exception"
      ]
    },
    "ReadOnlyWorkbookException": {
      "file": "venv\\Lib\\site-packages\\openpyxl\\utils\\exceptions.py",
      "methods": [],
      "docstring": "Error for trying to modify a read-only workbook",
      "inheritance": [
        "Exception"
      ]
    },
    "WorkbookAlreadySaved": {
      "file": "venv\\Lib\\site-packages\\openpyxl\\utils\\exceptions.py",
      "methods": [],
      "docstring": "Error when attempting to perform operations on a dump workbook\nwhile it has already been dumped once",
      "inheritance": [
        "Exception"
      ]
    },
    "IndexedList": {
      "file": "venv\\Lib\\site-packages\\openpyxl\\utils\\indexed_list.py",
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "iterable"
          ],
          "docstring": null,
          "line_count": 3,
          "decorators": []
        },
        {
          "name": "_rebuild_dict",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "__contains__",
          "args": [
            "self",
            "value"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "index",
          "args": [
            "self",
            "value"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "append",
          "args": [
            "self",
            "value"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "add",
          "args": [
            "self",
            "value"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        }
      ],
      "docstring": "List with optimised access by value\nBased on Alex Martelli's recipe\n\nhttp://code.activestate.com/recipes/52303-the-auxiliary-dictionary-idiom-for-sequences-with-/",
      "inheritance": [
        "list"
      ]
    },
    "_Deprecate": {
      "file": "venv\\Lib\\site-packages\\numpy\\lib\\_utils_impl.py",
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "old_name",
            "new_name",
            "message"
          ],
          "docstring": null,
          "line_count": 3,
          "decorators": []
        },
        {
          "name": "__call__",
          "args": [
            "self",
            "func"
          ],
          "docstring": "Decorator call.  Refer to ``decorate``.",
          "line_count": 13,
          "decorators": []
        }
      ],
      "docstring": "Decorator class to deprecate old functions.\n\nRefer to `deprecate` for details.\n\nSee Also\n--------\ndeprecate",
      "inheritance": []
    },
    "Infinity": {
      "file": "venv\\Lib\\site-packages\\numpy\\_utils\\_pep440.py",
      "methods": [
        {
          "name": "__repr__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__hash__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__lt__",
          "args": [
            "self",
            "other"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__le__",
          "args": [
            "self",
            "other"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__eq__",
          "args": [
            "self",
            "other"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__ne__",
          "args": [
            "self",
            "other"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__gt__",
          "args": [
            "self",
            "other"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__ge__",
          "args": [
            "self",
            "other"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__neg__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        }
      ],
      "docstring": null,
      "inheritance": []
    },
    "NegativeInfinity": {
      "file": "venv\\Lib\\site-packages\\numpy\\_utils\\_pep440.py",
      "methods": [
        {
          "name": "__repr__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__hash__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__lt__",
          "args": [
            "self",
            "other"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__le__",
          "args": [
            "self",
            "other"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__eq__",
          "args": [
            "self",
            "other"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__ne__",
          "args": [
            "self",
            "other"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__gt__",
          "args": [
            "self",
            "other"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__ge__",
          "args": [
            "self",
            "other"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__neg__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        }
      ],
      "docstring": null,
      "inheritance": []
    },
    "InvalidVersion": {
      "file": "venv\\Lib\\site-packages\\numpy\\_utils\\_pep440.py",
      "methods": [],
      "docstring": "An invalid version was found, users should refer to PEP 440.",
      "inheritance": [
        "ValueError"
      ]
    },
    "_BaseVersion": {
      "file": "venv\\Lib\\site-packages\\numpy\\_utils\\_pep440.py",
      "methods": [
        {
          "name": "__hash__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__lt__",
          "args": [
            "self",
            "other"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__le__",
          "args": [
            "self",
            "other"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__eq__",
          "args": [
            "self",
            "other"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__ge__",
          "args": [
            "self",
            "other"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__gt__",
          "args": [
            "self",
            "other"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__ne__",
          "args": [
            "self",
            "other"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "_compare",
          "args": [
            "self",
            "other",
            "method"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        }
      ],
      "docstring": null,
      "inheritance": []
    },
    "LegacyVersion": {
      "file": "venv\\Lib\\site-packages\\numpy\\_utils\\_pep440.py",
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "version"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "__str__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__repr__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "public",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": [
            "property"
          ]
        },
        {
          "name": "base_version",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": [
            "property"
          ]
        },
        {
          "name": "local",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": [
            "property"
          ]
        },
        {
          "name": "is_prerelease",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": [
            "property"
          ]
        },
        {
          "name": "is_postrelease",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": [
            "property"
          ]
        }
      ],
      "docstring": null,
      "inheritance": [
        "_BaseVersion"
      ]
    },
    "Version": {
      "file": "venv\\Lib\\site-packages\\numpy\\_utils\\_pep440.py",
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "version"
          ],
          "docstring": null,
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "__repr__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__str__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 8,
          "decorators": []
        },
        {
          "name": "public",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": [
            "property"
          ]
        },
        {
          "name": "base_version",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 4,
          "decorators": [
            "property"
          ]
        },
        {
          "name": "local",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": [
            "property"
          ]
        },
        {
          "name": "is_prerelease",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": [
            "property"
          ]
        },
        {
          "name": "is_postrelease",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": [
            "property"
          ]
        }
      ],
      "docstring": null,
      "inheritance": [
        "_BaseVersion"
      ]
    },
    "_GenericTest": {
      "file": "venv\\Lib\\site-packages\\numpy\\testing\\tests\\test_utils.py",
      "methods": [
        {
          "name": "_test_equal",
          "args": [
            "self",
            "a",
            "b"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "_test_not_equal",
          "args": [
            "self",
            "a",
            "b"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "test_array_rank1_eq",
          "args": [
            "self"
          ],
          "docstring": "Test two equal array of rank 1 are found equal.",
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "test_array_rank1_noteq",
          "args": [
            "self"
          ],
          "docstring": "Test two different array of rank 1 are found not equal.",
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "test_array_rank2_eq",
          "args": [
            "self"
          ],
          "docstring": "Test two equal array of rank 2 are found equal.",
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "test_array_diffshape",
          "args": [
            "self"
          ],
          "docstring": "Test two arrays with different shapes are found not equal.",
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "test_objarray",
          "args": [
            "self"
          ],
          "docstring": "Test object arrays.",
          "line_count": 3,
          "decorators": []
        },
        {
          "name": "test_array_likes",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        }
      ],
      "docstring": null,
      "inheritance": []
    },
    "TestArrayEqual": {
      "file": "venv\\Lib\\site-packages\\numpy\\testing\\tests\\test_utils.py",
      "methods": [
        {
          "name": "setup_method",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "test_generic_rank1",
          "args": [
            "self"
          ],
          "docstring": "Test rank 1 array for all dtypes.",
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "test_0_ndim_array",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 13,
          "decorators": []
        },
        {
          "name": "test_generic_rank3",
          "args": [
            "self"
          ],
          "docstring": "Test rank 3 array for all dtypes.",
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "test_nan_array",
          "args": [
            "self"
          ],
          "docstring": "Test arrays with nan values in them.",
          "line_count": 6,
          "decorators": []
        },
        {
          "name": "test_string_arrays",
          "args": [
            "self"
          ],
          "docstring": "Test two arrays with different shapes are found not equal.",
          "line_count": 6,
          "decorators": []
        },
        {
          "name": "test_recarrays",
          "args": [
            "self"
          ],
          "docstring": "Test record arrays.",
          "line_count": 10,
          "decorators": []
        },
        {
          "name": "test_masked_nan_inf",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 8,
          "decorators": []
        },
        {
          "name": "test_subclass_that_overrides_eq",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 14,
          "decorators": []
        },
        {
          "name": "test_subclass_that_does_not_implement_npall",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 7,
          "decorators": []
        },
        {
          "name": "test_suppress_overflow_warnings",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "test_array_vs_scalar_is_equal",
          "args": [
            "self"
          ],
          "docstring": "Test comparing an array with a scalar when all values are equal.",
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "test_array_vs_array_not_equal",
          "args": [
            "self"
          ],
          "docstring": "Test comparing an array with a scalar when not all values equal.",
          "line_count": 8,
          "decorators": []
        },
        {
          "name": "test_array_vs_scalar_strict",
          "args": [
            "self"
          ],
          "docstring": "Test comparing an array with a scalar with strict option.",
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "test_array_vs_array_strict",
          "args": [
            "self"
          ],
          "docstring": "Test comparing two arrays with strict option.",
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "test_array_vs_float_array_strict",
          "args": [
            "self"
          ],
          "docstring": "Test comparing two arrays with strict option.",
          "line_count": 4,
          "decorators": []
        }
      ],
      "docstring": null,
      "inheritance": [
        "_GenericTest"
      ]
    },
    "TestBuildErrorMessage": {
      "file": "venv\\Lib\\site-packages\\numpy\\testing\\tests\\test_utils.py",
      "methods": [
        {
          "name": "test_build_err_msg_defaults",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 6,
          "decorators": []
        },
        {
          "name": "test_build_err_msg_no_verbose",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 6,
          "decorators": []
        },
        {
          "name": "test_build_err_msg_custom_names",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 6,
          "decorators": []
        },
        {
          "name": "test_build_err_msg_custom_precision",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 6,
          "decorators": []
        }
      ],
      "docstring": null,
      "inheritance": []
    },
    "TestEqual": {
      "file": "venv\\Lib\\site-packages\\numpy\\testing\\tests\\test_utils.py",
      "methods": [
        {
          "name": "setup_method",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "test_nan_items",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "test_inf_items",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 3,
          "decorators": []
        },
        {
          "name": "test_datetime",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "test_nat_items",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 11,
          "decorators": []
        },
        {
          "name": "test_non_numeric",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "test_complex_item",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 5,
          "decorators": []
        },
        {
          "name": "test_negative_zero",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "test_complex",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "test_object",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 3,
          "decorators": []
        }
      ],
      "docstring": null,
      "inheritance": [
        "TestArrayEqual"
      ]
    },
    "TestArrayAlmostEqual": {
      "file": "venv\\Lib\\site-packages\\numpy\\testing\\tests\\test_utils.py",
      "methods": [
        {
          "name": "setup_method",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "test_closeness",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 11,
          "decorators": []
        },
        {
          "name": "test_simple",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 6,
          "decorators": []
        },
        {
          "name": "test_array_vs_scalar",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 12,
          "decorators": []
        },
        {
          "name": "test_nan",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 7,
          "decorators": []
        },
        {
          "name": "test_inf",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 6,
          "decorators": []
        },
        {
          "name": "test_subclass",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 21,
          "decorators": []
        },
        {
          "name": "test_subclass_2",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 8,
          "decorators": []
        },
        {
          "name": "test_subclass_that_cannot_be_bool",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 3,
          "decorators": []
        }
      ],
      "docstring": null,
      "inheritance": [
        "_GenericTest"
      ]
    },
    "TestAlmostEqual": {
      "file": "venv\\Lib\\site-packages\\numpy\\testing\\tests\\test_utils.py",
      "methods": [
        {
          "name": "setup_method",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "test_closeness",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "test_nan_item",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "test_inf_item",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "test_simple_item",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "test_complex_item",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 6,
          "decorators": []
        },
        {
          "name": "test_complex",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 6,
          "decorators": []
        },
        {
          "name": "test_error_message",
          "args": [
            "self"
          ],
          "docstring": "Check the message is formatted correctly for the decimal value.\nAlso check the message when input includes inf or nan (gh12200)",
          "line_count": 15,
          "decorators": []
        },
        {
          "name": "test_error_message_2",
          "args": [
            "self"
          ],
          "docstring": "Check the message is formatted correctly ",
          "line_count": 10,
          "decorators": []
        },
        {
          "name": "test_subclass_that_cannot_be_bool",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 3,
          "decorators": []
        }
      ],
      "docstring": null,
      "inheritance": [
        "_GenericTest"
      ]
    },
    "TestApproxEqual": {
      "file": "venv\\Lib\\site-packages\\numpy\\testing\\tests\\test_utils.py",
      "methods": [
        {
          "name": "setup_method",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "test_simple_0d_arrays",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 5,
          "decorators": []
        },
        {
          "name": "test_simple_items",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 6,
          "decorators": []
        },
        {
          "name": "test_nan_array",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 7,
          "decorators": []
        },
        {
          "name": "test_nan_items",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 7,
          "decorators": []
        }
      ],
      "docstring": null,
      "inheritance": []
    },
    "TestArrayAssertLess": {
      "file": "venv\\Lib\\site-packages\\numpy\\testing\\tests\\test_utils.py",
      "methods": [
        {
          "name": "setup_method",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "test_simple_arrays",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 11,
          "decorators": []
        },
        {
          "name": "test_rank2",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 8,
          "decorators": []
        },
        {
          "name": "test_rank3",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 8,
          "decorators": []
        },
        {
          "name": "test_simple_items",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 10,
          "decorators": []
        },
        {
          "name": "test_simple_items_and_array",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 11,
          "decorators": []
        },
        {
          "name": "test_zeroes",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 11,
          "decorators": []
        },
        {
          "name": "test_nan_noncompare",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 8,
          "decorators": []
        },
        {
          "name": "test_nan_noncompare_array",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 10,
          "decorators": []
        },
        {
          "name": "test_inf_compare",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 10,
          "decorators": []
        },
        {
          "name": "test_inf_compare_array",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 8,
          "decorators": []
        },
        {
          "name": "test_strict",
          "args": [
            "self"
          ],
          "docstring": "Test the behavior of the `strict` option.",
          "line_count": 8,
          "decorators": []
        }
      ],
      "docstring": null,
      "inheritance": []
    },
    "TestWarns": {
      "file": "venv\\Lib\\site-packages\\numpy\\testing\\tests\\test_utils.py",
      "methods": [
        {
          "name": "test_warn",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 7,
          "decorators": []
        },
        {
          "name": "test_context_manager",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 6,
          "decorators": []
        },
        {
          "name": "test_args",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 8,
          "decorators": []
        },
        {
          "name": "test_warn_wrong_warning",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 4,
          "decorators": []
        }
      ],
      "docstring": null,
      "inheritance": []
    },
    "TestAssertAllclose": {
      "file": "venv\\Lib\\site-packages\\numpy\\testing\\tests\\test_utils.py",
      "methods": [
        {
          "name": "test_simple",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 26,
          "decorators": []
        },
        {
          "name": "test_min_int",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "test_report_fail_percentage",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "test_equal_nan",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 3,
          "decorators": []
        },
        {
          "name": "test_not_equal_nan",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 3,
          "decorators": []
        },
        {
          "name": "test_equal_nan_default",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 6,
          "decorators": []
        },
        {
          "name": "test_report_max_relative_error",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "test_timedelta",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "test_error_message_unsigned",
          "args": [
            "self"
          ],
          "docstring": "Check the message is formatted correctly when overflow can occur\n(gh21768)",
          "line_count": 5,
          "decorators": []
        },
        {
          "name": "test_strict",
          "args": [
            "self"
          ],
          "docstring": "Test the behavior of the `strict` option.",
          "line_count": 7,
          "decorators": []
        }
      ],
      "docstring": null,
      "inheritance": []
    },
    "TestArrayAlmostEqualNulp": {
      "file": "venv\\Lib\\site-packages\\numpy\\testing\\tests\\test_utils.py",
      "methods": [
        {
          "name": "test_float64_pass",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 10,
          "decorators": []
        },
        {
          "name": "test_float64_fail",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 10,
          "decorators": []
        },
        {
          "name": "test_float64_ignore_nan",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 6,
          "decorators": []
        },
        {
          "name": "test_float32_pass",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 10,
          "decorators": []
        },
        {
          "name": "test_float32_fail",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 10,
          "decorators": []
        },
        {
          "name": "test_float32_ignore_nan",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 6,
          "decorators": []
        },
        {
          "name": "test_float16_pass",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 10,
          "decorators": []
        },
        {
          "name": "test_float16_fail",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 10,
          "decorators": []
        },
        {
          "name": "test_float16_ignore_nan",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 6,
          "decorators": []
        },
        {
          "name": "test_complex128_pass",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 17,
          "decorators": []
        },
        {
          "name": "test_complex128_fail",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 17,
          "decorators": []
        },
        {
          "name": "test_complex64_pass",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 17,
          "decorators": []
        },
        {
          "name": "test_complex64_fail",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 17,
          "decorators": []
        }
      ],
      "docstring": null,
      "inheritance": []
    },
    "TestULP": {
      "file": "venv\\Lib\\site-packages\\numpy\\testing\\tests\\test_utils.py",
      "methods": [
        {
          "name": "test_equal",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "test_single",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "test_double",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "test_inf",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "test_nan",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        }
      ],
      "docstring": null,
      "inheritance": []
    },
    "TestStringEqual": {
      "file": "venv\\Lib\\site-packages\\numpy\\testing\\tests\\test_utils.py",
      "methods": [
        {
          "name": "test_simple",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 6,
          "decorators": []
        },
        {
          "name": "test_regex",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        }
      ],
      "docstring": null,
      "inheritance": []
    },
    "my_cacw": {
      "file": "venv\\Lib\\site-packages\\numpy\\testing\\tests\\test_utils.py",
      "methods": [],
      "docstring": null,
      "inheritance": [
        "clear_and_catch_warnings"
      ]
    },
    "TestAssertNoGcCycles": {
      "file": "venv\\Lib\\site-packages\\numpy\\testing\\tests\\test_utils.py",
      "methods": [
        {
          "name": "test_passes",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 3,
          "decorators": []
        },
        {
          "name": "test_asserts",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 3,
          "decorators": []
        },
        {
          "name": "test_fails",
          "args": [
            "self"
          ],
          "docstring": "Test that in cases where the garbage cannot be collected, we raise an\nerror, instead of hanging forever trying to clear it.",
          "line_count": 3,
          "decorators": []
        }
      ],
      "docstring": "Test assert_no_gc_cycles ",
      "inheritance": []
    },
    "mod": {
      "file": "venv\\Lib\\site-packages\\numpy\\testing\\tests\\test_utils.py",
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        }
      ],
      "docstring": null,
      "inheritance": []
    },
    "MyArray": {
      "file": "venv\\Lib\\site-packages\\numpy\\testing\\tests\\test_utils.py",
      "methods": [
        {
          "name": "__eq__",
          "args": [
            "self",
            "other"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__lt__",
          "args": [
            "self",
            "other"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "all",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        }
      ],
      "docstring": null,
      "inheritance": []
    },
    "ReferenceCycleInDel": {
      "file": "venv\\Lib\\site-packages\\numpy\\testing\\tests\\test_utils.py",
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__del__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        }
      ],
      "docstring": "An object that not only contains a reference cycle, but creates new\ncycles whenever it's garbage-collected and its __del__ runs",
      "inheritance": []
    },
    "KnownFailureException": {
      "file": "venv\\Lib\\site-packages\\numpy\\testing\\_private\\utils.py",
      "methods": [],
      "docstring": "Raise this exception to mark a test as a known failing test.",
      "inheritance": [
        "Exception"
      ]
    },
    "_Dummy": {
      "file": "venv\\Lib\\site-packages\\numpy\\testing\\_private\\utils.py",
      "methods": [
        {
          "name": "nop",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        }
      ],
      "docstring": null,
      "inheritance": []
    },
    "IgnoreException": {
      "file": "venv\\Lib\\site-packages\\numpy\\testing\\_private\\utils.py",
      "methods": [],
      "docstring": "Ignoring this exception due to disabled feature",
      "inheritance": [
        "Exception"
      ]
    },
    "clear_and_catch_warnings": {
      "file": "venv\\Lib\\site-packages\\numpy\\testing\\_private\\utils.py",
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "record",
            "modules"
          ],
          "docstring": null,
          "line_count": 3,
          "decorators": []
        },
        {
          "name": "__enter__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "__exit__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        }
      ],
      "docstring": "Context manager that resets warning registry for catching warnings\n\nWarnings can be slippery, because, whenever a warning is triggered, Python\nadds a ``__warningregistry__`` member to the *calling* module.  This makes\nit impossible to retrigger the warning in this module, whatever you put in\nthe warnings filters.  This context manager accepts a sequence of `modules`\nas a keyword argument to its constructor and:\n\n* stores and removes any ``__warningregistry__`` entries in given `modules`\n  on entry;\n* resets ``__warningregistry__`` to its previous state on exit.\n\nThis makes it possible to trigger any warning afresh inside the context\nmanager without disturbing the state of warnings outside.\n\nFor compatibility with Python 3.0, please consider all arguments to be\nkeyword-only.\n\nParameters\n----------\nrecord : bool, optional\n    Specifies whether warnings should be captured by a custom\n    implementation of ``warnings.showwarning()`` and be appended to a list\n    returned by the context manager. Otherwise None is returned by the\n    context manager. The objects appended to the list are arguments whose\n    attributes mirror the arguments to ``showwarning()``.\nmodules : sequence, optional\n    Sequence of modules for which to reset warnings registry on entry and\n    restore on exit. To work correctly, all 'ignore' filters should\n    filter by one of these modules.\n\nExamples\n--------\n>>> import warnings\n>>> with np.testing.clear_and_catch_warnings(\n...         modules=[np._core.fromnumeric]):\n...     warnings.simplefilter('always')\n...     warnings.filterwarnings('ignore', module='np._core.fromnumeric')\n...     # do something that raises a warning but ignore those in\n...     # np._core.fromnumeric",
      "inheritance": []
    },
    "suppress_warnings": {
      "file": "venv\\Lib\\site-packages\\numpy\\testing\\_private\\utils.py",
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "forwarding_rule"
          ],
          "docstring": null,
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "_clear_registries",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "_filter",
          "args": [
            "self",
            "category",
            "message",
            "module",
            "record"
          ],
          "docstring": null,
          "line_count": 3,
          "decorators": []
        },
        {
          "name": "filter",
          "args": [
            "self",
            "category",
            "message",
            "module"
          ],
          "docstring": "Add a new suppressing filter or apply it if the state is entered.\n\nParameters\n----------\ncategory : class, optional\n    Warning class to filter\nmessage : string, optional\n    Regular expression matching the warning message.\nmodule : module, optional\n    Module to filter for. Note that the module (and its file)\n    must match exactly and cannot be a submodule. This may make\n    it unreliable for external modules.\n\nNotes\n-----\nWhen added within a context, filters are only added inside\nthe context and will be forgotten when the context is exited.",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "record",
          "args": [
            "self",
            "category",
            "message",
            "module"
          ],
          "docstring": "Append a new recording filter or apply it if the state is entered.\n\nAll warnings matching will be appended to the ``log`` attribute.\n\nParameters\n----------\ncategory : class, optional\n    Warning class to filter\nmessage : string, optional\n    Regular expression matching the warning message.\nmodule : module, optional\n    Module to filter for. Note that the module (and its file)\n    must match exactly and cannot be a submodule. This may make\n    it unreliable for external modules.\n\nReturns\n-------\nlog : list\n    A list which will be filled with all matched warnings.\n\nNotes\n-----\nWhen added within a context, filters are only added inside\nthe context and will be forgotten when the context is exited.",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "__enter__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 13,
          "decorators": []
        },
        {
          "name": "__exit__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 6,
          "decorators": []
        },
        {
          "name": "_showwarning",
          "args": [
            "self",
            "message",
            "category",
            "filename",
            "lineno"
          ],
          "docstring": null,
          "line_count": 6,
          "decorators": []
        },
        {
          "name": "__call__",
          "args": [
            "self",
            "func"
          ],
          "docstring": "Function decorator to apply certain suppressions to a whole\nfunction.",
          "line_count": 3,
          "decorators": []
        }
      ],
      "docstring": "Context manager and decorator doing much the same as\n``warnings.catch_warnings``.\n\nHowever, it also provides a filter mechanism to work around\nhttps://bugs.python.org/issue4180.\n\nThis bug causes Python before 3.4 to not reliably show warnings again\nafter they have been ignored once (even within catch_warnings). It\nmeans that no \"ignore\" filter can be used easily, since following\ntests might need to see the warning. Additionally it allows easier\nspecificity for testing warnings and can be nested.\n\nParameters\n----------\nforwarding_rule : str, optional\n    One of \"always\", \"once\", \"module\", or \"location\". Analogous to\n    the usual warnings module filter mode, it is useful to reduce\n    noise mostly on the outmost level. Unsuppressed and unrecorded\n    warnings will be forwarded based on this rule. Defaults to \"always\".\n    \"location\" is equivalent to the warnings \"default\", match by exact\n    location the warning warning originated from.\n\nNotes\n-----\nFilters added inside the context manager will be discarded again\nwhen leaving it. Upon entering all filters defined outside a\ncontext will be applied automatically.\n\nWhen a recording filter is added, matching warnings are stored in the\n``log`` attribute as well as in the list returned by ``record``.\n\nIf filters are added and the ``module`` keyword is given, the\nwarning registry of this module will additionally be cleared when\napplying it, entering the context, or exiting it. This could cause\nwarnings to appear a second time after leaving the context if they\nwere configured to be printed once (default) and were already\nprinted before the context was entered.\n\nNesting this context manager will work as expected when the\nforwarding rule is \"always\" (default). Unfiltered and unrecorded\nwarnings will be passed out and be matched by the outer level.\nOn the outmost level they will be printed (or caught by another\nwarnings context). The forwarding rule argument can modify this\nbehaviour.\n\nLike ``catch_warnings`` this context manager is not threadsafe.\n\nExamples\n--------\n\nWith a context manager::\n\n    with np.testing.suppress_warnings() as sup:\n        sup.filter(DeprecationWarning, \"Some text\")\n        sup.filter(module=np.ma.core)\n        log = sup.record(FutureWarning, \"Does this occur?\")\n        command_giving_warnings()\n        # The FutureWarning was given once, the filtered warnings were\n        # ignored. All other warnings abide outside settings (may be\n        # printed/error)\n        assert_(len(log) == 1)\n        assert_(len(sup.log) == 1)  # also stored in log attribute\n\nOr as a decorator::\n\n    sup = np.testing.suppress_warnings()\n    sup.filter(module=np.ma.core)  # module must match exactly\n    @sup\n    def some_function():\n        # do something which causes a warning in np.ma.core\n        pass",
      "inheritance": []
    },
    "TestMisc": {
      "file": "venv\\Lib\\site-packages\\numpy\\polynomial\\tests\\test_polyutils.py",
      "methods": [
        {
          "name": "test_trimseq",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "test_trimseq_empty_input",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "test_as_series",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 5,
          "decorators": []
        },
        {
          "name": "test_trimcoef",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 5,
          "decorators": []
        },
        {
          "name": "test_vander_nd_exception",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 3,
          "decorators": []
        },
        {
          "name": "test_div_zerodiv",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "test_pow_too_large",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        }
      ],
      "docstring": null,
      "inheritance": []
    },
    "TestDomain": {
      "file": "venv\\Lib\\site-packages\\numpy\\polynomial\\tests\\test_polyutils.py",
      "methods": [
        {
          "name": "test_getdomain",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 8,
          "decorators": []
        },
        {
          "name": "test_mapdomain",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 23,
          "decorators": []
        },
        {
          "name": "test_mapparms",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 10,
          "decorators": []
        }
      ],
      "docstring": null,
      "inheritance": []
    },
    "MyNDArray": {
      "file": "venv\\Lib\\site-packages\\numpy\\polynomial\\tests\\test_polyutils.py",
      "methods": [],
      "docstring": null,
      "inheritance": []
    },
    "TestByteBounds": {
      "file": "venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_array_utils.py",
      "methods": [
        {
          "name": "test_byte_bounds",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 3,
          "decorators": []
        },
        {
          "name": "test_unusual_order_positive_stride",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "test_unusual_order_negative_stride",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "test_strided",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 4,
          "decorators": []
        }
      ],
      "docstring": null,
      "inheritance": []
    },
    "NoPublicMethods": {
      "file": "venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_utils.py",
      "methods": [],
      "docstring": null,
      "inheritance": []
    },
    "WithPublicMethods": {
      "file": "venv\\Lib\\site-packages\\numpy\\lib\\tests\\test_utils.py",
      "methods": [
        {
          "name": "first_method",
          "args": [],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        }
      ],
      "docstring": null,
      "inheritance": []
    },
    "DistutilsBackend": {
      "file": "venv\\Lib\\site-packages\\numpy\\f2py\\_backends\\_distutils.py",
      "methods": [
        {
          "name": "__init__",
          "args": [
            "sef"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "compile",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 11,
          "decorators": []
        }
      ],
      "docstring": null,
      "inheritance": [
        "Backend"
      ]
    },
    "StreamTTY": {
      "file": "venv\\Lib\\site-packages\\colorama\\tests\\utils.py",
      "methods": [
        {
          "name": "isatty",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        }
      ],
      "docstring": null,
      "inheritance": [
        "StringIO"
      ]
    },
    "StreamNonTTY": {
      "file": "venv\\Lib\\site-packages\\colorama\\tests\\utils.py",
      "methods": [
        {
          "name": "isatty",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        }
      ],
      "docstring": null,
      "inheritance": [
        "StringIO"
      ]
    }
  },
  "configuration": {
    "Settings": {
      "file": "config\\settings.py",
      "methods": [],
      "docstring": "Configuration settings for the Healthcare Bill Review System 2.0.",
      "inheritance": []
    },
    "ConfigAttribute": {
      "file": "venv\\Lib\\site-packages\\flask\\config.py",
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "name",
            "get_converter"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "__get__",
          "args": [
            "self",
            "obj",
            "owner"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__get__",
          "args": [
            "self",
            "obj",
            "owner"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__get__",
          "args": [
            "self",
            "obj",
            "owner"
          ],
          "docstring": null,
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "__set__",
          "args": [
            "self",
            "obj",
            "value"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        }
      ],
      "docstring": "Makes an attribute forward to the config",
      "inheritance": []
    },
    "Config": {
      "file": "venv\\Lib\\site-packages\\flask\\config.py",
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "root_path",
            "defaults"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "from_envvar",
          "args": [
            "self",
            "variable_name",
            "silent"
          ],
          "docstring": "Loads a configuration from an environment variable pointing to\na configuration file.  This is basically just a shortcut with nicer\nerror messages for this line of code::\n\n    app.config.from_pyfile(os.environ['YOURAPPLICATION_SETTINGS'])\n\n:param variable_name: name of the environment variable\n:param silent: set to ``True`` if you want silent failure for missing\n               files.\n:return: ``True`` if the file was loaded successfully.",
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "from_prefixed_env",
          "args": [
            "self",
            "prefix"
          ],
          "docstring": "Load any environment variables that start with ``FLASK_``,\ndropping the prefix from the env key for the config key. Values\nare passed through a loading function to attempt to convert them\nto more specific types than strings.\n\nKeys are loaded in :func:`sorted` order.\n\nThe default loading function attempts to parse values as any\nvalid JSON type, including dicts and lists.\n\nSpecific items in nested dicts can be set by separating the\nkeys with double underscores (``__``). If an intermediate key\ndoesn't exist, it will be initialized to an empty dict.\n\n:param prefix: Load env vars that start with this prefix,\n    separated with an underscore (``_``).\n:param loads: Pass each string value to this function and use\n    the returned value as the config value. If any error is\n    raised it is ignored and the value remains a string. The\n    default is :func:`json.loads`.\n\n.. versionadded:: 2.1",
          "line_count": 5,
          "decorators": []
        },
        {
          "name": "from_pyfile",
          "args": [
            "self",
            "filename",
            "silent"
          ],
          "docstring": "Updates the values in the config from a Python file.  This function\nbehaves as if the file was imported as module with the\n:meth:`from_object` function.\n\n:param filename: the filename of the config.  This can either be an\n                 absolute filename or a filename relative to the\n                 root path.\n:param silent: set to ``True`` if you want silent failure for missing\n               files.\n:return: ``True`` if the file was loaded successfully.\n\n.. versionadded:: 0.7\n   `silent` parameter.",
          "line_count": 7,
          "decorators": []
        },
        {
          "name": "from_object",
          "args": [
            "self",
            "obj"
          ],
          "docstring": "Updates the values from the given object.  An object can be of one\nof the following two types:\n\n-   a string: in this case the object with that name will be imported\n-   an actual object reference: that object is used directly\n\nObjects are usually either modules or classes. :meth:`from_object`\nloads only the uppercase attributes of the module/class. A ``dict``\nobject will not work with :meth:`from_object` because the keys of a\n``dict`` are not attributes of the ``dict`` class.\n\nExample of module-based configuration::\n\n    app.config.from_object('yourapplication.default_config')\n    from yourapplication import default_config\n    app.config.from_object(default_config)\n\nNothing is done to the object before loading. If the object is a\nclass and has ``@property`` attributes, it needs to be\ninstantiated before being passed to this method.\n\nYou should not use this function to load the actual configuration but\nrather configuration defaults.  The actual config should be loaded\nwith :meth:`from_pyfile` and ideally from a location not within the\npackage because the package might be installed system wide.\n\nSee :ref:`config-dev-prod` for an example of class-based configuration\nusing :meth:`from_object`.\n\n:param obj: an import name or object",
          "line_count": 3,
          "decorators": []
        },
        {
          "name": "from_file",
          "args": [
            "self",
            "filename",
            "load",
            "silent",
            "text"
          ],
          "docstring": "Update the values in the config from a file that is loaded\nusing the ``load`` parameter. The loaded data is passed to the\n:meth:`from_mapping` method.\n\n.. code-block:: python\n\n    import json\n    app.config.from_file(\"config.json\", load=json.load)\n\n    import tomllib\n    app.config.from_file(\"config.toml\", load=tomllib.load, text=False)\n\n:param filename: The path to the data file. This can be an\n    absolute path or relative to the config root path.\n:param load: A callable that takes a file handle and returns a\n    mapping of loaded data from the file.\n:type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n    implements a ``read`` method.\n:param silent: Ignore the file if it doesn't exist.\n:param text: Open the file in text or binary mode.\n:return: ``True`` if the file was loaded successfully.\n\n.. versionchanged:: 2.3\n    The ``text`` parameter was added.\n\n.. versionadded:: 2.0",
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "from_mapping",
          "args": [
            "self",
            "mapping"
          ],
          "docstring": "Updates the config like :meth:`update` ignoring items with\nnon-upper keys.\n\n:return: Always returns ``True``.\n\n.. versionadded:: 0.11",
          "line_count": 6,
          "decorators": []
        },
        {
          "name": "get_namespace",
          "args": [
            "self",
            "namespace",
            "lowercase",
            "trim_namespace"
          ],
          "docstring": "Returns a dictionary containing a subset of configuration options\nthat match the specified namespace/prefix. Example usage::\n\n    app.config['IMAGE_STORE_TYPE'] = 'fs'\n    app.config['IMAGE_STORE_PATH'] = '/var/app/images'\n    app.config['IMAGE_STORE_BASE_URL'] = 'http://img.website.com'\n    image_store_config = app.config.get_namespace('IMAGE_STORE_')\n\nThe resulting dictionary `image_store_config` would look like::\n\n    {\n        'type': 'fs',\n        'path': '/var/app/images',\n        'base_url': 'http://img.website.com'\n    }\n\nThis is often useful when configuration options map directly to\nkeyword arguments in functions or class constructors.\n\n:param namespace: a configuration namespace\n:param lowercase: a flag indicating if the keys of the resulting\n                  dictionary should be lowercase\n:param trim_namespace: a flag indicating if the keys of the resulting\n                  dictionary should not include the namespace\n\n.. versionadded:: 0.11",
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "__repr__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        }
      ],
      "docstring": "Works exactly like a dict but provides ways to fill it from files\nor special dictionaries.  There are two common patterns to populate the\nconfig.\n\nEither you can fill the config from a config file::\n\n    app.config.from_pyfile('yourconfig.cfg')\n\nOr alternatively you can define the configuration options in the\nmodule that calls :meth:`from_object` or provide an import path to\na module that should be loaded.  It is also possible to tell it to\nuse the same module and with that provide the configuration values\njust before the call::\n\n    DEBUG = True\n    SECRET_KEY = 'development key'\n    app.config.from_object(__name__)\n\nIn both cases (loading from any Python file or loading from modules),\nonly uppercase keys are added to the config.  This makes it possible to use\nlowercase values in the config file for temporary values that are not added\nto the config or to define the config keys in the same file that implements\nthe application.\n\nProbably the most interesting way to load configurations is from an\nenvironment variable pointing to a file::\n\n    app.config.from_envvar('YOURAPPLICATION_SETTINGS')\n\nIn this case before launching the application you have to set this\nenvironment variable to the file you want to use.  On Linux and OS X\nuse the export statement::\n\n    export YOURAPPLICATION_SETTINGS='/path/to/config/file'\n\nOn windows use `set` instead.\n\n:param root_path: path to which files are read relative from.  When the\n                  config object is created by the application, this is\n                  the application's :attr:`~flask.Flask.root_path`.\n:param defaults: an optional dictionary of default values",
      "inheritance": [
        "dict"
      ]
    },
    "DisplayModes": {
      "file": "venv\\Lib\\site-packages\\numpy\\__config__.py",
      "methods": [],
      "docstring": null,
      "inheritance": [
        "Enum"
      ]
    },
    "Configuration": {
      "file": "venv\\Lib\\site-packages\\pip\\_internal\\configuration.py",
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "isolated",
            "load_only"
          ],
          "docstring": null,
          "line_count": 7,
          "decorators": []
        },
        {
          "name": "load",
          "args": [
            "self"
          ],
          "docstring": "Loads configuration from configuration files and environment",
          "line_count": 3,
          "decorators": []
        },
        {
          "name": "get_file_to_edit",
          "args": [
            "self"
          ],
          "docstring": "Returns the file with highest priority in configuration",
          "line_count": 3,
          "decorators": []
        },
        {
          "name": "items",
          "args": [
            "self"
          ],
          "docstring": "Returns key-value pairs like dict.items() representing the loaded\nconfiguration",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "get_value",
          "args": [
            "self",
            "key"
          ],
          "docstring": "Get a value from the configuration.",
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "set_value",
          "args": [
            "self",
            "key",
            "value"
          ],
          "docstring": "Modify a value in the configuration.",
          "line_count": 8,
          "decorators": []
        },
        {
          "name": "unset_value",
          "args": [
            "self",
            "key"
          ],
          "docstring": "Unset a value in the configuration.",
          "line_count": 9,
          "decorators": []
        },
        {
          "name": "save",
          "args": [
            "self"
          ],
          "docstring": "Save the current in-memory state.",
          "line_count": 3,
          "decorators": []
        },
        {
          "name": "_ensure_have_load_only",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "_dictionary",
          "args": [
            "self"
          ],
          "docstring": "A dictionary representing the loaded configuration.",
          "line_count": 4,
          "decorators": [
            "property"
          ]
        },
        {
          "name": "_load_config_files",
          "args": [
            "self"
          ],
          "docstring": "Loads configuration from configuration files",
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "_load_file",
          "args": [
            "self",
            "variant",
            "fname"
          ],
          "docstring": null,
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "_construct_parser",
          "args": [
            "self",
            "fname"
          ],
          "docstring": null,
          "line_count": 3,
          "decorators": []
        },
        {
          "name": "_load_environment_vars",
          "args": [
            "self"
          ],
          "docstring": "Loads configuration from environment variables",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "_normalized_keys",
          "args": [
            "self",
            "section",
            "items"
          ],
          "docstring": "Normalizes items to construct a dictionary with normalized keys.\n\nThis routine is where the names become keys and are made the same\nregardless of source - configuration files or environment.",
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "get_environ_vars",
          "args": [
            "self"
          ],
          "docstring": "Returns a generator with all environmental vars with prefix PIP_",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "iter_config_files",
          "args": [
            "self"
          ],
          "docstring": "Yields variant and configuration files associated with it.\n\nThis should be treated like items of a dictionary. The order\nhere doesn't affect what gets overridden. That is controlled\nby OVERRIDE_ORDER. However this does control the order they are\ndisplayed to the user. It's probably most ergonomic to display\nthings in the same order as OVERRIDE_ORDER",
          "line_count": 8,
          "decorators": []
        },
        {
          "name": "get_values_in_config",
          "args": [
            "self",
            "variant"
          ],
          "docstring": "Get values present in a config file",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "_get_parser_to_modify",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "_mark_as_modified",
          "args": [
            "self",
            "fname",
            "parser"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "__repr__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        }
      ],
      "docstring": "Handles management of configuration.\n\nProvides an interface to accessing and managing configuration files.\n\nThis class converts provides an API that takes \"section.key-name\" style\nkeys and stores the value associated with it as \"key-name\" under the\nsection \"section\".\n\nThis allows for a clean interface wherein the both the section and the\nkey-name are preserved in an easy to manage form in the configuration files\nand the data stored is also nice.",
      "inheritance": []
    },
    "ConfigurationCommand": {
      "file": "venv\\Lib\\site-packages\\pip\\_internal\\commands\\configuration.py",
      "methods": [
        {
          "name": "add_options",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 5,
          "decorators": []
        },
        {
          "name": "run",
          "args": [
            "self",
            "options",
            "args"
          ],
          "docstring": null,
          "line_count": 8,
          "decorators": []
        },
        {
          "name": "_determine_file",
          "args": [
            "self",
            "options",
            "need_value"
          ],
          "docstring": null,
          "line_count": 3,
          "decorators": []
        },
        {
          "name": "list_values",
          "args": [
            "self",
            "options",
            "args"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "get_name",
          "args": [
            "self",
            "options",
            "args"
          ],
          "docstring": null,
          "line_count": 3,
          "decorators": []
        },
        {
          "name": "set_name_value",
          "args": [
            "self",
            "options",
            "args"
          ],
          "docstring": null,
          "line_count": 3,
          "decorators": []
        },
        {
          "name": "unset_name",
          "args": [
            "self",
            "options",
            "args"
          ],
          "docstring": null,
          "line_count": 3,
          "decorators": []
        },
        {
          "name": "list_config_values",
          "args": [
            "self",
            "options",
            "args"
          ],
          "docstring": "List config key-value pairs across different config files",
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "print_config_file_values",
          "args": [
            "self",
            "variant"
          ],
          "docstring": "Get key-value pairs from the file of a variant",
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "print_env_var_values",
          "args": [
            "self"
          ],
          "docstring": "Get key-values pairs present as environment variables",
          "line_count": 3,
          "decorators": []
        },
        {
          "name": "open_in_editor",
          "args": [
            "self",
            "options",
            "args"
          ],
          "docstring": null,
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "_get_n_args",
          "args": [
            "self",
            "args",
            "example",
            "n"
          ],
          "docstring": "Helper to make sure the command got the right number of arguments",
          "line_count": 3,
          "decorators": []
        },
        {
          "name": "_save_configuration",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "_determine_editor",
          "args": [
            "self",
            "options"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        }
      ],
      "docstring": "Manage local and global configuration.\n\nSubcommands:\n\n- list: List the active configuration (or from the file specified)\n- edit: Edit the configuration file in an editor\n- get: Get the value associated with command.option\n- set: Set the command.option=value\n- unset: Unset the value associated with command.option\n- debug: List the configuration files and values defined under them\n\nConfiguration keys should be dot separated command and option name,\nwith the special prefix \"global\" affecting any command. For example,\n\"pip config set global.index-url https://example.org/\" would configure\nthe index url for all commands, but \"pip config set download.timeout 10\"\nwould configure a 10 second timeout only for \"pip download\" commands.\n\nIf none of --user, --global and --site are passed, a virtual\nenvironment configuration file is used if one is active and the file\nexists. Otherwise, all modifications happen to the user file by\ndefault.",
      "inheritance": [
        "Command"
      ]
    },
    "DeprecatedOption": {
      "file": "venv\\Lib\\site-packages\\pandas\\_config\\config.py",
      "methods": [],
      "docstring": null,
      "inheritance": [
        "NamedTuple"
      ]
    },
    "RegisteredOption": {
      "file": "venv\\Lib\\site-packages\\pandas\\_config\\config.py",
      "methods": [],
      "docstring": null,
      "inheritance": [
        "NamedTuple"
      ]
    },
    "OptionError": {
      "file": "venv\\Lib\\site-packages\\pandas\\_config\\config.py",
      "methods": [],
      "docstring": "Exception raised for pandas.options.\n\nBackwards compatible with KeyError checks.\n\nExamples\n--------\n>>> pd.options.context\nTraceback (most recent call last):\nOptionError: No such option",
      "inheritance": [
        "AttributeError",
        "KeyError"
      ]
    },
    "DictWrapper": {
      "file": "venv\\Lib\\site-packages\\pandas\\_config\\config.py",
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "d",
            "prefix"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "__setattr__",
          "args": [
            "self",
            "key",
            "val"
          ],
          "docstring": null,
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "__getattr__",
          "args": [
            "self",
            "key"
          ],
          "docstring": null,
          "line_count": 5,
          "decorators": []
        },
        {
          "name": "__dir__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        }
      ],
      "docstring": "provide attribute-style access to a nested dict",
      "inheritance": []
    },
    "CallableDynamicDoc": {
      "file": "venv\\Lib\\site-packages\\pandas\\_config\\config.py",
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "func",
            "doc_tmpl"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "__call__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "__doc__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 3,
          "decorators": [
            "property"
          ]
        }
      ],
      "docstring": null,
      "inheritance": []
    },
    "option_context": {
      "file": "venv\\Lib\\site-packages\\pandas\\_config\\config.py",
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "__enter__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "__exit__",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        }
      ],
      "docstring": "Context manager to temporarily set options in the `with` statement context.\n\nYou need to invoke as ``option_context(pat, val, [(pat, val), ...])``.\n\nExamples\n--------\n>>> from pandas import option_context\n>>> with option_context('display.max_rows', 10, 'display.max_columns', 5):\n...     pass",
      "inheritance": [
        "ContextDecorator"
      ]
    },
    "TestConfig": {
      "file": "venv\\Lib\\site-packages\\pandas\\tests\\config\\test_config.py",
      "methods": [
        {
          "name": "clean_config",
          "args": [
            "self",
            "monkeypatch"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "test_api",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 4,
          "decorators": []
        },
        {
          "name": "test_is_one_of_factory",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 5,
          "decorators": []
        },
        {
          "name": "test_register_option",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 13,
          "decorators": []
        },
        {
          "name": "test_describe_option",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 25,
          "decorators": []
        },
        {
          "name": "test_case_insensitive",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 9,
          "decorators": []
        },
        {
          "name": "test_get_option",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 8,
          "decorators": []
        },
        {
          "name": "test_set_option",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 14,
          "decorators": []
        },
        {
          "name": "test_set_option_empty_args",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "test_set_option_uneven_args",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "test_set_option_invalid_single_argument_type",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "test_set_option_multiple",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 10,
          "decorators": []
        },
        {
          "name": "test_validation",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 21,
          "decorators": []
        },
        {
          "name": "test_reset_option",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 14,
          "decorators": []
        },
        {
          "name": "test_reset_option_all",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 11,
          "decorators": []
        },
        {
          "name": "test_deprecate_option",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 18,
          "decorators": []
        },
        {
          "name": "test_config_prefix",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 8,
          "decorators": []
        },
        {
          "name": "test_callback",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 16,
          "decorators": []
        },
        {
          "name": "test_set_ContextManager",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 9,
          "decorators": []
        },
        {
          "name": "test_attribute_access",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 16,
          "decorators": []
        },
        {
          "name": "test_option_context_scope",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 8,
          "decorators": []
        },
        {
          "name": "test_dictwrapper_getattr",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 3,
          "decorators": []
        }
      ],
      "docstring": null,
      "inheritance": []
    },
    "TestNumPyConfigs": {
      "file": "venv\\Lib\\site-packages\\numpy\\tests\\test_numpy_config.py",
      "methods": [
        {
          "name": "test_pyyaml_not_found",
          "args": [
            "self",
            "mock_yaml_importer"
          ],
          "docstring": null,
          "line_count": 2,
          "decorators": []
        },
        {
          "name": "test_dict_mode",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 3,
          "decorators": []
        },
        {
          "name": "test_invalid_mode",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        },
        {
          "name": "test_warn_to_add_tests",
          "args": [
            "self"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        }
      ],
      "docstring": null,
      "inheritance": []
    },
    "Write1": {
      "file": "venv\\Lib\\site-packages\\numpy\\typing\\tests\\data\\pass\\ufunc_config.py",
      "methods": [
        {
          "name": "write",
          "args": [
            "self",
            "a"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        }
      ],
      "docstring": null,
      "inheritance": []
    },
    "Write2": {
      "file": "venv\\Lib\\site-packages\\numpy\\typing\\tests\\data\\pass\\ufunc_config.py",
      "methods": [
        {
          "name": "write",
          "args": [
            "self",
            "a",
            "b"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        }
      ],
      "docstring": null,
      "inheritance": []
    },
    "Write3": {
      "file": "venv\\Lib\\site-packages\\numpy\\typing\\tests\\data\\pass\\ufunc_config.py",
      "methods": [
        {
          "name": "write",
          "args": [
            "self",
            "a"
          ],
          "docstring": null,
          "line_count": 1,
          "decorators": []
        }
      ],
      "docstring": null,
      "inheritance": []
    }
  }
}